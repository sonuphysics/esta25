This part of the project documentation focuses on a
**problem-oriented** approach. You'll tackle common
tasks that you might have, with the help of the code
provided in this project.

## Modules in EStA

`cf` is converion factor module which can handle conversion of units of measurement from one system 
to another. It is used in the following way:

<!-- You have two numbers and you need to add them together.
You're in luck! The `calculator` package can help you
get this done.

Download the code from this GitHub repository and place
the `calculator/` folder in the same directory as your
Python script:

    your_project/
    │
    ├── calculator/
    │   ├── __init__.py
    │   └── calculations.py
    │
    └── your_script.py

Inside of `your_script.py` you can now import the
`add()` function from the `calculator.calculations`
module:

    # your_script.py
    from calculator.calculations import add

After you've imported the function, you can use it
to add any two numbers that you need to add:

    # your_script.py
    from calculator.calculations import add

    print(add(20, 22))  # OUTPUT: 42.0

You're now able to add any two numbers, and you'll
always get a `float` as a result. -->


How to install EStA and set up environment
  • Install via pip / conda / from source
  • Installing dependencies (spglib, Fortran parts, C parts, etc.)
  • Verifying the installation works

How to generate input files for a calculation (VASP / Quantum‑ESPRESSO / Gaussian, etc.)
  • Using esta.qeBag.gen_qeinput or gen_qeinput2 etc. 

  • Setup of input parameters (k‑points, pseudopotentials, etc.)

How to read and analyze outputs from those softwares
  • Extracting bands, k‑points, band gaps via esta.qeBag.bands_kpts_band_gap etc. 
skphy.github.io

  • Reading force constants etc. via phonon subpackage 
skphy.github.io

How to perform phonon / vibrational / thermodynamic analysis
  • Using esta.phonon modules to get frequencies, force constants, zero point energy, etc. 
skphy.github.io

How to find transition states / NEB paths
  • Using esta.transitionState.neb, optimizer etc. 
skphy.github.io

How to manipulate / modify structures
  • E.g. deleting atoms, substitution, cell transformations, vacuum region etc. via esta.general submodules 
skphy.github.io

How to use machine learning parts
  • Regression or classification tasks using esta.mlBag etc. if available. Create a UML example: train on data, predict properties. 
skphy.github.io

Working example from start to finish
Pick a physical system (maybe a small molecule or simple crystal), perform structuring, run calculation, extract bands, compute phonons, etc. That will tie many features together for a demo.





<!-- 
1. To calculate vibrational frequency by reading the `band.yaml` from `phonopy` : 
``` py
# coding: utf-8
import numpy as np
from esta import cf
import  esta.phononBag.phonopy.phonon_dispersion as phon

data = phon.read_phonon_disp('band.yaml')
#print (np.shape(data))
_, freq, _,  _ = data

freq_cmii = cf.thtz2cmii * freq[0]

print("zone centre freqs in cm-1 : ")

for ii, i in enumerate(freq_cmii):
    #print ("{0} {1:.3f}".format(ii, i))
    print ("{0} {1:.1f}".format(ii, i))

print('irreps of the freq is not output: for irreps use ')
print (' command like this: --->  phonopy --dim="1 1 1" --irreps="0 0 0" | tee irreps.out')
print( "                          grep -ri '):' irreps.out > freq_with_irreps.out ")

print('better TRY this:  phonopy --qe -c PrZrO.scf.in --dim="2 2 2" --irreps="0 0 0"  --fc-symmetry -p --factor=3634.1751795 | tee irreps.out  -----------------> gives freq in cm-1 ')
print("                          --- grep -ri '):' irreps.out > freq_with_irreps.out")

```


2. To get phonon-dispersion plot with phdos (phonon density of states): 
``` py
'''
phonon dispersion and phonon density of state plot by reading 
band.yaml and phonon_dos.dat files for different systems 
'''
def plot_phonon_disp_with_phdos():
    import sys
    from os.path import isfile
    from cycler import cycler

    
    import argparse
    import pandas as pd
    import numpy as np 
    import yaml
    
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    from matplotlib.ticker import (MultipleLocator, FormatStrFormatter, AutoMinorLocator)
    from matplotlib.gridspec import GridSpec
    
    
    import esta.measure.conversion_factors as cf
    import esta.phononBag.phonopy.projected_phonon_dos as proj_ph_dos #.read_projected_phonon_dos(filename, atomBlocks = None):
    import esta.phononBag.phonopy.phonon_dispersion as ph_disp #.read_phonon_disp(filename)
    
    
    
   
    
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']
    
    mpl.rcParams['axes.linewidth'] = 3 #2
    
    
    fig, ax = plt.subplots(3,4, figsize=(15,20), gridspec_kw={'width_ratios': [3.2, 0.81, 3.2, 0.81],'wspace':0.05,'hspace':0.075})
    print(ax, np.shape(ax))
    
    fig.delaxes(ax[0,0]) # del axis 0,0 from the plt.subplots
    fig.delaxes(ax[0,1]) # del axis 0,1 from the plt.subplots

    #=============read projected_dos.dat files for different systems======================================

    freq_phdos1, phdos1 = proj_ph_dos.read_projected_phonon_dos('1_Pr_projected_dos.dat', atomBlocks = ['1-4', '5-8', '9-22'])    
    freq_phdos2, phdos2 = proj_ph_dos.read_projected_phonon_dos('2_Nd_projected_dos.dat', atomBlocks = ['1-4', '5-8', '9-22'])
    freq_phdos3, phdos3 = proj_ph_dos.read_projected_phonon_dos('3_Sm_projected_dos.dat', atomBlocks = ['1-4', '5-8', '9-22'])
    freq_phdos4, phdos4 = proj_ph_dos.read_projected_phonon_dos('4_Eu_projected_dos.dat', atomBlocks = ['1-4', '5-8', '9-22'])
    freq_phdos5, phdos5 = proj_ph_dos.read_projected_phonon_dos('5_Gd_projected_dos.dat', atomBlocks = ['1-4', '5-8', '9-22'])
    
    print('freq_phdos1, phdos1: shapes')
    print(np.shape(freq_phdos1))
    print(np.shape(phdos1))
    print('--------------')    
    #=============read projected_dos.dat files for different systems  end ===================================


    

    #=============read phonon disperson data for different systems==============================================
    phonon_files = ['1_Pr_band.yaml', '2_Nd_band.yaml', '3_Sm_band.yaml', '4_Eu_band.yaml', '5_Gd_band.yaml' ]
    point4lleg = [[]]*len(phonon_files)  # each point4llgen list will be an array of points of size equal to no. of legends
    lleg = [[]]* len(phonon_files)       # east list element will a list of legends 
    
    distance1, freq1, point4lleg[0], lleg[0] = ph_disp.read_phonon_disp(phonon_files[0])
    distance2, freq2, point4lleg[1], lleg[1] = ph_disp.read_phonon_disp(phonon_files[1])
    distance3, freq3, point4lleg[2], lleg[2] = ph_disp.read_phonon_disp(phonon_files[2])
    distance4, freq4, point4lleg[3], lleg[3] = ph_disp.read_phonon_disp(phonon_files[3])
    distance5, freq5, point4lleg[4], lleg[4] = ph_disp.read_phonon_disp(phonon_files[4])
    #=============read phonon disperson data for different systems============END ==============================
    



    #=============================================================================
    # phonon dispersion plots-----------------
    ax[0,2].plot(distance1, freq1, color='blue',lw=1.5)    # all branches
    ax[1,0].plot(distance2, freq2, color='blue',lw=1.5)
    ax[1,2].plot(distance3, freq3, color='blue',lw=1.5)
    ax[2,0].plot(distance4, freq4, color='blue',lw=1.5)
    ax[2,2].plot(distance5, freq5, color='blue',lw=1.5)
    
    #phdos plots-----------------------------
    ax[0,3].plot(phdos1[:,0], freq_phdos1, color='red',lw=1.5,label='Pr')    
    ax[0,3].plot(phdos1[:,1], freq_phdos1, color='green',lw=1.5,label='Zr')  
    ax[0,3].plot(phdos1[:,2], freq_phdos1, color='blue',lw=1.5,label='O')    

    ax[1,1].plot(phdos2[:,0], freq_phdos2, color='red',lw=1.5,label='Nd')    
    ax[1,1].plot(phdos2[:,1], freq_phdos2, color='green',lw=1.5,label='Zr')  
    ax[1,1].plot(phdos2[:,2], freq_phdos2, color='blue',lw=1.5,label='O')    
    
    ax[1,3].plot(phdos3[:,0], freq_phdos3, color='red',lw=1.5,label='Sm')    
    ax[1,3].plot(phdos3[:,1], freq_phdos3, color='green',lw=1.5,label='Zr')  
    ax[1,3].plot(phdos3[:,2], freq_phdos3, color='blue',lw=1.5,label='O')    
    
    ax[2,1].plot(phdos4[:,0], freq_phdos4, color='red',lw=1.5,label='Eu')    
    ax[2,1].plot(phdos4[:,1], freq_phdos4, color='green',lw=1.5,label='Zr')  
    ax[2,1].plot(phdos4[:,2], freq_phdos4, color='blue',lw=1.5,label='O')    
    
    ax[2,3].plot(phdos5[:,0], freq_phdos5, color='red',lw=1.5,label='Gd')    
    ax[2,3].plot(phdos5[:,1], freq_phdos5, color='green',lw=1.5,label='Zr')  
    ax[2,3].plot(phdos5[:,2], freq_phdos5, color='blue',lw=1.5,label='O')    
#===========================================================================================    
    
    # phonon dispersion ax properties -------------------------------------------------------
    ax_prop = [[0,2], [1,0], [1,2], [2,0], [2,2]]  # loop over all ax object using this list of list for phonon dispersion
    for jj, ii in enumerate(ax_prop):
        #----one ax plot properties ----------------------------------------------------------
        ax[ii[0],ii[1]].axhline(linewidth=1, color='black', linestyle='--')
        # location of labels e.g. Gamma X L W K .. so on depending upon point labels in p
        print('lleg are: {}'.format(lleg[jj]))
        print('point4lleg are: {}'.format(point4lleg[jj]))
        for i in point4lleg[jj]:
            #axis.axvline(x=i, linewidth=2, color='black')
            ax[ii[0],ii[1]].axvline(x=i, linewidth=1, color='black')

        #plt.xticks(point4lleg, lleg)
        ax[ii[0],ii[1]].set_xticks(point4lleg[jj], lleg[jj]) #, size=8)
        ax[ii[0],ii[1]].xaxis.set_minor_locator(mpl.ticker.NullLocator())
        ax[ii[0],ii[1]].set_xlim(0, point4lleg[jj][-1])
        ax[ii[0],ii[1]].set_ylim([0,800])

        
        ax[ii[0],ii[1]].set_ylabel(r'Freq (cm$^{-1}$)', fontsize=20)
        

        #========================================================================================
        # Make a plot with major ticks that are multiples of 20 and minor ticks that
        # are multiples of 5.  Label major ticks with '%d' formatting but don't label
        # minor ticks.
        ax[ii[0],ii[1]].yaxis.set_major_locator(MultipleLocator(100))
        ax[ii[0],ii[1]].yaxis.set_major_formatter(FormatStrFormatter('%d'))

        # For the minor ticks, use no labels; default NullFormatter.
        ax[ii[0],ii[1]].yaxis.set_minor_locator(MultipleLocator(50))
        #========================================================================================
        
        
        
        
        ax[ii[0],ii[1]].tick_params(axis='both', which='major', labelsize=20,length=1, width=1)#0.5) #40)
        ax[ii[0],ii[1]].tick_params(axis='both', which='minor', labelsize=10) #20)    
        #----one ax plot properties --------END-----------------------------------------------
    # phonon dispersion ax properties ------END-----------------------------------------------
    ax[1,2].set_yticklabels([])
    ax[2,2].set_yticklabels([])

    ax[1,2].axes.get_yaxis().set_visible(False)
    ax[2,2].axes.get_yaxis().set_visible(False)
    
    
    

    # phonon dos ax properties  settings -------------------------------------------------------
    ax_prop = [[0,3], [1,1], [1,3], [2,1], [2,3]]  
    for ii in ax_prop:
        ax[ii[0],ii[1]].xaxis.set_minor_locator(mpl.ticker.NullLocator())
        ax[ii[0],ii[1]].tick_params(axis='both', which='major', labelsize=20,length=1, width=1) #40)
        ax[ii[0],ii[1]].tick_params(axis='both', which='minor', labelsize=10) #20)    
        
        ax[ii[0],ii[1]].legend()
        ax[ii[0],ii[1]].set_xlim([0,.35])
        ax[ii[0],ii[1]].set_ylim([0,800])
        ax[ii[0],ii[1]].legend(prop=dict(size=12))

        ax[ii[0],ii[1]].set_xlabel(r'pdos(a.u)', fontsize=16)
        
        # Turn off tick labels
        ax[ii[0],ii[1]].set_yticklabels([])
        ax[ii[0],ii[1]].set_xticklabels([])
    # phonon dos ax properties  settings -- END----------------------------------------------------

    

    plt.tight_layout()
#     plt.savefig('del_phonon_pdos.pdf'.format(args.output) if args.output is not None else 'plot_phonon.pdf', dpi=300)
    plt.savefig('phonon_pdos_all.png', dpi =400)
    plt.savefig('phonon_pdos_all.pdf', dpi =400)
    plt.show()
    print('plotting done ..!!')

if __name__ == '__main__':
    plot_phonon_disp_with_phdos()



``` -->