{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EStA Software","text":"<p>EStA : Electronic Structure Automater </p> <p><code>Electronic Structure Automater</code> (EStA) aka pytware for analyzing and calculating to some extent the properties  of materials and molecules.</p> <ol> <li> <p>EStA software package is capable of analyzing, pre-processing, and post-processing data from different software packages such as <code>vasp</code>, <code>quantum-espresso</code>, <code>gaussian</code>, <code>xTB</code>, grrm, and so on. </p> </li> <li> <p>It can automatically generate input files for vasp, quantum-esspresso, gaussian, grrm, and other  codes as well can do some model calculations. It is written in <code>python3</code>, <code>modern Fotran</code>, and some  part in C. In future, it will be able to perform calculations for predicting electronic and transport properties.</p> </li> </ol>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation consists of <code>four</code> parts</p> <ol> <li>Explanation</li> <li>How-To Guides</li> <li>Tutorials</li> <li>Reference</li> </ol>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Thank you to all those who have supported, discussed, and interacted with me throughout my academic career.</p>"},{"location":"explanation/","title":"Installation","text":"<p>Installation of <code>EStA</code> is super easy provided you have necesarry python packages already installed in python3 environment (python 2 not supported).</p> <ul> <li> <p>To install, just go the source directory, and execute the install.sh file as: <pre><code>./install.sh\n</code></pre></p> </li> <li> <p>or simply, type the following: <pre><code>python setpy.py install --user\n</code></pre> This will install the <code>EStA</code> in your local directory.</p> </li> </ul> <p>EStA contains various software preprocessing and postprocessing routines to make    tasks easily and automated to some extents.</p> <p>One class is <code>Xat</code> OR <code>aadhaar</code> class to handle atomic structure information i.e. atomic positions, atomic     symbols, cell parameters. It can handle both molecules and periodic systems. Molecules are handled     using xyz file format and periodic systems are handled using POSCAR file format. These formats can     be further suited to other file format,     Various Bags are present in the EStA folder to handle software specific data such as <code>vaspBag</code>, <code>qeBag</code>,     <code>siestaBag</code>, <code>grrmBag</code>, <code>xtbBag</code>, and so on.</p> <p>Thermodynamics can be calculated based on the vibrational calculation implemented in the <code>qeBag</code>. Similarly     transition state analysis is possible using routines in the <code>transitionState</code>.     There are lots of routines some written in fortran to be interfaced with <code>EStA</code> package. Machine learning     algorithms are also implemented such as GPR based on gaussian processes in the <code>mlBag</code>.</p> <p>Try to excess the aadhaar class in the general directory and then you can access atomic and poscar atoms    informations. Also in vaspBag.inout, try to access the crystal lattice class for poscar file.</p> <p> Note </p> <ol> <li>Atom/atoms are handled by <code>Xat</code> aka <code>Aadhaar</code> class.</li> <li>Crystal lattice (atoms and lattice) is handled by the <code>Xlat</code> aka <code>CrystalLattice</code> class.</li> </ol>"},{"location":"how-to-guides/","title":"How-To Guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"how-to-guides/#modules-in-esta","title":"Modules in EStA","text":"<p>Based on the documentation for EStA v2.9.5, here are concrete guide ideas &amp; how you might structure them, with relevant modules</p>"},{"location":"how-to-guides/#how-to-install-esta-and-set-up-environment","title":"How to install EStA and set up environment","text":"<p>\u2022 Install via pip / conda / from source \u2003 \u2022 Installing dependencies (spglib, Fortran parts, C parts, etc.) \u2003 \u2022 Verifying the installation works</p>"},{"location":"how-to-guides/#how-to-generate-input-files-for-a-calculation-vasp-quantumespresso-gaussian-etc","title":"How to generate input files for a calculation (VASP / Quantum\u2011ESPRESSO / Gaussian, etc.)","text":"<p>\u2022 Using esta.qeBag.gen_qeinput or gen_qeinput2 etc. </p> <p>\u2022 Setup of input parameters (k\u2011points, pseudopotentials, etc.)</p>"},{"location":"how-to-guides/#how-to-read-and-analyze-outputs-from-those-softwares","title":"How to read and analyze outputs from those softwares","text":"<p>\u2022 Extracting bands, k\u2011points, band gaps via esta.qeBag.bands_kpts_band_gap etc. </p> <p>\u2022 Reading force constants etc. via phonon subpackage </p>"},{"location":"how-to-guides/#how-to-perform-phonon-vibrational-thermodynamic-analysis","title":"How to perform phonon / vibrational / thermodynamic analysis","text":"<p>\u2022 Using esta.phonon modules to get frequencies, force constants, zero point energy, etc. </p>"},{"location":"how-to-guides/#how-to-find-transition-states-neb-paths","title":"How to find transition states / NEB paths","text":"<p>\u2022 Using esta.transitionState.neb, optimizer etc. </p>"},{"location":"how-to-guides/#how-to-manipulate-modify-structures","title":"How to manipulate / modify structures","text":"<p>\u2022 E.g. deleting atoms, substitution, cell transformations, vacuum region etc. via esta.general submodules </p>"},{"location":"how-to-guides/#how-to-use-machine-learning-parts","title":"How to use machine learning parts","text":"<p>\u2022 Regression or classification tasks using esta.mlBag etc. if available. Create a UML example: train on data, predict properties. </p>"},{"location":"how-to-guides/#working-example-from-start-to-finish","title":"Working example from start to finish","text":"<p>Pick a physical system (maybe a small molecule or simple crystal), perform structuring, run calculation, extract bands, compute phonons, etc. That will tie many features together for a demo.</p>"},{"location":"reference/","title":"References","text":"<p>Reference where <code>EStA</code> is used as well as the technical information references.</p> <ul> <li>Sonu Kumar, Karan Deep, Shagun Nag, Ranjan Kumar, \"Connecting dielectric response to dominant vibrations and tolerance factors in pyrochlore oxides\", Materials Today Communications, 38, 108415 (2024) link</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on examples usage of <code>EStA</code>.</p> <ul> <li> <p>read <code>xyz</code> file data.  <pre><code>#import esta.general.aadhaar as aadh  [this also works]\n#aad = aadh.Aadhaar()\n\nfrom esta import Xat # import Xat class\nXat.read_xyz(filename='x.xyz')\n</code></pre></p> </li> <li> <p>read <code>poscar</code> file data. <pre><code>import esta.vaspBag.inout.crystal_lattice as clatt\nxlatt = clatt.Crystal_Lattice(\"POSCAR\", ''./)\n# or xlatt=clatt.CrystalLattice()\nxlatt.read_poscar()\nprint('atomic positions: {}'.format(xlatt.tau_cartesian))\nprint('atomic positions in crystal coordinates: {}'.format(xlatt.tau_direct))\n\nxlatt.get_cell_matrix\n#array([[7.35205746, 0.        , 0.        ],\n#       [3.67602873, 6.36706853, 0.        ],\n#       [3.67602873, 2.12235618, 6.00292978]])\n\nxlatt.get_cell_vectors\n#(array([7.35205746, 0.        , 0.        ]),\n# array([3.67602873, 6.36706853, 0.        ]),\n# array([3.67602873, 2.12235618, 6.00292978]))\n\nxlatt.LV1\n#array([7.35205746, 0.        , 0.        ])\n\nxlatt.LV3\n#array([3.67602873, 2.12235618, 6.00292978])\n\nxlatt.real_volume\n#281.0034678144921 in A^3\n\n# print each atom type\nxlatt.get_each_atm_type\n#[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n\n# print no. of atoms of each type\nxlatt.get_natm_type\n#array([ 4,  4, 14])\n\n*Similary other method of the xlatt object can be excessed; currently all available methods are:*\n# 'atm_type', 'each_atm_type', 'filename', 'get_all_atoms_labels', 'get_atm_type', 'get_cell_matrix',\n# 'get_cell_vectors', 'get_dispPOSCAR', 'get_each_atm_type', 'get_grouped_list', 'get_natm_type',\n# 'get_neach_type', 'get_poscar', 'get_rVolume', 'get_reciprocal_lattice', 'get_selectivePOSCAR',\n# 'get_unique_list', 'is_cartesian', 'is_crystal', 'is_selective_dynamics', 'l_SelectDynamics',\n# 'l_crystal', 'location', 'natm_type', 'natoms', 'read_poscar', 'real_volume', 'reciprocal_lattice',\n# 'tau_cartesian', 'tau_cartestain', 'tau_direct', 'to_cartesian', 'to_crystal'\n</code></pre></p> </li> <li> <p>read POSCARs for reactants and products in a reaction and generate intermediate structures. <pre><code>import numpy as np\nfrom  esta.vaspBag.inout.crystal_lattice import CrystalLattice\nimport esta.general.get_configs as get_configs\n\noutput = CrystalLattice(filename = 'ach3oh_00_POSCAR', location = \"./\")\noutput.get_poscar()\natompositions = output.tau_cartesian\n\noutput2 = CrystalLattice(filename = 'cxyz_POSCAR', location = \"./\")\noutput2.get_poscar()\nposcar_obj2 = output2 #.get_poscar()\natompositions2 = output2.tau_cartesian\nN = 9\nconfigurations = get_configs.get_atomic_configurations(N, atompositions, atompositions2)\nprint(configurations[1])\n\nget_configs.get_poscar_images(N, poscar_obj, poscar_obj2)\n</code></pre></p> </li> <li> <p>substitution of atoms by other atom or gp of atoms. <pre><code>import glob\nimport esta.general.substitute_atom as substitute\n\natomid = 10\nxyzfile = 'path_0000.xyz'\nxyz_subs_file = 'methyl.xyz'  # taken from lib_xyz in esta\n\n# atomid = 62\n# xyzfile = 'de_SUB_path_all_all.xyz'\n# xyz_subs_file = 'H.xyz' \n\natom_id_subs = 1  #Generally.. C-atom Must be the first atom in the substituent \npart \n\nprint('list of files: {}'.format(xyzfile))\n\nsubstitute.substitute_atom_by_atoms(atomid=atomid, atom_id_subs=atom_id_subs,\\\nxyzfile=xyzfile, xyz_subs_file=xyz_subs_file)\n</code></pre></p> </li> <li> <p>rename_files_using_index_for_ANY (collection of xyz or poscar files).</p> </li> </ul> <pre><code>import glob\nimport esta.general.rename_general as rename\n\n#files = glob.glob(\"SUB_de_SUB*.xyz\")\nfiles = glob.glob(\"rlx*.xyz\")\n\n#----for keeping  part of the file-----for example: [0,-2] part is kept ; last part is removed\nfirst_index=False # if false mean 2nd index is also taken!\nstr_indx = [0,-2] #,[4,-2]] #  for first_index = False\n#str_indx = [[0,-2] ,[4,-2]] #  ALSO can be used**\n\n#----for removing begining part of the file-----for example: [0,3]; this part is removed; last is kept\n#first_index=True \n#str_indx = [0,3] #   for first index=True\n\n\nfor ifile in files:\n    print('ifile is: {}'.format(ifile))\n    rename.to_file_any(ifile, str_indx, first_indx_only=first_index, file_extension='xyz') #POSCAR' ) \n</code></pre> <ul> <li>create input files for the vasp calculations.</li> </ul> <pre><code>import esta.vaspBag.vaspin as vaspin\nvaspobj = vaspin.vasp()\nvaspobj.get_vasp_input(poscar_name='POSCAR')\n</code></pre> <ul> <li> <p>create qe input file for QE calculations with option 1* <pre><code>import glob\nimport esta.qeBag.gen_qeinput_advv as gen_qeinput\n\nps_info = ('pbesol', '_v1.*')\n\nposfiles=glob.glob('*POSCAR')\nfor ifile in posfiles:\n    gen_qeinput.get_qe_input(ifile, ps_info, lprint_cell ='angstrom',\\\n    cal_type='vc-relax', lcopy_pseudo=True, l_pseudo_GVRB=True)\n</code></pre></p> </li> <li> <p>generate displacements from atomic positions in the poscar for vibrational calculations.</p> </li> </ul> <pre><code>import numpy as np\nimport esta\nimport esta.phonon.atm_displacements_selective_general_disp  as atmdisp\n\nprint('generating postion* files for displacement of selected atoms')\nqe_part_file='qe_part'    #&lt;-------not need to get poscar file s........MAKE It better ....TODO\nposfile='fix_3_init_bi_POSCAR' #fix_rlx_3_4c_1_1e_POSCARPOSCAR'\ndelta_x = 0.02 # ang\natmdisp.gen_disp(posfile, qe_part_file, delta_x)\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"reference/vaspBag/","title":"vaspBag","text":""},{"location":"reference/vaspBag/#vaspBag","title":"<code>vaspBag</code>","text":""},{"location":"reference/vaspBag/add_vacuum_to_unit_cell/","title":"vaspBag.add_vacuum_to_unit_cell","text":""},{"location":"reference/vaspBag/add_vacuum_to_unit_cell/#vaspBag.add_vacuum_to_unit_cell","title":"<code>vaspBag.add_vacuum_to_unit_cell</code>","text":""},{"location":"reference/vaspBag/add_vacuum_to_unit_cell/#vaspBag.add_vacuum_to_unit_cell.add_vacuum","title":"<code>add_vacuum(LV1, LV2, LV3, vacuum)</code>","text":"<p>Add vacuum layer along LV3</p> <p>Parameters:</p> <p>LV1: array      lattice vec 1 LV2: array      lattice vec 2 LV3: array      lattice vec 3 vacuum: float     The thickness of the vacuum in Ang</p> <p>TODO: Note: </p> <pre><code> - in future LV1,LV2,LV3 may be taekn in the form of a cell matrix with each row representing LV1,\n   LV2, and LV3    \n - vacuum in all directions can be added ... just pass the axis(LV1..2..3)  in a loop to this method\n</code></pre>"},{"location":"reference/vaspBag/band_gap/","title":"vaspBag.band_gap","text":""},{"location":"reference/vaspBag/band_gap/#vaspBag.band_gap","title":"<code>vaspBag.band_gap</code>","text":"<p>Finding of:</p> <p>band gap from the OUTCAR file or EIGENVAL file   VBM or HOMO   CBM or LUMO   Fermi energy   no. of kpts   no. of bands   no. of electrons   spin polarised calculation or not?</p> <p>Note:</p> <p>**band gap nature: the kpoints corresponding to VBM and CBm are found</p> <p>WARNING: dealing with metallic cases -- experimental            Magnetic systems/SOC---todo</p> <pre><code>author: skumar\nemail: sonukumar.physics@gmail.com\n</code></pre>"},{"location":"reference/vaspBag/band_gap/#vaspBag.band_gap.find_VBMin_CBMax","title":"<code>find_VBMin_CBMax(ispin, nkpts, nbands, nelectron)</code>","text":"<p>find high occupied level = VBMax and find lowest unoccupied level = CBMin</p>"},{"location":"reference/vaspBag/inout/","title":"vaspBag.inout","text":""},{"location":"reference/vaspBag/inout/#vaspBag.inout","title":"<code>vaspBag.inout</code>","text":""},{"location":"reference/vaspBag/inout/cartesian2crystal/","title":"vaspBag.inout.cartesian2crystal","text":""},{"location":"reference/vaspBag/inout/cartesian2crystal/#vaspBag.inout.cartesian2crystal","title":"<code>vaspBag.inout.cartesian2crystal</code>","text":""},{"location":"reference/vaspBag/inout/crystal2cartesian/","title":"vaspBag.inout.crystal2cartesian","text":""},{"location":"reference/vaspBag/inout/crystal2cartesian/#vaspBag.inout.crystal2cartesian","title":"<code>vaspBag.inout.crystal2cartesian</code>","text":""},{"location":"reference/vaspBag/inout/crystal2cartesian/#vaspBag.inout.crystal2cartesian.crystal2cart","title":"<code>crystal2cart(filename=None)</code>","text":"<p>crystal to cartesian coordinate converion</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/","title":"vaspBag.inout.crystal_lattice","text":""},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice","title":"<code>vaspBag.inout.crystal_lattice</code>","text":""},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice","title":"<code>CrystalLattice</code>","text":"<p>Crystal lattice class to define lattice parameters and basis; crystal = lattice + basis (atoms or molecules )</p> <p>Author: Sonu Kumar Email: sonukumar.physics@gmail.com</p> <p>Date: April, 2017 updates:2019, 2020, 2022</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_atm_symbol","title":"<code>get_atm_symbol</code>  <code>property</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.to_cartesian","title":"<code>to_cartesian</code>  <code>property</code>","text":"<p>get atomic position in cartesin cooridnates</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.to_crystal","title":"<code>to_crystal</code>  <code>property</code>","text":"<p>get atomic position in crystal cooridnates</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.is_crystal","title":"<code>is_crystal</code>  <code>property</code>","text":"<p>check if atom positions in crytal coordinates</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.is_cartesian","title":"<code>is_cartesian</code>  <code>property</code>","text":"<p>check if atom positions in cartesian  coordinates</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_rVolume","title":"<code>get_rVolume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_volume","title":"<code>get_volume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_cell_vectors","title":"<code>get_cell_vectors</code>  <code>property</code>","text":"<p>geta tuple of set of three cell/lattice vectors lv1, lv2, and lv3 in c-style format</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_cell_matrix","title":"<code>get_cell_matrix</code>  <code>property</code>","text":"<p>get lattice matrix of three cell/lattice vectors lv1, lv2, and lv3 in c-style format or fortran stype format default is c style format.</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.is_selective_dynamics","title":"<code>is_selective_dynamics</code>  <code>property</code>","text":"<p>check whether selective dynamics True or False</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.read_poscar","title":"<code>read_poscar(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.read_poscar_adv","title":"<code>read_poscar_adv(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove, self.atomFixDir     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_poscar","title":"<code>get_poscar()</code>","text":"<p>XXXXXXXXXXXXXXXXXXXXXXXXXX---DEPRECATED-------DEPRECATED ------------------XXXXXXXXXXXXXXXXXXXXXX ** get_poscar is deprecated; use read_poscar instead!! ** read poscar file present in the current dir or in the location specified.</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_reciprocal_lattice","title":"<code>get_reciprocal_lattice()</code>","text":"<p>return the reciprocal lattice vectors       input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.reciprocal_lattice","title":"<code>reciprocal_lattice()</code>","text":"<p>deprecated: method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_all_atoms_labels","title":"<code>get_all_atoms_labels()</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p> Parameters: <pre><code>string: POSCAR file in current dir.\n</code></pre> Return: <pre><code>list : strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file\nscalar: total number of atoms in the POSCAR file\nlist:  integer numbers starting from 1 to ntotal for all atoms(e.g. 1 1 1 2 3 4 4 ..)\n</code></pre> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_selectivePOSCAR","title":"<code>get_selectivePOSCAR(ldisp=True, disp_atoms_num=None, outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings; e.g: [\"1-2\", '3']</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_selectivePOSCAR_adv","title":"<code>get_selectivePOSCAR_adv(ldisp=True, disp_atoms_num=None, fix_direction=None, outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings to be fixed during DFT relaxation; e.g: [\"1-2\", '3']</p> </li> <li> <code>fix_direction</code>           \u2013            <p>x, y, or z direciton; by default atoms are fixed in all directions</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/vaspBag/inout/crystal_lattice/#vaspBag.inout.crystal_lattice.CrystalLattice.get_dispPOSCAR","title":"<code>get_dispPOSCAR(ldisp=None, disp_atoms_num=None)</code>","text":"<p>deprecated: use get_selectivePOSCAR</p>"},{"location":"reference/vaspBag/inout/diameter_or_area_nanowire/","title":"vaspBag.inout.diameter_or_area_nanowire","text":""},{"location":"reference/vaspBag/inout/diameter_or_area_nanowire/#vaspBag.inout.diameter_or_area_nanowire","title":"<code>vaspBag.inout.diameter_or_area_nanowire</code>","text":"<p>Calculate the diametere or area/volume of a nanowire</p> <p>Parameters/Input: (string)  default string taken is \"POSCAR\"</p> <p>Returns/output: (float)  diameter</p>"},{"location":"reference/vaspBag/inout/get_labelling_atoms/","title":"vaspBag.inout.get_labelling_atoms","text":""},{"location":"reference/vaspBag/inout/get_labelling_atoms/#vaspBag.inout.get_labelling_atoms","title":"<code>vaspBag.inout.get_labelling_atoms</code>","text":""},{"location":"reference/vaspBag/inout/get_labelling_atoms/#vaspBag.inout.get_labelling_atoms.get_all_atoms_lebels","title":"<code>get_all_atoms_lebels(ffile)</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p>"},{"location":"reference/vaspBag/inout/get_labelling_atoms/#vaspBag.inout.get_labelling_atoms.get_all_atoms_lebels--parameters","title":"Parameters:","text":"<p>input: POSCAR file in current dir.</p> <p>output:      - list of strings of atomic lebels of all atoms according to the numbering of atoms in      POSCAR file     - integer for total number of atoms in the POSCAR file</p> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/vaspBag/inout/lattice/","title":"vaspBag.inout.lattice","text":""},{"location":"reference/vaspBag/inout/lattice/#vaspBag.inout.lattice","title":"<code>vaspBag.inout.lattice</code>","text":"<p>lattice class to define unit cell and lattice parameters</p>"},{"location":"reference/vaspBag/inout/old_reciprocal_lattice/","title":"vaspBag.inout.old_reciprocal_lattice","text":""},{"location":"reference/vaspBag/inout/old_reciprocal_lattice/#vaspBag.inout.old_reciprocal_lattice","title":"<code>vaspBag.inout.old_reciprocal_lattice</code>","text":"<p>method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/vaspBag/inout/old_reciprocal_lattice/#vaspBag.inout.old_reciprocal_lattice.reciprocal_lattice","title":"<code>reciprocal_lattice(LV1, LV2, LV3)</code>","text":"<p>input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/vaspBag/inout/read_eigenval/","title":"vaspBag.inout.read_eigenval","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval","title":"<code>vaspBag.inout.read_eigenval</code>","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval","title":"<code>read_eigenval()</code>","text":"<p>read EIGENVAL file and find the band gap and other required items ...</p> <p>format of eigenval file :</p>"},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--1-108-108-1-1","title":"1             108  108    1    1","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--2-05831055e02-01906800e-08-01906800e-08-02000000e-08-05000000e-15","title":"2              0.5831055E+02  0.1906800E-08  0.1906800E-08  0.2000000E-08  0.5000000E-15","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--3-1000000000000000e-004","title":"3              1.000000000000000E-004","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--4-car","title":"4              CAR","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--5-unknown-system","title":"5              unknown system","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--6-648-13-388","title":"6                648     13    388","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--7","title":"7","text":""},{"location":"reference/vaspBag/inout/read_eigenval/#vaspBag.inout.read_eigenval.read_eigenval--8-00000000e00-00000000e00-00000000e00-02777778e-01","title":"8              0.0000000E+00  0.0000000E+00  0.0000000E+00  0.2777778E-01","text":"<pre><code>            1      -16.615104   1.000000\n            2      -16.236469   1.000000\n            3      -16.236325   1.000000\n            4      -16.236284   1.000000\n         .\n         .\n         .\n         .\n</code></pre> <p>the numbers are 1) # of ions , # of ions, the number of loops after which the averaged pair correlation  functions and the DOS are written, ISPIN 2) the volume of the cell (in \u00c3\u2026^3) and the lattice parameters of the box (in m) 3) T 4) the string 'CAR' 5) the header 6) # of electrons, # of k-points, #of bands 7) the k-point and its weight</p> <p>NOTE:  what about magnetic systems or SOC calculations?</p>"},{"location":"reference/vaspBag/inout/read_eigenval_file/","title":"vaspBag.inout.read_eigenval_file","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file","title":"<code>vaspBag.inout.read_eigenval_file</code>","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval","title":"<code>read_eigenval()</code>","text":"<pre><code>read EIGENVAL file and find the band gap and other required items ...\n</code></pre> <p>format of eigenval file :</p>"},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--1-108-108-1-1","title":"1             108  108    1    1","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--2-05831055e02-01906800e-08-01906800e-08-02000000e-08-05000000e-15","title":"2              0.5831055E+02  0.1906800E-08  0.1906800E-08  0.2000000E-08  0.5000000E-15","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--3-1000000000000000e-004","title":"3              1.000000000000000E-004","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--4-car","title":"4              CAR","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--5-unknown-system","title":"5              unknown system","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--6-648-13-388","title":"6                648     13    388","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--7","title":"7","text":""},{"location":"reference/vaspBag/inout/read_eigenval_file/#vaspBag.inout.read_eigenval_file.read_eigenval--8-00000000e00-00000000e00-00000000e00-02777778e-01","title":"8              0.0000000E+00  0.0000000E+00  0.0000000E+00  0.2777778E-01","text":"<pre><code>            1      -16.615104   1.000000\n            2      -16.236469   1.000000\n            3      -16.236325   1.000000\n            4      -16.236284   1.000000\n         .\n         .\n         .\n         .\n</code></pre> <p>the numbers are 1) # of ions , # of ions, the number of loops after which the averaged pair correlation  functions and the DOS are written, ISPIN 2) the volume of the cell (in \u00c3\u2026^3) and the lattice parameters of the box (in m) 3) T 4) the string 'CAR' 5) the header 6) # of electrons, # of k-points, #of bands 7) the k-point and its weight</p> <p>NOTE:  what about magnetic systems or SOC calculations?</p>"},{"location":"reference/vaspBag/inout/read_outcar/","title":"vaspBag.inout.read_outcar","text":""},{"location":"reference/vaspBag/inout/read_outcar/#vaspBag.inout.read_outcar","title":"<code>vaspBag.inout.read_outcar</code>","text":""},{"location":"reference/vaspBag/inout/read_outcar/#vaspBag.inout.read_outcar.read_outcar","title":"<code>read_outcar()</code>","text":"<p>read outcar file</p>"},{"location":"reference/vaspBag/inout/read_outcar_file/","title":"vaspBag.inout.read_outcar_file","text":""},{"location":"reference/vaspBag/inout/read_outcar_file/#vaspBag.inout.read_outcar_file","title":"<code>vaspBag.inout.read_outcar_file</code>","text":""},{"location":"reference/vaspBag/inout/read_outcar_file/#vaspBag.inout.read_outcar_file.read_outcar","title":"<code>read_outcar()</code>","text":"<p>read outcar file</p>"},{"location":"reference/vaspBag/inout/read_poscar/","title":"vaspBag.inout.read_poscar","text":""},{"location":"reference/vaspBag/inout/read_poscar/#vaspBag.inout.read_poscar","title":"<code>vaspBag.inout.read_poscar</code>","text":"<p>routine to read POSCAR file (VASP)</p> <p>Input: default POSCAR file is taken from current dir.</p> <p>Returns:      if selective dynamics:          return tau_cartesian, real_volume, LV1, LV2, LV3, atomFix, atomMove      else:          return tau_cartesian, real_volume, LV1, LV2, LV3</p> <p>Note:         modification done to coordinates if -ve by more than 1. unit of          angstrom: see if there is a better way to handle it</p>"},{"location":"reference/vaspBag/inout/read_poscar/#vaspBag.inout.read_poscar.get_poscar","title":"<code>get_poscar(location)</code>","text":"<p>method to read poscar file</p> <p>Input: location of \"POSCAR\" file</p> <p>returns:  if selective dynamics:           return tau_cartesian, real_volume, LV1, LV2, LV3, atm_type, natom_type, natoms, atomFix, atomMove  else:      return tau_cartesian, real_volume, LV1, LV2, LV3, atm_type, natom_type, natoms</p>"},{"location":"reference/vaspBag/inout/reciprocal_lattice/","title":"vaspBag.inout.reciprocal_lattice","text":""},{"location":"reference/vaspBag/inout/reciprocal_lattice/#vaspBag.inout.reciprocal_lattice","title":"<code>vaspBag.inout.reciprocal_lattice</code>","text":"<p>method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/vaspBag/inout/reciprocal_lattice/#vaspBag.inout.reciprocal_lattice.reciprocal_lattice","title":"<code>reciprocal_lattice(LV1, LV2, LV3)</code>","text":"<p>input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/vaspBag/inout/shift_to_origin/","title":"vaspBag.inout.shift_to_origin","text":""},{"location":"reference/vaspBag/inout/shift_to_origin/#vaspBag.inout.shift_to_origin","title":"<code>vaspBag.inout.shift_to_origin</code>","text":""},{"location":"reference/vaspBag/inout/xml_vasp/","title":"vaspBag.inout.xml_vasp","text":""},{"location":"reference/vaspBag/inout/xml_vasp/#vaspBag.inout.xml_vasp","title":"<code>vaspBag.inout.xml_vasp</code>","text":""},{"location":"reference/vaspBag/inout/xml_vasp/#vaspBag.inout.xml_vasp.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/","title":"vaspBag.inout.xml_vasp_ASE","text":""},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE","title":"<code>vaspBag.inout.xml_vasp_ASE</code>","text":"<p>This module contains functionality for reading and writing an ASE Atoms object in VASP POSCAR format.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.get_atomtypes","title":"<code>get_atomtypes(fname)</code>","text":"<p>Given a file name, get the atomic symbols.</p> <p>The function can get this information from OUTCAR and POTCAR format files.  The files can also be compressed with gzip or bzip2.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.atomtypes_outpot","title":"<code>atomtypes_outpot(posfname, numsyms)</code>","text":"<p>Try to retreive chemical symbols from OUTCAR or POTCAR</p> <p>If getting atomtypes from the first line in POSCAR/CONTCAR fails, it might be possible to find the data in OUTCAR or POTCAR, if these files exist.</p> <p>posfname -- The filename of the POSCAR/CONTCAR file we're trying to read</p> <p>numsyms -- The number of symbols we must find</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.get_atomtypes_from_formula","title":"<code>get_atomtypes_from_formula(formula)</code>","text":"<p>Return atom types from chemical formula (optionally prepended with and underscore).</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.read_vasp","title":"<code>read_vasp(filename='CONTCAR')</code>","text":"<p>Import POSCAR/CONTCAR type file.</p> <p>Reads unitcell, atom positions and constraints from the POSCAR/CONTCAR file and tries to read atom types from POSCAR/CONTCAR header, if this fails the atom types are read from OUTCAR or POTCAR file.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.read_vasp_out","title":"<code>read_vasp_out(filename='OUTCAR', index=-1)</code>","text":"<p>Import OUTCAR type file.</p> <p>Reads unitcell, atom positions, energies, and forces from the OUTCAR file and attempts to read constraints (if any) from CONTCAR/POSCAR, if present.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.read_vasp_xdatcar","title":"<code>read_vasp_xdatcar(filename, index=-1)</code>","text":"<p>Import XDATCAR file</p> <p>Reads all positions from the XDATCAR and returns a list of Atoms objects.  Useful for viewing optimizations runs from VASP5.x</p> <p>Constraints ARE NOT stored in the XDATCAR, and as such, Atoms objects retrieved from the XDATCAR will not have constraints set.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file.</p> <p>Reads unit cell, atom positions, energies, forces, and constraints from vasprun.xml file</p>"},{"location":"reference/vaspBag/inout/xml_vasp_ASE/#vaspBag.inout.xml_vasp_ASE.write_vasp","title":"<code>write_vasp(filename, atoms, label='', direct=False, sort=None, symbol_count=None, long_format=True, vasp5=False)</code>","text":"<p>Method to write VASP position (POSCAR/CONTCAR) files.</p> <p>Writes label, scalefactor, unitcell, # of various kinds of atoms, positions in cartesian or scaled coordinates (Direct), and constraints to file. Cartesian coordiantes is default and default label is the atomic species, e.g. 'C N H Cu'.</p>"},{"location":"reference/vaspBag/inout/xml_vasp_adv/","title":"vaspBag.inout.xml_vasp_adv","text":""},{"location":"reference/vaspBag/inout/xml_vasp_adv/#vaspBag.inout.xml_vasp_adv","title":"<code>vaspBag.inout.xml_vasp_adv</code>","text":""},{"location":"reference/vaspBag/inout/xml_vasp_adv/#vaspBag.inout.xml_vasp_adv.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/vaspBag/inout/xml_vasp_hse/","title":"vaspBag.inout.xml_vasp_hse","text":""},{"location":"reference/vaspBag/inout/xml_vasp_hse/#vaspBag.inout.xml_vasp_hse","title":"<code>vaspBag.inout.xml_vasp_hse</code>","text":""},{"location":"reference/vaspBag/inout/xml_vasp_hse/#vaspBag.inout.xml_vasp_hse.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/vaspBag/postproc/","title":"vaspBag.postproc","text":""},{"location":"reference/vaspBag/postproc/#vaspBag.postproc","title":"<code>vaspBag.postproc</code>","text":""},{"location":"reference/vaspBag/postproc/band_gap/","title":"vaspBag.postproc.band_gap","text":""},{"location":"reference/vaspBag/postproc/band_gap/#vaspBag.postproc.band_gap","title":"<code>vaspBag.postproc.band_gap</code>","text":"<p>Finding of:</p> <p>band gap from the OUTCAR file or EIGENVAL file   VBM or HOMO   CBM or LUMO   Fermi energy   no. of kpts   no. of bands   no. of electrons   spin polarised calculation or not?</p> <p>Note:</p> <p>**band gap nature: the kpoints corresponding to VBM and CBm are found</p> <p>Date: March 2018, By S.K.   Date: modified - May-June 2018, By S.K.</p> <p>WARNING: dealing with metallic cases -- experimental            Magnetic systems/SOC---todo</p>"},{"location":"reference/vaspBag/postproc/band_gap/#vaspBag.postproc.band_gap.find_VBMin_CBMax","title":"<code>find_VBMin_CBMax(ispin, nkpts, nbands, nelectron)</code>","text":"<p>find high occupied level = VBMax and find lowest unoccupied level = CBMin</p>"},{"location":"reference/vaspBag/postproc/planarAverage/","title":"vaspBag.postproc.planarAverage","text":""},{"location":"reference/vaspBag/postproc/planarAverage/#vaspBag.postproc.planarAverage","title":"<code>vaspBag.postproc.planarAverage</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/grid_data_reading/","title":"vaspBag.postproc.planarAverage.grid_data_reading","text":""},{"location":"reference/vaspBag/postproc/planarAverage/grid_data_reading/#vaspBag.postproc.planarAverage.grid_data_reading","title":"<code>vaspBag.postproc.planarAverage.grid_data_reading</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/grid_data_reading_/","title":"vaspBag.postproc.planarAverage.grid_data_reading_","text":""},{"location":"reference/vaspBag/postproc/planarAverage/grid_data_reading_/#vaspBag.postproc.planarAverage.grid_data_reading_","title":"<code>vaspBag.postproc.planarAverage.grid_data_reading_</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/grid_data_reading_/#vaspBag.postproc.planarAverage.grid_data_reading_.grid_data_read","title":"<code>grid_data_read(file_location_with_name)</code>","text":"<p>data reading over a 3D/2D/1D grid in the format of CHGCAR/CHG file of vasp</p> <p>See the CHG/CHGCAR file in the current directory</p> <p>FORMAT: example of BiCuTeo------------------------------------------------------------------</p> <p>BiCuTeO    1.00000000000000      4.057950    0.000000    0.000000      0.000000    4.057950    0.000000      0.000000    0.000000    9.661035    Bi   Cu   Te   O      2     2     2     2 Direct   0.250000  0.250000  0.126886   0.750000  0.750000  0.873114   0.750000  0.250000  0.500000   0.250000  0.750000  0.500000   0.250000  0.250000  0.679141   0.750000  0.750000  0.320859   0.750000  0.250000  0.000000   0.250000  0.750000  0.000000</p> <p>56   56  140  0.18889588828E+02 0.19217555305E+02 0.20196742255E+02 0.21814902925E+02 0.24044802646E+02  0.26841815535E+02 0.30131018674E+02 0.33805578097E+02 0.37709638956E+02 0.41646119069E+02  0.45387137320E+02 0.48665992089E+02 0.51228125474E+02 0.52861127779E+02 0.53422658702E+02</p> 0.52861133231E+02 0.51228136024E+02 0.48666007074E+02 0.45387155865E+02 0.41646140190E+02 <p>date: May 2018</p>"},{"location":"reference/vaspBag/postproc/planarAverage/input_data/","title":"vaspBag.postproc.planarAverage.input_data","text":""},{"location":"reference/vaspBag/postproc/planarAverage/input_data/#vaspBag.postproc.planarAverage.input_data","title":"<code>vaspBag.postproc.planarAverage.input_data</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/","title":"vaspBag.postproc.planarAverage.isosurface","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/#vaspBag.postproc.planarAverage.isosurface","title":"<code>vaspBag.postproc.planarAverage.isosurface</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/atoms/","title":"vaspBag.postproc.planarAverage.isosurface.atoms","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/atoms/#vaspBag.postproc.planarAverage.isosurface.atoms","title":"<code>vaspBag.postproc.planarAverage.isosurface.atoms</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/isosurface/","title":"vaspBag.postproc.planarAverage.isosurface.isosurface","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/isosurface/#vaspBag.postproc.planarAverage.isosurface.isosurface","title":"<code>vaspBag.postproc.planarAverage.isosurface.isosurface</code>","text":"<p>reading CHGCAR file to plot the isosurface of charge density</p>"},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/isosurface_/","title":"vaspBag.postproc.planarAverage.isosurface.isosurface_","text":""},{"location":"reference/vaspBag/postproc/planarAverage/isosurface/isosurface_/#vaspBag.postproc.planarAverage.isosurface.isosurface_","title":"<code>vaspBag.postproc.planarAverage.isosurface.isosurface_</code>","text":"<p>reading CHGCAR file to plot the isosurface of charge density</p>"},{"location":"reference/vaspBag/postproc/planarAverage/planar_average/","title":"vaspBag.postproc.planarAverage.planar_average","text":""},{"location":"reference/vaspBag/postproc/planarAverage/planar_average/#vaspBag.postproc.planarAverage.planar_average","title":"<code>vaspBag.postproc.planarAverage.planar_average</code>","text":"<p>Planar average of 3D function</p>"},{"location":"reference/vaspBag/postproc/planarAverage/planar_average/#vaspBag.postproc.planarAverage.planar_average.planar_average","title":"<code>planar_average(func3D, nx, ny, nz, direction)</code>","text":"<p>planar average along direction given by the direction string</p>"},{"location":"reference/vaspBag/postproc/planarAverage/planar_average_/","title":"vaspBag.postproc.planarAverage.planar_average_","text":""},{"location":"reference/vaspBag/postproc/planarAverage/planar_average_/#vaspBag.postproc.planarAverage.planar_average_","title":"<code>vaspBag.postproc.planarAverage.planar_average_</code>","text":"<p>Planar average of 3D function</p>"},{"location":"reference/vaspBag/postproc/planarAverage/planar_average_/#vaspBag.postproc.planarAverage.planar_average_.planar_average_3D","title":"<code>planar_average_3D(filename, data_array, A1, A2, A3, indx_direction)</code>","text":"<p>Args:      filename: from which to read chargefile/potfile/or 3D function     data_array: input 3D data      A1,A2,A3: input lattice vectors</p>"},{"location":"reference/vaspBag/postproc/planarAverage/test_planar_average_new/","title":"vaspBag.postproc.planarAverage.test_planar_average_new","text":""},{"location":"reference/vaspBag/postproc/planarAverage/test_planar_average_new/#vaspBag.postproc.planarAverage.test_planar_average_new","title":"<code>vaspBag.postproc.planarAverage.test_planar_average_new</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/","title":"vaspBag.postproc.planarAverage.v0point4_stable","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/#vaspBag.postproc.planarAverage.v0point4_stable","title":"<code>vaspBag.postproc.planarAverage.v0point4_stable</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/grid_data_reading/","title":"vaspBag.postproc.planarAverage.v0point4_stable.grid_data_reading","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/grid_data_reading/#vaspBag.postproc.planarAverage.v0point4_stable.grid_data_reading","title":"<code>vaspBag.postproc.planarAverage.v0point4_stable.grid_data_reading</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/input_data/","title":"vaspBag.postproc.planarAverage.v0point4_stable.input_data","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/input_data/#vaspBag.postproc.planarAverage.v0point4_stable.input_data","title":"<code>vaspBag.postproc.planarAverage.v0point4_stable.input_data</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/planar_average/","title":"vaspBag.postproc.planarAverage.v0point4_stable.planar_average","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/planar_average/#vaspBag.postproc.planarAverage.v0point4_stable.planar_average","title":"<code>vaspBag.postproc.planarAverage.v0point4_stable.planar_average</code>","text":"<p>Planar average of 3D function</p>"},{"location":"reference/vaspBag/postproc/planarAverage/v0point4_stable/planar_average/#vaspBag.postproc.planarAverage.v0point4_stable.planar_average.planar_average","title":"<code>planar_average(func3D, nx, ny, nz, direction)</code>","text":"<p>planar average along direction given by the direction string</p>"},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/","title":"vaspBag.postproc.planarAverage.v0point6_this","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/#vaspBag.postproc.planarAverage.v0point6_this","title":"<code>vaspBag.postproc.planarAverage.v0point6_this</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/grid_data_reading/","title":"vaspBag.postproc.planarAverage.v0point6_this.grid_data_reading","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/grid_data_reading/#vaspBag.postproc.planarAverage.v0point6_this.grid_data_reading","title":"<code>vaspBag.postproc.planarAverage.v0point6_this.grid_data_reading</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/input_data/","title":"vaspBag.postproc.planarAverage.v0point6_this.input_data","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/input_data/#vaspBag.postproc.planarAverage.v0point6_this.input_data","title":"<code>vaspBag.postproc.planarAverage.v0point6_this.input_data</code>","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/planar_average/","title":"vaspBag.postproc.planarAverage.v0point6_this.planar_average","text":""},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/planar_average/#vaspBag.postproc.planarAverage.v0point6_this.planar_average","title":"<code>vaspBag.postproc.planarAverage.v0point6_this.planar_average</code>","text":"<p>Planar average of 3D function</p>"},{"location":"reference/vaspBag/postproc/planarAverage/v0point6_this/planar_average/#vaspBag.postproc.planarAverage.v0point6_this.planar_average.planar_average","title":"<code>planar_average(func3D, nx, ny, nz, direction)</code>","text":"<p>planar average along direction given by the direction string</p>"},{"location":"reference/vaspBag/rotateAxisUnitCell/","title":"vaspBag.rotateAxisUnitCell","text":""},{"location":"reference/vaspBag/rotateAxisUnitCell/#vaspBag.rotateAxisUnitCell","title":"<code>vaspBag.rotateAxisUnitCell</code>","text":""},{"location":"reference/vaspBag/rotateAxisUnitCell/rotate_axis/","title":"vaspBag.rotateAxisUnitCell.rotate_axis","text":""},{"location":"reference/vaspBag/rotateAxisUnitCell/rotate_axis/#vaspBag.rotateAxisUnitCell.rotate_axis","title":"<code>vaspBag.rotateAxisUnitCell.rotate_axis</code>","text":"<p>rotate axis of the unit cell</p> <p>for example: abc \u2192 bca etc.</p> <p>Given: unit cell: lattice parameters and atomic positions       i.e. POSCAR given.</p>"},{"location":"reference/vaspBag/vaspin/","title":"vaspBag.vaspin","text":""},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin","title":"<code>vaspBag.vaspin</code>","text":"<p>vasp class to create INCAR, KPOINTS, POTCAR (if potentials are available) for  a given POSCAR file in a new directory.</p>"},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin.vasp","title":"<code>vasp</code>","text":"<p>get INCAR, KPOINTS, POTCAR_* files for a given POSCAR file</p>"},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin.vasp.get_kpoints_file","title":"<code>get_kpoints_file(poscar_name=None, kgrid=None, centering=None)</code>","text":"Parameters: <pre><code>poscar file name\nkgrid list\ncentering (Gamma or MP)\n</code></pre> <p>..note: shift is by default is 0 0 0</p>"},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin.vasp.get_kgrid","title":"<code>get_kgrid(poscar_name)</code>","text":"<p>using  def get_N1_N2_N3_in_MP_grid(posfile = None, location = None, l_metal_insulator = None         return int(N1), int(N2), int(N3) from qeBag</p>"},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin.vasp.get_POTCAR","title":"<code>get_POTCAR()</code>","text":"<p>copy the POTCAR for each element by reading the element  information from poscar </p> <p>Note: location of POTCAR files for PBE functional are MUST</p> <p>.. note::     try this from Kitchin site: </p> <pre><code>-----&gt;\nif fname is None:\n    fname = os.path.join(self.directory, 'POTCAR')\n\nwith open(fname, 'wb') as potfile:\n     for _, pfile, _ in self.ppp_list:\n        pfile = os.path.join(os.environ['VASP_PP_PATH'], pfile)\n        with open(pfile) as f:\n            potfile.write(f.read())\n-----&gt;\n</code></pre>"},{"location":"reference/vaspBag/vaspin/#vaspBag.vaspin.vasp.get_incar_file","title":"<code>get_incar_file(poscar_name=None)</code>","text":"<p>get INCAR file from poscar with automatic finding of KE cutoff  by parsing POTCAR files</p>"},{"location":"reference/esta/","title":"esta","text":""},{"location":"reference/esta/#esta","title":"<code>esta</code>","text":"<p>EStA (electronic structure analyzer) aka pytware for analyzing and calculating the electronic structure of molecules and materials.</p> <p>.. note::     More to implement... such as TB models, transport related problems etc.      Some keywords are: lattice thermal transport in with and without defects;    electronic structure TB calculations; heterogeneous catalysis</p> <p>.. image:: /home/sonu/ipython_exercises/setpy_creation/esta-2.6.1/logo/esta_logo2.6.0_cropped.png    :width: 100    :height: 100    :alt: The EStA logo.</p> <ul> <li>copyright \u00a9 sonukumar 2017-2023</li> <li>email: sonukumar.physics@gmail.com</li> </ul>"},{"location":"reference/esta/#esta.CrystalLattice","title":"<code>CrystalLattice</code>","text":"<p>Crystal lattice class to define lattice parameters and basis; crystal = lattice + basis (atoms or molecules )</p> <p>Author: Sonu Kumar Email: sonukumar.physics@gmail.com</p> <p>Date: April, 2017 updates:2019, 2020, 2022</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_atm_symbol","title":"<code>get_atm_symbol</code>  <code>property</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms</p>"},{"location":"reference/esta/#esta.CrystalLattice.to_cartesian","title":"<code>to_cartesian</code>  <code>property</code>","text":"<p>get atomic position in cartesin cooridnates</p>"},{"location":"reference/esta/#esta.CrystalLattice.to_crystal","title":"<code>to_crystal</code>  <code>property</code>","text":"<p>get atomic position in crystal cooridnates</p>"},{"location":"reference/esta/#esta.CrystalLattice.is_crystal","title":"<code>is_crystal</code>  <code>property</code>","text":"<p>check if atom positions in crytal coordinates</p>"},{"location":"reference/esta/#esta.CrystalLattice.is_cartesian","title":"<code>is_cartesian</code>  <code>property</code>","text":"<p>check if atom positions in cartesian  coordinates</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_rVolume","title":"<code>get_rVolume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_volume","title":"<code>get_volume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_cell_vectors","title":"<code>get_cell_vectors</code>  <code>property</code>","text":"<p>geta tuple of set of three cell/lattice vectors lv1, lv2, and lv3 in c-style format</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_cell_matrix","title":"<code>get_cell_matrix</code>  <code>property</code>","text":"<p>get lattice matrix of three cell/lattice vectors lv1, lv2, and lv3 in c-style format or fortran stype format default is c style format.</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/#esta.CrystalLattice.is_selective_dynamics","title":"<code>is_selective_dynamics</code>  <code>property</code>","text":"<p>check whether selective dynamics True or False</p>"},{"location":"reference/esta/#esta.CrystalLattice.read_poscar","title":"<code>read_poscar(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/#esta.CrystalLattice.read_poscar_adv","title":"<code>read_poscar_adv(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove, self.atomFixDir     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_poscar","title":"<code>get_poscar()</code>","text":"<p>XXXXXXXXXXXXXXXXXXXXXXXXXX---DEPRECATED-------DEPRECATED ------------------XXXXXXXXXXXXXXXXXXXXXX ** get_poscar is deprecated; use read_poscar instead!! ** read poscar file present in the current dir or in the location specified.</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_reciprocal_lattice","title":"<code>get_reciprocal_lattice()</code>","text":"<p>return the reciprocal lattice vectors       input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/#esta.CrystalLattice.reciprocal_lattice","title":"<code>reciprocal_lattice()</code>","text":"<p>deprecated: method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_all_atoms_labels","title":"<code>get_all_atoms_labels()</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p> Parameters: <pre><code>string: POSCAR file in current dir.\n</code></pre> Return: <pre><code>list : strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file\nscalar: total number of atoms in the POSCAR file\nlist:  integer numbers starting from 1 to ntotal for all atoms(e.g. 1 1 1 2 3 4 4 ..)\n</code></pre> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/#esta.CrystalLattice.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/#esta.CrystalLattice.get_selectivePOSCAR","title":"<code>get_selectivePOSCAR(ldisp=True, disp_atoms_num=None, outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings; e.g: [\"1-2\", '3']</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.CrystalLattice.get_selectivePOSCAR_adv","title":"<code>get_selectivePOSCAR_adv(ldisp=True, disp_atoms_num=None, fix_direction=None, coord='cartesian', outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings to be fixed during DFT relaxation; e.g: [\"1-2\", '3']</p> </li> <li> <code>fix_direction</code>           \u2013            <p>x, y, or z direciton; by default atoms are fixed in all directions</p> </li> <li> <code>coord</code>           \u2013            <p>cartesian or direct coordinates; default: cartesian</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.CrystalLattice.get_dispPOSCAR","title":"<code>get_dispPOSCAR(ldisp=None, disp_atoms_num=None)</code>","text":"<p>deprecated: use get_selectivePOSCAR</p>"},{"location":"reference/esta/#esta.Xlat","title":"<code>Xlat</code>","text":"<p>Crystal lattice class to define lattice parameters and basis; crystal = lattice + basis (atoms or molecules )</p> <p>Author: Sonu Kumar Email: sonukumar.physics@gmail.com</p> <p>Date: April, 2017 updates:2019, 2020, 2022</p>"},{"location":"reference/esta/#esta.Xlat.get_atm_symbol","title":"<code>get_atm_symbol</code>  <code>property</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms</p>"},{"location":"reference/esta/#esta.Xlat.to_cartesian","title":"<code>to_cartesian</code>  <code>property</code>","text":"<p>get atomic position in cartesin cooridnates</p>"},{"location":"reference/esta/#esta.Xlat.to_crystal","title":"<code>to_crystal</code>  <code>property</code>","text":"<p>get atomic position in crystal cooridnates</p>"},{"location":"reference/esta/#esta.Xlat.is_crystal","title":"<code>is_crystal</code>  <code>property</code>","text":"<p>check if atom positions in crytal coordinates</p>"},{"location":"reference/esta/#esta.Xlat.is_cartesian","title":"<code>is_cartesian</code>  <code>property</code>","text":"<p>check if atom positions in cartesian  coordinates</p>"},{"location":"reference/esta/#esta.Xlat.get_rVolume","title":"<code>get_rVolume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/#esta.Xlat.get_volume","title":"<code>get_volume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/#esta.Xlat.get_cell_vectors","title":"<code>get_cell_vectors</code>  <code>property</code>","text":"<p>geta tuple of set of three cell/lattice vectors lv1, lv2, and lv3 in c-style format</p>"},{"location":"reference/esta/#esta.Xlat.get_cell_matrix","title":"<code>get_cell_matrix</code>  <code>property</code>","text":"<p>get lattice matrix of three cell/lattice vectors lv1, lv2, and lv3 in c-style format or fortran stype format default is c style format.</p>"},{"location":"reference/esta/#esta.Xlat.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/#esta.Xlat.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/#esta.Xlat.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/#esta.Xlat.is_selective_dynamics","title":"<code>is_selective_dynamics</code>  <code>property</code>","text":"<p>check whether selective dynamics True or False</p>"},{"location":"reference/esta/#esta.Xlat.read_poscar","title":"<code>read_poscar(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/#esta.Xlat.read_poscar_adv","title":"<code>read_poscar_adv(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove, self.atomFixDir     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/#esta.Xlat.get_poscar","title":"<code>get_poscar()</code>","text":"<p>XXXXXXXXXXXXXXXXXXXXXXXXXX---DEPRECATED-------DEPRECATED ------------------XXXXXXXXXXXXXXXXXXXXXX ** get_poscar is deprecated; use read_poscar instead!! ** read poscar file present in the current dir or in the location specified.</p>"},{"location":"reference/esta/#esta.Xlat.get_reciprocal_lattice","title":"<code>get_reciprocal_lattice()</code>","text":"<p>return the reciprocal lattice vectors       input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/#esta.Xlat.reciprocal_lattice","title":"<code>reciprocal_lattice()</code>","text":"<p>deprecated: method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/#esta.Xlat.get_all_atoms_labels","title":"<code>get_all_atoms_labels()</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p> Parameters: <pre><code>string: POSCAR file in current dir.\n</code></pre> Return: <pre><code>list : strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file\nscalar: total number of atoms in the POSCAR file\nlist:  integer numbers starting from 1 to ntotal for all atoms(e.g. 1 1 1 2 3 4 4 ..)\n</code></pre> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/#esta.Xlat.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/#esta.Xlat.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/#esta.Xlat.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/#esta.Xlat.get_selectivePOSCAR","title":"<code>get_selectivePOSCAR(ldisp=True, disp_atoms_num=None, outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings; e.g: [\"1-2\", '3']</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xlat.get_selectivePOSCAR_adv","title":"<code>get_selectivePOSCAR_adv(ldisp=True, disp_atoms_num=None, fix_direction=None, coord='cartesian', outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings to be fixed during DFT relaxation; e.g: [\"1-2\", '3']</p> </li> <li> <code>fix_direction</code>           \u2013            <p>x, y, or z direciton; by default atoms are fixed in all directions</p> </li> <li> <code>coord</code>           \u2013            <p>cartesian or direct coordinates; default: cartesian</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xlat.get_dispPOSCAR","title":"<code>get_dispPOSCAR(ldisp=None, disp_atoms_num=None)</code>","text":"<p>deprecated: use get_selectivePOSCAR</p>"},{"location":"reference/esta/#esta.Aadhaar","title":"<code>Aadhaar</code>","text":"<p>aadhaar class for atomic structure related information handling.</p>"},{"location":"reference/esta/#esta.Aadhaar.natom","title":"<code>natom</code>  <code>property</code>","text":"<p>get no. of atoms</p>"},{"location":"reference/esta/#esta.Aadhaar.atm_position","title":"<code>atm_position</code>  <code>property</code>","text":"<p>get atom positions</p>"},{"location":"reference/esta/#esta.Aadhaar.atm_symbol","title":"<code>atm_symbol</code>  <code>property</code>","text":"<p>get atom symbols</p>"},{"location":"reference/esta/#esta.Aadhaar.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/#esta.Aadhaar.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/#esta.Aadhaar.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/#esta.Aadhaar.__init__","title":"<code>__init__()</code>","text":"<p>initialize the class</p>"},{"location":"reference/esta/#esta.Aadhaar.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.get_fix_atom","title":"<code>get_fix_atom(fix=None)</code>","text":"<p>return the fix atoms  with starting from 0; on input fix contains numbering starting from 1</p>"},{"location":"reference/esta/#esta.Aadhaar.xyz_as_pdf","title":"<code>xyz_as_pdf()</code>","text":"<p>get xyz data in the panda  data frame with first line  for tags for atoms, and coordinates</p>"},{"location":"reference/esta/#esta.Aadhaar.xyz_as_csv","title":"<code>xyz_as_csv(csvfile=None, savefile=None)</code>","text":"<p>get xyz data in the csv data format</p>"},{"location":"reference/esta/#esta.Aadhaar.xyz_as_csv--not-this-with-first-line-as-comment-atom-symbtag-and-x-yz","title":"..not this ...with    first line as comment (atom symbTag, and x, y,z)","text":""},{"location":"reference/esta/#esta.Aadhaar.read_xyz_tagged","title":"<code>read_xyz_tagged(xyzfile)</code>","text":"<p>read xyz file with some positions tagged as Fixed by placing <code>F</code>  in the 4<sup>th</sup> column of the xyz file</p> Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.read_xyz_all","title":"<code>read_xyz_all(xyzfile)</code>","text":"<p>read xyz data in get all xyz file by reading the atomic positions and atomic labels. </p> Parameters <p>string: str     name of xyz file containgin many xyz data structures</p> <p>Returns:</p> <ul> <li> <code>array</code> (              <code>array of rank 3 with shape (nstrs, natoms, 3)</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>list</code> (              <code>a list of strings </code> )          \u2013            <p>strings/symbols for the  atomic labels</p> </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.write_xyz_all_separate","title":"<code>write_xyz_all_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Aadhaar.get_poscar","title":"<code>get_poscar(cell_parameter, pos, label, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions, and atom labels.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.get_poscar_selective","title":"<code>get_poscar_selective(cell_parameter, pos, label, fix_tag=None, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions,  atom labels, and fix_tag.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>fix_tag</code>           \u2013            <p>list of list containgin tag for atom fixing, e.g [['F','F','F'], ['T','T','T'], .... to natoms]</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.get_xyz_file","title":"<code>get_xyz_file(atomic_position, atomic_label, fix_index=None, fix_dir=None, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels.</p> Parameters <p>atomic_position: array of rank 2 or shape of (natoms, 3)     atomic positions with shape (natoms, 3) atomic_label: str list     list of atomic labels fix_index: list  (optional)     list of atoms to be fixed with numbering from 1; e.g. ['1','2','10']     (The resulting xyz file contains F or T for after the      x y z coordinates in the same line) fix_dir : list (optional) [TODO .... this is not working properly if it not None ... testing needed .... see ]     direction of fix, e.g. xyz (all directions if used for the time being) name_outfile: str, optional     prefix for the output file</p>"},{"location":"reference/esta/#esta.Aadhaar.get_xyz_o","title":"<code>get_xyz_o(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file given the  atomic positions and atomic labels and energies.</p> Note <p>xyz_o with o means single file </p> <p>energy and comment are independent of each other NOW!</p>"},{"location":"reference/esta/#esta.Aadhaar.get_xyz_grouped","title":"<code>get_xyz_grouped(atomic_position, atomic_label, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels. name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are grouped together.</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_separate","title":"<code>get_all_xyz_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels.</p> <p>name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are NOT grouped together.</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_in_a_file_","title":"<code>get_all_xyz_in_a_file_(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies. comment True then energy is printed in comment section. .. note::     The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_in_a_file__","title":"<code>get_all_xyz_in_a_file__(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None, **extra)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies.</p> <p>If comment is True then energy must be present!! **kwargs are added so as to pass addition arguments!!</p> <p>.. note::  The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024  The dictionary extra keyword must be \"no.\", otherwise error message is emitted</p>"},{"location":"reference/esta/#esta.Aadhaar.get_axsf","title":"<code>get_axsf(position, symbol, lv, eigen_disp=None, factor=None, name_outfile=None)</code>","text":"<p>get axsf file given xyz data (or xyz file or POSCAR file) and displacements of displaced-atoms/moving atoms</p> Parameters: <p>xyzobject</p> <p>lv: array      lattice vectors matrix lv[3,3] with rows as lattice vectors (c-style,  opposite to Fortran-style)</p> <p>eigen_disp: array     eigen displacements vectors of shape (3*natom, natom,3)     (note sometimes all atoms are displaced and sometimes only few are displace)</p> Returns: <p>axsf file for viewing with xcryden</p> <p>.. format of axsf file</p> <p>ANIMSTEPS  2 CRYSTAL PRIMVEC 20.1192283600  0.0000000000  0.0000000000 0.0000000000 27.0000000000  0.0000000000 0.0000000000  0.0000000000 17.0000000000 PRIMCOORD   1 5  1 H   11.2498769970   13.8121424280    4.3686516620   -0.0000942577   -0.0000152115    0.0005174206 H   12.5137322430   15.0793556060    1.8688610990    0.0003968067   -0.0001103587   -0.0009433925 H   13.2963873660   13.8030528830    2.8291899960    0.0000467070    0.0000647718   -0.0006208035 H   14.1576884440   15.3238761340    2.5101912960    0.0001419676   -0.0000543467   -0.0006737093 H   13.6497403220   14.1378762940    5.3369092520   -0.0004499922   -0.0000278449    0.0006083637 PRIMCOORD   2 5  1 H   11.2355725044   13.5305891253    4.3477591403    0.0001368359   -0.0000037193    0.0015032442 H   12.3273729886   14.6920409122    1.7133173515    0.0002135816    0.0000056774   -0.0003496343 H   13.2074926046   13.5157335368    2.7144034122    0.0002043936   -0.0001109390   -0.0004939726 H   13.9830728189   15.0490029986    2.2619945638    0.0001662968   -0.0000176645   -0.0002263822 H   13.6135087175   14.0164433539    5.2070257688   -0.0003970061    0.0001379729    0.0006418720</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_in_eqlist_format","title":"<code>get_all_xyz_in_eqlist_format(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   energy, spin, zpe,  and normal mode eigenvalues are made zero in utput in *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Aadhaar.get_all_xyz_in_eqlist_format_adv","title":"<code>get_all_xyz_in_eqlist_format_adv(atomic_position, atomic_label, energy, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   spin, zpe,  and normal mode eigenvalues are made zero in outout *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Aadhaar.get_xyz_frozen","title":"<code>get_xyz_frozen(frozen_tuple, not_frozan_tuple, name_outfile=None)</code>","text":"<p>get xyz data with frozan and not frozen atoms in the output file. </p> <p>Parameters:</p> <ul> <li> <code>frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>name of xyz_frozen_file : str </code>           \u2013            <p>create 'xyz_FROZEN' type file containing information of frozen and not frozen atoms etc</p> </li> </ul>"},{"location":"reference/esta/#esta.Aadhaar.get_xyz_oniom_file","title":"<code>get_xyz_oniom_file(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3   more to do later!!</p>"},{"location":"reference/esta/#esta.Aadhaar.get_com_oniom","title":"<code>get_com_oniom(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile, kwargss, l_oniom_gaussian=None)</code>","text":"<p>input oniom file generation</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> Note <p>move these methods to grrmBag for clarity   </p> Note <p>update 2024: now gaussian:ONIOM+PM6 type file for GRRM can be genereated/ but remove the lines afer option part and add one line space in end of  *com file</p>"},{"location":"reference/esta/#esta.Aadhaar.get_com_oniom_min","title":"<code>get_com_oniom_min(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>input oniom file for MIN calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Aadhaar.get_com_oniom_restruct","title":"<code>get_com_oniom_restruct(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_infile=None, name_outfile=None, **kwargs)</code>","text":"<p>input oniom for ReStruct calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Aadhaar.get_com_oniom_frozen","title":"<code>get_com_oniom_frozen(frozen_tuple, not_frozan_tuple, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>create oniom input file with frozen atoms for MIN calculations (default)</p> <p>The high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Aadhaar.get_fix_indices","title":"<code>get_fix_indices(ref_atm_id=None, direction=None, distance=None, exclude_type=None)</code>","text":"<p>return atom indices with are to be fixed </p> <p>ref_atm_id MUST be included in the fix indices.</p> Parametes <p>ref_atm_id: int     reference atom wrt to which atoms are to be selected direction: str     direction alogn which atoms are to be selected distance: float     distance range along the <code>direction</code>. For example, if it is <code>yz</code>, then      some distance along y and z direction is selected (all vals of x allowed) to      select the atoms exclude_type: list of str     atom symbols to be excluded from the selection</p> <p>Returns:</p> <ul> <li> <code>close_atoms_</code> (              <code>list of atoms indices</code> )          \u2013            <p>list of all atoms close to ref atom along a direction</p> </li> </ul> Note <pre><code>ref_atm_id = 54\ndirection = 'y'\ndistance= 1 # ang (+1 and -1 Ang along y direction)\nexclude_type = None # type of atoms to exclude; eg. ['B', 'H'] 2 types of atoms\n</code></pre>"},{"location":"reference/esta/#esta.Xyz","title":"<code>Xyz</code>","text":"<p>aadhaar class for atomic structure related information handling.</p>"},{"location":"reference/esta/#esta.Xyz.natom","title":"<code>natom</code>  <code>property</code>","text":"<p>get no. of atoms</p>"},{"location":"reference/esta/#esta.Xyz.atm_position","title":"<code>atm_position</code>  <code>property</code>","text":"<p>get atom positions</p>"},{"location":"reference/esta/#esta.Xyz.atm_symbol","title":"<code>atm_symbol</code>  <code>property</code>","text":"<p>get atom symbols</p>"},{"location":"reference/esta/#esta.Xyz.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/#esta.Xyz.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/#esta.Xyz.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/#esta.Xyz.__init__","title":"<code>__init__()</code>","text":"<p>initialize the class</p>"},{"location":"reference/esta/#esta.Xyz.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Xyz.get_fix_atom","title":"<code>get_fix_atom(fix=None)</code>","text":"<p>return the fix atoms  with starting from 0; on input fix contains numbering starting from 1</p>"},{"location":"reference/esta/#esta.Xyz.xyz_as_pdf","title":"<code>xyz_as_pdf()</code>","text":"<p>get xyz data in the panda  data frame with first line  for tags for atoms, and coordinates</p>"},{"location":"reference/esta/#esta.Xyz.xyz_as_csv","title":"<code>xyz_as_csv(csvfile=None, savefile=None)</code>","text":"<p>get xyz data in the csv data format</p>"},{"location":"reference/esta/#esta.Xyz.xyz_as_csv--not-this-with-first-line-as-comment-atom-symbtag-and-x-yz","title":"..not this ...with    first line as comment (atom symbTag, and x, y,z)","text":""},{"location":"reference/esta/#esta.Xyz.read_xyz_tagged","title":"<code>read_xyz_tagged(xyzfile)</code>","text":"<p>read xyz file with some positions tagged as Fixed by placing <code>F</code>  in the 4<sup>th</sup> column of the xyz file</p> Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Xyz.read_xyz_all","title":"<code>read_xyz_all(xyzfile)</code>","text":"<p>read xyz data in get all xyz file by reading the atomic positions and atomic labels. </p> Parameters <p>string: str     name of xyz file containgin many xyz data structures</p> <p>Returns:</p> <ul> <li> <code>array</code> (              <code>array of rank 3 with shape (nstrs, natoms, 3)</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>list</code> (              <code>a list of strings </code> )          \u2013            <p>strings/symbols for the  atomic labels</p> </li> </ul>"},{"location":"reference/esta/#esta.Xyz.write_xyz_all_separate","title":"<code>write_xyz_all_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Xyz.get_poscar","title":"<code>get_poscar(cell_parameter, pos, label, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions, and atom labels.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xyz.get_poscar_selective","title":"<code>get_poscar_selective(cell_parameter, pos, label, fix_tag=None, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions,  atom labels, and fix_tag.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>fix_tag</code>           \u2013            <p>list of list containgin tag for atom fixing, e.g [['F','F','F'], ['T','T','T'], .... to natoms]</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xyz.get_xyz_file","title":"<code>get_xyz_file(atomic_position, atomic_label, fix_index=None, fix_dir=None, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels.</p> Parameters <p>atomic_position: array of rank 2 or shape of (natoms, 3)     atomic positions with shape (natoms, 3) atomic_label: str list     list of atomic labels fix_index: list  (optional)     list of atoms to be fixed with numbering from 1; e.g. ['1','2','10']     (The resulting xyz file contains F or T for after the      x y z coordinates in the same line) fix_dir : list (optional) [TODO .... this is not working properly if it not None ... testing needed .... see ]     direction of fix, e.g. xyz (all directions if used for the time being) name_outfile: str, optional     prefix for the output file</p>"},{"location":"reference/esta/#esta.Xyz.get_xyz_o","title":"<code>get_xyz_o(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file given the  atomic positions and atomic labels and energies.</p> Note <p>xyz_o with o means single file </p> <p>energy and comment are independent of each other NOW!</p>"},{"location":"reference/esta/#esta.Xyz.get_xyz_grouped","title":"<code>get_xyz_grouped(atomic_position, atomic_label, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels. name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are grouped together.</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_separate","title":"<code>get_all_xyz_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels.</p> <p>name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are NOT grouped together.</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_in_a_file_","title":"<code>get_all_xyz_in_a_file_(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies. comment True then energy is printed in comment section. .. note::     The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_in_a_file__","title":"<code>get_all_xyz_in_a_file__(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None, **extra)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies.</p> <p>If comment is True then energy must be present!! **kwargs are added so as to pass addition arguments!!</p> <p>.. note::  The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024  The dictionary extra keyword must be \"no.\", otherwise error message is emitted</p>"},{"location":"reference/esta/#esta.Xyz.get_axsf","title":"<code>get_axsf(position, symbol, lv, eigen_disp=None, factor=None, name_outfile=None)</code>","text":"<p>get axsf file given xyz data (or xyz file or POSCAR file) and displacements of displaced-atoms/moving atoms</p> Parameters: <p>xyzobject</p> <p>lv: array      lattice vectors matrix lv[3,3] with rows as lattice vectors (c-style,  opposite to Fortran-style)</p> <p>eigen_disp: array     eigen displacements vectors of shape (3*natom, natom,3)     (note sometimes all atoms are displaced and sometimes only few are displace)</p> Returns: <p>axsf file for viewing with xcryden</p> <p>.. format of axsf file</p> <p>ANIMSTEPS  2 CRYSTAL PRIMVEC 20.1192283600  0.0000000000  0.0000000000 0.0000000000 27.0000000000  0.0000000000 0.0000000000  0.0000000000 17.0000000000 PRIMCOORD   1 5  1 H   11.2498769970   13.8121424280    4.3686516620   -0.0000942577   -0.0000152115    0.0005174206 H   12.5137322430   15.0793556060    1.8688610990    0.0003968067   -0.0001103587   -0.0009433925 H   13.2963873660   13.8030528830    2.8291899960    0.0000467070    0.0000647718   -0.0006208035 H   14.1576884440   15.3238761340    2.5101912960    0.0001419676   -0.0000543467   -0.0006737093 H   13.6497403220   14.1378762940    5.3369092520   -0.0004499922   -0.0000278449    0.0006083637 PRIMCOORD   2 5  1 H   11.2355725044   13.5305891253    4.3477591403    0.0001368359   -0.0000037193    0.0015032442 H   12.3273729886   14.6920409122    1.7133173515    0.0002135816    0.0000056774   -0.0003496343 H   13.2074926046   13.5157335368    2.7144034122    0.0002043936   -0.0001109390   -0.0004939726 H   13.9830728189   15.0490029986    2.2619945638    0.0001662968   -0.0000176645   -0.0002263822 H   13.6135087175   14.0164433539    5.2070257688   -0.0003970061    0.0001379729    0.0006418720</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_in_eqlist_format","title":"<code>get_all_xyz_in_eqlist_format(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   energy, spin, zpe,  and normal mode eigenvalues are made zero in utput in *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Xyz.get_all_xyz_in_eqlist_format_adv","title":"<code>get_all_xyz_in_eqlist_format_adv(atomic_position, atomic_label, energy, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   spin, zpe,  and normal mode eigenvalues are made zero in outout *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Xyz.get_xyz_frozen","title":"<code>get_xyz_frozen(frozen_tuple, not_frozan_tuple, name_outfile=None)</code>","text":"<p>get xyz data with frozan and not frozen atoms in the output file. </p> <p>Parameters:</p> <ul> <li> <code>frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>name of xyz_frozen_file : str </code>           \u2013            <p>create 'xyz_FROZEN' type file containing information of frozen and not frozen atoms etc</p> </li> </ul>"},{"location":"reference/esta/#esta.Xyz.get_xyz_oniom_file","title":"<code>get_xyz_oniom_file(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3   more to do later!!</p>"},{"location":"reference/esta/#esta.Xyz.get_com_oniom","title":"<code>get_com_oniom(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile, kwargss, l_oniom_gaussian=None)</code>","text":"<p>input oniom file generation</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> Note <p>move these methods to grrmBag for clarity   </p> Note <p>update 2024: now gaussian:ONIOM+PM6 type file for GRRM can be genereated/ but remove the lines afer option part and add one line space in end of  *com file</p>"},{"location":"reference/esta/#esta.Xyz.get_com_oniom_min","title":"<code>get_com_oniom_min(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>input oniom file for MIN calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xyz.get_com_oniom_restruct","title":"<code>get_com_oniom_restruct(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_infile=None, name_outfile=None, **kwargs)</code>","text":"<p>input oniom for ReStruct calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xyz.get_com_oniom_frozen","title":"<code>get_com_oniom_frozen(frozen_tuple, not_frozan_tuple, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>create oniom input file with frozen atoms for MIN calculations (default)</p> <p>The high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xyz.get_fix_indices","title":"<code>get_fix_indices(ref_atm_id=None, direction=None, distance=None, exclude_type=None)</code>","text":"<p>return atom indices with are to be fixed </p> <p>ref_atm_id MUST be included in the fix indices.</p> Parametes <p>ref_atm_id: int     reference atom wrt to which atoms are to be selected direction: str     direction alogn which atoms are to be selected distance: float     distance range along the <code>direction</code>. For example, if it is <code>yz</code>, then      some distance along y and z direction is selected (all vals of x allowed) to      select the atoms exclude_type: list of str     atom symbols to be excluded from the selection</p> <p>Returns:</p> <ul> <li> <code>close_atoms_</code> (              <code>list of atoms indices</code> )          \u2013            <p>list of all atoms close to ref atom along a direction</p> </li> </ul> Note <pre><code>ref_atm_id = 54\ndirection = 'y'\ndistance= 1 # ang (+1 and -1 Ang along y direction)\nexclude_type = None # type of atoms to exclude; eg. ['B', 'H'] 2 types of atoms\n</code></pre>"},{"location":"reference/esta/#esta.Xat","title":"<code>Xat</code>","text":"<p>aadhaar class for atomic structure related information handling.</p>"},{"location":"reference/esta/#esta.Xat.natom","title":"<code>natom</code>  <code>property</code>","text":"<p>get no. of atoms</p>"},{"location":"reference/esta/#esta.Xat.atm_position","title":"<code>atm_position</code>  <code>property</code>","text":"<p>get atom positions</p>"},{"location":"reference/esta/#esta.Xat.atm_symbol","title":"<code>atm_symbol</code>  <code>property</code>","text":"<p>get atom symbols</p>"},{"location":"reference/esta/#esta.Xat.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/#esta.Xat.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/#esta.Xat.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/#esta.Xat.__init__","title":"<code>__init__()</code>","text":"<p>initialize the class</p>"},{"location":"reference/esta/#esta.Xat.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Xat.get_fix_atom","title":"<code>get_fix_atom(fix=None)</code>","text":"<p>return the fix atoms  with starting from 0; on input fix contains numbering starting from 1</p>"},{"location":"reference/esta/#esta.Xat.xyz_as_pdf","title":"<code>xyz_as_pdf()</code>","text":"<p>get xyz data in the panda  data frame with first line  for tags for atoms, and coordinates</p>"},{"location":"reference/esta/#esta.Xat.xyz_as_csv","title":"<code>xyz_as_csv(csvfile=None, savefile=None)</code>","text":"<p>get xyz data in the csv data format</p>"},{"location":"reference/esta/#esta.Xat.xyz_as_csv--not-this-with-first-line-as-comment-atom-symbtag-and-x-yz","title":"..not this ...with    first line as comment (atom symbTag, and x, y,z)","text":""},{"location":"reference/esta/#esta.Xat.read_xyz_tagged","title":"<code>read_xyz_tagged(xyzfile)</code>","text":"<p>read xyz file with some positions tagged as Fixed by placing <code>F</code>  in the 4<sup>th</sup> column of the xyz file</p> Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/#esta.Xat.read_xyz_all","title":"<code>read_xyz_all(xyzfile)</code>","text":"<p>read xyz data in get all xyz file by reading the atomic positions and atomic labels. </p> Parameters <p>string: str     name of xyz file containgin many xyz data structures</p> <p>Returns:</p> <ul> <li> <code>array</code> (              <code>array of rank 3 with shape (nstrs, natoms, 3)</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>list</code> (              <code>a list of strings </code> )          \u2013            <p>strings/symbols for the  atomic labels</p> </li> </ul>"},{"location":"reference/esta/#esta.Xat.write_xyz_all_separate","title":"<code>write_xyz_all_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Xat.get_poscar","title":"<code>get_poscar(cell_parameter, pos, label, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions, and atom labels.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xat.get_poscar_selective","title":"<code>get_poscar_selective(cell_parameter, pos, label, fix_tag=None, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions,  atom labels, and fix_tag.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>fix_tag</code>           \u2013            <p>list of list containgin tag for atom fixing, e.g [['F','F','F'], ['T','T','T'], .... to natoms]</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.Xat.get_xyz_file","title":"<code>get_xyz_file(atomic_position, atomic_label, fix_index=None, fix_dir=None, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels.</p> Parameters <p>atomic_position: array of rank 2 or shape of (natoms, 3)     atomic positions with shape (natoms, 3) atomic_label: str list     list of atomic labels fix_index: list  (optional)     list of atoms to be fixed with numbering from 1; e.g. ['1','2','10']     (The resulting xyz file contains F or T for after the      x y z coordinates in the same line) fix_dir : list (optional) [TODO .... this is not working properly if it not None ... testing needed .... see ]     direction of fix, e.g. xyz (all directions if used for the time being) name_outfile: str, optional     prefix for the output file</p>"},{"location":"reference/esta/#esta.Xat.get_xyz_o","title":"<code>get_xyz_o(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file given the  atomic positions and atomic labels and energies.</p> Note <p>xyz_o with o means single file </p> <p>energy and comment are independent of each other NOW!</p>"},{"location":"reference/esta/#esta.Xat.get_xyz_grouped","title":"<code>get_xyz_grouped(atomic_position, atomic_label, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels. name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are grouped together.</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_separate","title":"<code>get_all_xyz_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels.</p> <p>name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are NOT grouped together.</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_in_a_file_","title":"<code>get_all_xyz_in_a_file_(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies. comment True then energy is printed in comment section. .. note::     The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_in_a_file__","title":"<code>get_all_xyz_in_a_file__(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None, **extra)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies.</p> <p>If comment is True then energy must be present!! **kwargs are added so as to pass addition arguments!!</p> <p>.. note::  The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024  The dictionary extra keyword must be \"no.\", otherwise error message is emitted</p>"},{"location":"reference/esta/#esta.Xat.get_axsf","title":"<code>get_axsf(position, symbol, lv, eigen_disp=None, factor=None, name_outfile=None)</code>","text":"<p>get axsf file given xyz data (or xyz file or POSCAR file) and displacements of displaced-atoms/moving atoms</p> Parameters: <p>xyzobject</p> <p>lv: array      lattice vectors matrix lv[3,3] with rows as lattice vectors (c-style,  opposite to Fortran-style)</p> <p>eigen_disp: array     eigen displacements vectors of shape (3*natom, natom,3)     (note sometimes all atoms are displaced and sometimes only few are displace)</p> Returns: <p>axsf file for viewing with xcryden</p> <p>.. format of axsf file</p> <p>ANIMSTEPS  2 CRYSTAL PRIMVEC 20.1192283600  0.0000000000  0.0000000000 0.0000000000 27.0000000000  0.0000000000 0.0000000000  0.0000000000 17.0000000000 PRIMCOORD   1 5  1 H   11.2498769970   13.8121424280    4.3686516620   -0.0000942577   -0.0000152115    0.0005174206 H   12.5137322430   15.0793556060    1.8688610990    0.0003968067   -0.0001103587   -0.0009433925 H   13.2963873660   13.8030528830    2.8291899960    0.0000467070    0.0000647718   -0.0006208035 H   14.1576884440   15.3238761340    2.5101912960    0.0001419676   -0.0000543467   -0.0006737093 H   13.6497403220   14.1378762940    5.3369092520   -0.0004499922   -0.0000278449    0.0006083637 PRIMCOORD   2 5  1 H   11.2355725044   13.5305891253    4.3477591403    0.0001368359   -0.0000037193    0.0015032442 H   12.3273729886   14.6920409122    1.7133173515    0.0002135816    0.0000056774   -0.0003496343 H   13.2074926046   13.5157335368    2.7144034122    0.0002043936   -0.0001109390   -0.0004939726 H   13.9830728189   15.0490029986    2.2619945638    0.0001662968   -0.0000176645   -0.0002263822 H   13.6135087175   14.0164433539    5.2070257688   -0.0003970061    0.0001379729    0.0006418720</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_in_eqlist_format","title":"<code>get_all_xyz_in_eqlist_format(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   energy, spin, zpe,  and normal mode eigenvalues are made zero in utput in *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Xat.get_all_xyz_in_eqlist_format_adv","title":"<code>get_all_xyz_in_eqlist_format_adv(atomic_position, atomic_label, energy, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   spin, zpe,  and normal mode eigenvalues are made zero in outout *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/#esta.Xat.get_xyz_frozen","title":"<code>get_xyz_frozen(frozen_tuple, not_frozan_tuple, name_outfile=None)</code>","text":"<p>get xyz data with frozan and not frozen atoms in the output file. </p> <p>Parameters:</p> <ul> <li> <code>frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>name of xyz_frozen_file : str </code>           \u2013            <p>create 'xyz_FROZEN' type file containing information of frozen and not frozen atoms etc</p> </li> </ul>"},{"location":"reference/esta/#esta.Xat.get_xyz_oniom_file","title":"<code>get_xyz_oniom_file(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3   more to do later!!</p>"},{"location":"reference/esta/#esta.Xat.get_com_oniom","title":"<code>get_com_oniom(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile, kwargss, l_oniom_gaussian=None)</code>","text":"<p>input oniom file generation</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> Note <p>move these methods to grrmBag for clarity   </p> Note <p>update 2024: now gaussian:ONIOM+PM6 type file for GRRM can be genereated/ but remove the lines afer option part and add one line space in end of  *com file</p>"},{"location":"reference/esta/#esta.Xat.get_com_oniom_min","title":"<code>get_com_oniom_min(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>input oniom file for MIN calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xat.get_com_oniom_restruct","title":"<code>get_com_oniom_restruct(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_infile=None, name_outfile=None, **kwargs)</code>","text":"<p>input oniom for ReStruct calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xat.get_com_oniom_frozen","title":"<code>get_com_oniom_frozen(frozen_tuple, not_frozan_tuple, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>create oniom input file with frozen atoms for MIN calculations (default)</p> <p>The high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/#esta.Xat.get_fix_indices","title":"<code>get_fix_indices(ref_atm_id=None, direction=None, distance=None, exclude_type=None)</code>","text":"<p>return atom indices with are to be fixed </p> <p>ref_atm_id MUST be included in the fix indices.</p> Parametes <p>ref_atm_id: int     reference atom wrt to which atoms are to be selected direction: str     direction alogn which atoms are to be selected distance: float     distance range along the <code>direction</code>. For example, if it is <code>yz</code>, then      some distance along y and z direction is selected (all vals of x allowed) to      select the atoms exclude_type: list of str     atom symbols to be excluded from the selection</p> <p>Returns:</p> <ul> <li> <code>close_atoms_</code> (              <code>list of atoms indices</code> )          \u2013            <p>list of all atoms close to ref atom along a direction</p> </li> </ul> Note <pre><code>ref_atm_id = 54\ndirection = 'y'\ndistance= 1 # ang (+1 and -1 Ang along y direction)\nexclude_type = None # type of atoms to exclude; eg. ['B', 'H'] 2 types of atoms\n</code></pre>"},{"location":"reference/esta/#esta.XTB","title":"<code>XTB</code>","text":"<p>               Bases: <code>GenericFileIOCalculator</code></p> <p>xTB calculator</p>"},{"location":"reference/esta/#esta.XTB.__init__","title":"<code>__init__(profile: XTBProfile | None = None, directory: Path | str = '.', method: Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff'] = 'gfn2-xtb', charge: int = 0, uhf: int = 0, spinpol: bool | None = None, **kwargs) -&gt; None</code>","text":"<p>Initialize the xTB calculator.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>XTBProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated xtb_ase.calculator.XTBProfile object to use.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the xTB calculation in.</p> </li> <li> <code>method</code>               (<code>Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff']</code>, default:                   <code>'gfn2-xtb'</code> )           \u2013            <p>The xTB method to use. Case-insensitive.</p> </li> <li> <code>charge</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The net charge of the system.</p> </li> <li> <code>uhf</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of unpaired electrons in the system.</p> </li> <li> <code>spinpol</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to use spin-polarized xTB. If None, <code>spinpol</code> will be automatically set to True if <code>uhf</code> &gt; 0.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional xTB parameters to be written out to a detailed input file, e.g. in the format of <code>scc={\"temp\": 500}</code>. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.XTBProfile","title":"<code>XTBProfile</code>","text":"<p>xTB profile</p>"},{"location":"reference/esta/#esta.XTBProfile.__init__","title":"<code>__init__(argv: list[str] | None = None) -&gt; None</code>","text":"<p>Initialize the xTB profile.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The command line arguments to the xTB executable, e.g. <code>[\"xtb\", \"--tblite\"]</code>. Do not specify an input file, i.e. --input (-I), or the geometry file, as these will be automatically added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/#esta.XTBProfile.run","title":"<code>run(directory: Path | str, input_filename: str, geom_filename: str, output_filename: str) -&gt; None</code>","text":"<p>Run the xTB calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The directory where the calculation will be run.</p> </li> <li> <code>input_filename</code>               (<code>str</code>)           \u2013            <p>The name of the input file present in the directory.</p> </li> <li> <code>geom_filename</code>               (<code>str</code>)           \u2013            <p>The name of the coordinates file present in the directory.</p> </li> <li> <code>output_filename</code>               (<code>str</code>)           \u2013            <p>The name of the log file to write to in the directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/abinitBag/","title":"esta.abinitBag","text":""},{"location":"reference/esta/abinitBag/#esta.abinitBag","title":"<code>esta.abinitBag</code>","text":""},{"location":"reference/esta/aide/","title":"esta.aide","text":""},{"location":"reference/esta/aide/#esta.aide","title":"<code>esta.aide</code>","text":""},{"location":"reference/esta/aide/check_float/","title":"esta.aide.check_float","text":""},{"location":"reference/esta/aide/check_float/#esta.aide.check_float","title":"<code>esta.aide.check_float</code>","text":""},{"location":"reference/esta/aide/combined_excel/","title":"esta.aide.combined_excel","text":""},{"location":"reference/esta/aide/combined_excel/#esta.aide.combined_excel","title":"<code>esta.aide.combined_excel</code>","text":""},{"location":"reference/esta/aide/combined_excel/#esta.aide.combined_excel.get_xlsx_single","title":"<code>get_xlsx_single(fname_out_excel=None, fnames_excel=None)</code>","text":"<p>get merged excel file from many excel, xlsx files</p>"},{"location":"reference/esta/aide/combined_excel/#esta.aide.combined_excel.get_xlsx_with_many_sheets","title":"<code>get_xlsx_with_many_sheets(fname_out_excel=None, fnames_excel=None)</code>","text":"<p>get merged excel file from many excel, xlsx files with many excel sheets</p>"},{"location":"reference/esta/aide/dat2xls_n_csv/","title":"esta.aide.dat2xls_n_csv","text":""},{"location":"reference/esta/aide/dat2xls_n_csv/#esta.aide.dat2xls_n_csv","title":"<code>esta.aide.dat2xls_n_csv</code>","text":""},{"location":"reference/esta/aide/dat2xls_n_csv/#esta.aide.dat2xls_n_csv.dat2xlsx_csv","title":"<code>dat2xlsx_csv(dat_file, x_name=None, y_name=None, outfile_prefix=None)</code>","text":"<p>read data file (x: filenames and y: energies values in data file) save to xls format or csv format In general any data file with 2 columns (first is string values in columns and other having float values)</p>"},{"location":"reference/esta/aide/dict_to_xlsx/","title":"esta.aide.dict_to_xlsx","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx","title":"<code>esta.aide.dict_to_xlsx</code>","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx","title":"<code>dict_to_xlsx(dictt, exclfile=None)</code>","text":"<p>save dictt to xlsx  here first dictt is change panda dataframe and then to excel.</p> <p>Here is the example to with dict input to pandas DataFrame</p>"},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--creating-the-dataframe","title":"creating the dataframe","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--df-pddataframename-anurag-manjeet-shubham","title":"df = pd.DataFrame({\"Name\": ['Anurag', 'Manjeet', 'Shubham',","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--saurabh-ujjawal","title":"'Saurabh', 'Ujjawal'],","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--address-patna-delhi-coimbatore","title":"\"Address\": ['Patna', 'Delhi', 'Coimbatore',","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--greater-noida-patna","title":"'Greater noida', 'Patna'],","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--id-20123-20124-20145-20146-20147","title":"\"ID\": [20123, 20124, 20145, 20146, 20147],","text":""},{"location":"reference/esta/aide/dict_to_xlsx/#esta.aide.dict_to_xlsx.dict_to_xlsx--sell-140000-300000-600000-200000-600000","title":"\"Sell\": [140000, 300000, 600000, 200000, 600000]})","text":""},{"location":"reference/esta/aide/dict_to_xlsx_csv/","title":"esta.aide.dict_to_xlsx_csv","text":""},{"location":"reference/esta/aide/dict_to_xlsx_csv/#esta.aide.dict_to_xlsx_csv","title":"<code>esta.aide.dict_to_xlsx_csv</code>","text":""},{"location":"reference/esta/aide/dict_to_xlsx_csv/#esta.aide.dict_to_xlsx_csv.get_xlsx_csv_file","title":"<code>get_xlsx_csv_file(data_list)</code>","text":"<p>save data in xlsx and scv file from the input list of dictionaries  containing data for each gaussian input file/ or similar files</p> <p>Returns:</p> <ul> <li> <code>    save data in the xlsx or csv format in file output.xlsx or output.csv</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <p>the input is list of dictionaries of equal number of eneteris</p> </li> </ul>"},{"location":"reference/esta/aide/dict_to_yaml/","title":"esta.aide.dict_to_yaml","text":""},{"location":"reference/esta/aide/dict_to_yaml/#esta.aide.dict_to_yaml","title":"<code>esta.aide.dict_to_yaml</code>","text":""},{"location":"reference/esta/aide/dict_to_yaml/#esta.aide.dict_to_yaml.dict_to_yaml","title":"<code>dict_to_yaml(dictt)</code>","text":"<p>convert dict data to yaml data</p>"},{"location":"reference/esta/aide/get_cid/","title":"esta.aide.get_cid","text":""},{"location":"reference/esta/aide/get_cid/#esta.aide.get_cid","title":"<code>esta.aide.get_cid</code>","text":""},{"location":"reference/esta/aide/get_cid/#esta.aide.get_cid.generate_custom_id","title":"<code>generate_custom_id()</code>","text":"<p>generate unique name derived from time and random charactors</p>"},{"location":"reference/esta/aide/get_docx/","title":"esta.aide.get_docx","text":""},{"location":"reference/esta/aide/get_docx/#esta.aide.get_docx","title":"<code>esta.aide.get_docx</code>","text":""},{"location":"reference/esta/aide/get_docx/#esta.aide.get_docx.to_docx","title":"<code>to_docx(lines, filename)</code>","text":"<p>write to docx file the data line in a single line</p>"},{"location":"reference/esta/aide/get_match_count/","title":"esta.aide.get_match_count","text":""},{"location":"reference/esta/aide/get_match_count/#esta.aide.get_match_count","title":"<code>esta.aide.get_match_count</code>","text":"<p>read a file to get the counts of a matching string</p>"},{"location":"reference/esta/aide/get_match_count/#esta.aide.get_match_count.get_mcount","title":"<code>get_mcount(fname=None, match=None) -&gt; int</code>","text":"<p>Parameters:</p> <ul> <li> <code>fname</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the file</p> </li> <li> <code>match</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>string to be found/match</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    returns the counts of the matched string</code>           \u2013            </li> </ul>"},{"location":"reference/esta/aide/interval2Range/","title":"esta.aide.interval2Range","text":""},{"location":"reference/esta/aide/interval2Range/#esta.aide.interval2Range","title":"<code>esta.aide.interval2Range</code>","text":""},{"location":"reference/esta/aide/interval2Range/#esta.aide.interval2Range.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings(in earlier versons..now integers))</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/aide/interval2Range_adv/","title":"esta.aide.interval2Range_adv","text":""},{"location":"reference/esta/aide/interval2Range_adv/#esta.aide.interval2Range_adv","title":"<code>esta.aide.interval2Range_adv</code>","text":""},{"location":"reference/esta/aide/interval2Range_adv/#esta.aide.interval2Range_adv.get_range","title":"<code>get_range(list_of_intervals)</code>","text":"<p>get range of integers from intervals (note: earlier versions, output  was in the form of strings).</p> Parameters: <pre><code>list of intervals: e.g. [1,'2-4','6-10','12'] \nnote that elements of list are strings. BUT, list of integers also possible; eg. [1,2,3,4].\n</code></pre> Returns: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/aide/interval2Range_adv/#esta.aide.interval2Range_adv.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings(in earlier versons..now integers))</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/aide/interval2Range_adv/#esta.aide.interval2Range_adv.get_intv","title":"<code>get_intv(list_of_range)</code>","text":"<p>get intervals from the list of ranges </p> Parameters: <pre><code>range of intervals: e.g. [1, 2, 3, 4,    6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre> Returns: <pre><code>list of ranges: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings.\n</code></pre>"},{"location":"reference/esta/aide/list_of_dict_to_xlsx_csv/","title":"esta.aide.list_of_dict_to_xlsx_csv","text":""},{"location":"reference/esta/aide/list_of_dict_to_xlsx_csv/#esta.aide.list_of_dict_to_xlsx_csv","title":"<code>esta.aide.list_of_dict_to_xlsx_csv</code>","text":""},{"location":"reference/esta/aide/list_of_dict_to_xlsx_csv/#esta.aide.list_of_dict_to_xlsx_csv.get_xlsx_csv_file","title":"<code>get_xlsx_csv_file(data_list, outfile=None)</code>","text":"<p>save data in xlsx and scv file from the input list of dictionaries  containing data for each gaussian input file/ or similar files</p> <p>Returns:</p> <ul> <li> <code>    save data in the xlsx or csv format in file output.xlsx or output.csv</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <p>the input is list of dictionaries of equal number of eneteris</p> </li> </ul>"},{"location":"reference/esta/aide/path_length/","title":"esta.aide.path_length","text":""},{"location":"reference/esta/aide/path_length/#esta.aide.path_length","title":"<code>esta.aide.path_length</code>","text":""},{"location":"reference/esta/aide/path_length/#esta.aide.path_length.get_path_length","title":"<code>get_path_length(path_filename)</code>","text":"<p>find the inter image distances from a path file or  trajectory file</p> parameters: <p>path_filename: str     name of the traj/path file name</p> returns: <p>plength: 1 D array      1D array of inter-images distances between traj/path points</p>"},{"location":"reference/esta/aide/pretty_int/","title":"esta.aide.pretty_int","text":""},{"location":"reference/esta/aide/pretty_int/#esta.aide.pretty_int","title":"<code>esta.aide.pretty_int</code>","text":""},{"location":"reference/esta/aide/pretty_int/#esta.aide.pretty_int.get_pretty_int","title":"<code>get_pretty_int(integers)</code>","text":"<p>get list of range of intergers in pretty format e.g. print 1 to 9999 like 0001 0002 ....0011 ...0123 ..9999</p> <p>only upto 9999 intger is pretified</p>"},{"location":"reference/esta/aide/pretty_int/#esta.aide.pretty_int.get_pretty_int_2","title":"<code>get_pretty_int_2(integers)</code>","text":"<p>get list of range of intergers in pretty format e.g. print 1 to 99999 like 00001 00002 ....00011 ...00123 ..99999</p> <p>only upto 99999 intger is pretified</p>"},{"location":"reference/esta/aide/save_and_read_data_HDF5/","title":"esta.aide.save_and_read_data_HDF5","text":""},{"location":"reference/esta/aide/save_and_read_data_HDF5/#esta.aide.save_and_read_data_HDF5","title":"<code>esta.aide.save_and_read_data_HDF5</code>","text":""},{"location":"reference/esta/aide/string2integer/","title":"esta.aide.string2integer","text":""},{"location":"reference/esta/aide/string2integer/#esta.aide.string2integer","title":"<code>esta.aide.string2integer</code>","text":""},{"location":"reference/esta/aide/string2integer/#esta.aide.string2integer.get_strings_to_integers","title":"<code>get_strings_to_integers(list_entry)</code>","text":"<p>convert character F and T to 0 and 1, respectively</p> <p>e.g. convert ['F F F', 'F T T'] to  ['0 0 0', '0 1 1']</p>"},{"location":"reference/esta/aide/to_format/","title":"esta.aide.to_format","text":""},{"location":"reference/esta/aide/to_format/#esta.aide.to_format","title":"<code>esta.aide.to_format</code>","text":""},{"location":"reference/esta/aide/to_format/#esta.aide.to_format.to_format","title":"<code>to_format(num_array, filename=None)</code>","text":"<p>convert numpy array data in matrix format(rank 2 array) or rank 1 array  to csv or xlsx format</p>"},{"location":"reference/esta/aide/to_yaml/","title":"esta.aide.to_yaml","text":""},{"location":"reference/esta/aide/to_yaml/#esta.aide.to_yaml","title":"<code>esta.aide.to_yaml</code>","text":""},{"location":"reference/esta/aide/to_yaml/#esta.aide.to_yaml.to_yaml","title":"<code>to_yaml(dict_input, out_yaml=None)</code>","text":"<p>store the dictionary input into yaml file</p>"},{"location":"reference/esta/aide/xyz2json/","title":"esta.aide.xyz2json","text":""},{"location":"reference/esta/aide/xyz2json/#esta.aide.xyz2json","title":"<code>esta.aide.xyz2json</code>","text":""},{"location":"reference/esta/aide/xyz2json/#esta.aide.xyz2json.xyz2json","title":"<code>xyz2json(fname)</code>","text":"<p>read xyz and store the xyz data into json format</p>"},{"location":"reference/esta/aide/xyz2json/#esta.aide.xyz2json.json2xyz","title":"<code>json2xyz(fjname)</code>","text":"<p>read the json type dictionary, and write the json dict data into xyz format</p>"},{"location":"reference/esta/antar/","title":"esta.antar","text":""},{"location":"reference/esta/antar/#esta.antar","title":"<code>esta.antar</code>","text":""},{"location":"reference/esta/ase_atoms/","title":"esta.ase_atoms","text":""},{"location":"reference/esta/ase_atoms/#esta.ase_atoms","title":"<code>esta.ase_atoms</code>","text":""},{"location":"reference/esta/ase_atoms/#esta.ase_atoms.get_atoms_object","title":"<code>get_atoms_object(poscar_file=None)</code>","text":"<p>create ase Atoms object by reading the poscar data using  esta xlatt object</p>"},{"location":"reference/esta/ase_atoms/#esta.ase_atoms.atoms","title":"<code>atoms(poscar_file=None)</code>","text":"<p>create ase Atoms object by reading the poscar data using  esta xlatt object</p>"},{"location":"reference/esta/bonds/","title":"esta.bonds","text":""},{"location":"reference/esta/bonds/#esta.bonds","title":"<code>esta.bonds</code>","text":"<p>estimate the bond length between list of atoms</p>"},{"location":"reference/esta/bonds/#esta.bonds.get_bond_length","title":"<code>get_bond_length(atomlist1, atomlist2, element_property=None)</code>","text":"<p>estimate the bond length between list of atoms </p> <p>Parameters:</p> <ul> <li> <code>atomlist1</code>           \u2013            <p>element or atomic list1</p> </li> <li> <code>atomlist2</code>           \u2013            <p>element or atomic list2</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bond_length</code> (              <code>array</code> )          \u2013            <p>an array of atomic distances between atoms</p> </li> </ul>"},{"location":"reference/esta/c/","title":"esta.c","text":""},{"location":"reference/esta/c/#esta.c","title":"<code>esta.c</code>","text":""},{"location":"reference/esta/check_bond_between_atoms_xyz/","title":"esta.check_bond_between_atoms_xyz","text":""},{"location":"reference/esta/check_bond_between_atoms_xyz/#esta.check_bond_between_atoms_xyz","title":"<code>esta.check_bond_between_atoms_xyz</code>","text":""},{"location":"reference/esta/check_float/","title":"esta.check_float","text":""},{"location":"reference/esta/check_float/#esta.check_float","title":"<code>esta.check_float</code>","text":""},{"location":"reference/esta/dat2xls_n_csv/","title":"esta.dat2xls_n_csv","text":""},{"location":"reference/esta/dat2xls_n_csv/#esta.dat2xls_n_csv","title":"<code>esta.dat2xls_n_csv</code>","text":""},{"location":"reference/esta/dat2xls_n_csv/#esta.dat2xls_n_csv.dat2xlsx_csv","title":"<code>dat2xlsx_csv(dat_file, x_name=None, y_name=None, outfile_prefix=None)</code>","text":"<p>read data file (x: filenames and y: energies values in data file) save to xls format or csv format In general any data file with 2 columns (first is string values in columns and other having float values)</p>"},{"location":"reference/esta/dict_to_xlsx/","title":"esta.dict_to_xlsx","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx","title":"<code>esta.dict_to_xlsx</code>","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx","title":"<code>dict_to_xlsx(dictt, exclfile=None)</code>","text":"<p>save dictt to xlsx  here first dictt is change panda dataframe and then to excel.</p> <p>Here is the example to with dict input to pandas DataFrame</p>"},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--creating-the-dataframe","title":"creating the dataframe","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--df-pddataframename-anurag-manjeet-shubham","title":"df = pd.DataFrame({\"Name\": ['Anurag', 'Manjeet', 'Shubham',","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--saurabh-ujjawal","title":"'Saurabh', 'Ujjawal'],","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--address-patna-delhi-coimbatore","title":"\"Address\": ['Patna', 'Delhi', 'Coimbatore',","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--greater-noida-patna","title":"'Greater noida', 'Patna'],","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--id-20123-20124-20145-20146-20147","title":"\"ID\": [20123, 20124, 20145, 20146, 20147],","text":""},{"location":"reference/esta/dict_to_xlsx/#esta.dict_to_xlsx.dict_to_xlsx--sell-140000-300000-600000-200000-600000","title":"\"Sell\": [140000, 300000, 600000, 200000, 600000]})","text":""},{"location":"reference/esta/dict_to_xlsx_csv/","title":"esta.dict_to_xlsx_csv","text":""},{"location":"reference/esta/dict_to_xlsx_csv/#esta.dict_to_xlsx_csv","title":"<code>esta.dict_to_xlsx_csv</code>","text":""},{"location":"reference/esta/dict_to_xlsx_csv/#esta.dict_to_xlsx_csv.get_xlsx_csv_file","title":"<code>get_xlsx_csv_file(data_list)</code>","text":"<p>save data in xlsx and scv file from the input list of dictionaries  containing data for each gaussian input file/ or similar files</p> <p>Returns:</p> <ul> <li> <code>    save data in the xlsx or csv format in file output.xlsx or output.csv</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <p>the input is list of dictionaries of equal number of eneteris</p> </li> </ul>"},{"location":"reference/esta/dict_to_yaml/","title":"esta.dict_to_yaml","text":""},{"location":"reference/esta/dict_to_yaml/#esta.dict_to_yaml","title":"<code>esta.dict_to_yaml</code>","text":""},{"location":"reference/esta/dict_to_yaml/#esta.dict_to_yaml.dict_to_yaml","title":"<code>dict_to_yaml(dictt)</code>","text":"<p>convert dict data to yaml data</p>"},{"location":"reference/esta/element/","title":"esta.element","text":""},{"location":"reference/esta/element/#esta.element","title":"<code>esta.element</code>","text":"<p>extract the basic properties of elements present in the periodic table</p> Some examples are:"},{"location":"reference/esta/element/#esta.element--get-the-atomic-number","title":"get the atomic number ..","text":"<p>from mendeleev import element si = element('Si') si.atomic_number    ---&gt; 14  si.vdw_radius_truhlar  ---&gt; None is return .. no value of vdw exist for Si ... si = element(14) si.atomic_numner ---&gt; 14 </p>"},{"location":"reference/esta/element/#esta.element--get-all-the-elements-data-in-a-table-see-mendeleev-api-refrence","title":"get all the elements data in a table; see mendeleev api refrence:","text":"<p>https://mendeleev.readthedocs.io/en/stable/code.html</p> <p>from mendeleev.fetch import fetch_table df = fetch_table('elements') type(df) pandas.core.frame.DataFrame</p>"},{"location":"reference/esta/element/#esta.element--get-the-name-of-the-atomic-symbol","title":"get the name of the atomic symbol","text":"<p>from mendeleev import H, C, O, Og x.name for x in [H, C, O, Og]</p>"},{"location":"reference/esta/element/#esta.element.elements_data","title":"<code>elements_data(atoms_symbols)</code>","text":"<p>define Element object and then extract the elements properties </p> <p>Parameters:</p> <ul> <li> <code>atoms_symbols</code>           \u2013            <p>list of atomic symbols</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>element_obj</code> (              <code>obj</code> )          \u2013            <p>element_obj from which different elemental properties  can be extracted; e.g. atomic_radius, atomic_volume,  electron_affinity, etc</p> </li> </ul> See Also <p>elements_propeties.md in the current directory for detailed information of  elements properites</p>"},{"location":"reference/esta/element_data/","title":"esta.element_data","text":""},{"location":"reference/esta/element_data/#esta.element_data","title":"<code>esta.element_data</code>","text":""},{"location":"reference/esta/element_data/#esta.element_data.get_medeleev_data","title":"<code>get_medeleev_data()</code>","text":"...NOTE:: <pre><code>    covalent_radius_cordero ... ----&gt;.  Alvarez, Dalton Transactions (2008) doi:10.1039/b801115j \n    vdw_radius_truhlar... Truhlar --&gt; Manjeera Mantina, Adam C Chamberlin, Rosendo Valero, Christopher J Cramer, and Donald G Truhlar. Consistent van der Waals Radii for the Whole Main Group. The Journal of Physical Chemistry A, 113(19):5806\u20135812, may 2009. URL: http://pubs.acs.org/doi/abs/10.1021/jp8111556, doi:10.1021/jp8111556.\n</code></pre>"},{"location":"reference/esta/element_property/","title":"esta.element_property","text":""},{"location":"reference/esta/element_property/#esta.element_property","title":"<code>esta.element_property</code>","text":""},{"location":"reference/esta/element_property/#esta.element_property.get_eldata","title":"<code>get_eldata()</code>","text":"<p>https://pubs.rsc.org/en/content/articlepdf/2008/dt/b801115j  for covalent radii https://pubs.acs.org/doi/10.1021/jp8111556  - vdw radii</p> <p>mendeeleev </p> <p>get element data .. atomic sym, number, mass, covalent radii</p> <p>TODO:  get the vdw radii...</p>"},{"location":"reference/esta/externalBag/","title":"esta.externalBag","text":""},{"location":"reference/esta/externalBag/#esta.externalBag","title":"<code>esta.externalBag</code>","text":""},{"location":"reference/esta/externalBag/#esta.externalBag.XTB","title":"<code>XTB</code>","text":"<p>               Bases: <code>GenericFileIOCalculator</code></p> <p>xTB calculator</p>"},{"location":"reference/esta/externalBag/#esta.externalBag.XTB.__init__","title":"<code>__init__(profile: XTBProfile | None = None, directory: Path | str = '.', method: Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff'] = 'gfn2-xtb', charge: int = 0, uhf: int = 0, spinpol: bool | None = None, **kwargs) -&gt; None</code>","text":"<p>Initialize the xTB calculator.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>XTBProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated xtb_ase.calculator.XTBProfile object to use.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the xTB calculation in.</p> </li> <li> <code>method</code>               (<code>Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff']</code>, default:                   <code>'gfn2-xtb'</code> )           \u2013            <p>The xTB method to use. Case-insensitive.</p> </li> <li> <code>charge</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The net charge of the system.</p> </li> <li> <code>uhf</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of unpaired electrons in the system.</p> </li> <li> <code>spinpol</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to use spin-polarized xTB. If None, <code>spinpol</code> will be automatically set to True if <code>uhf</code> &gt; 0.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional xTB parameters to be written out to a detailed input file, e.g. in the format of <code>scc={\"temp\": 500}</code>. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/#esta.externalBag.XTBProfile","title":"<code>XTBProfile</code>","text":"<p>xTB profile</p>"},{"location":"reference/esta/externalBag/#esta.externalBag.XTBProfile.__init__","title":"<code>__init__(argv: list[str] | None = None) -&gt; None</code>","text":"<p>Initialize the xTB profile.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The command line arguments to the xTB executable, e.g. <code>[\"xtb\", \"--tblite\"]</code>. Do not specify an input file, i.e. --input (-I), or the geometry file, as these will be automatically added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/#esta.externalBag.XTBProfile.run","title":"<code>run(directory: Path | str, input_filename: str, geom_filename: str, output_filename: str) -&gt; None</code>","text":"<p>Run the xTB calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The directory where the calculation will be run.</p> </li> <li> <code>input_filename</code>               (<code>str</code>)           \u2013            <p>The name of the input file present in the directory.</p> </li> <li> <code>geom_filename</code>               (<code>str</code>)           \u2013            <p>The name of the coordinates file present in the directory.</p> </li> <li> <code>output_filename</code>               (<code>str</code>)           \u2013            <p>The name of the log file to write to in the directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/external_atomic/","title":"esta.externalBag.external_atomic","text":""},{"location":"reference/esta/externalBag/external_atomic/#esta.externalBag.external_atomic","title":"<code>esta.externalBag.external_atomic</code>","text":""},{"location":"reference/esta/externalBag/external_xyz_py/","title":"esta.externalBag.external_xyz_py","text":""},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py","title":"<code>esta.externalBag.external_xyz_py</code>","text":"<p>This is the main part of xyz_py</p>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.load_xyz","title":"<code>load_xyz(f_name: str, atomic_numbers: bool = False, add_indices: bool = False, capitalise: bool = True, check: bool = True) -&gt; tuple[list, NDArray]</code>","text":"<p>Load labels and coordinates from a .xyz file</p> <p>File assumes two header lines, first containing number of atoms</p> <p>and second containing a comment or blank, followed by actual data</p> <p>Parameters:</p> <ul> <li> <code>f_name</code>               (<code>str</code>)           \u2013            <p>File name</p> </li> <li> <code>atomic_numbers</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, reads xyz file with atomic numbers and converts to labels</p> </li> <li> <code>add_indices</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, add indices to atomic labels</p> <p>(replacing those which may exist already)</p> </li> <li> <code>capitalise</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, capitalise atomic labels</p> </li> <li> <code>check</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, check xyz file before loading</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code>           \u2013            <p>atomic labels</p> </li> <li> <code>ndarray</code>           \u2013            <p>(n_atoms,3) array containing xyz coordinates of each atom</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.load_xyz_comment","title":"<code>load_xyz_comment(f_name: str) -&gt; str</code>","text":"<p>Load comment line from an xyz file</p> <p>Parameters:</p> <ul> <li> <code>f_name</code>               (<code>str</code>)           \u2013            <p>File name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>comment line of xyz file</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.check_xyz","title":"<code>check_xyz(f_name: str, allow_indices: bool = True, allow_nonelements: bool = False) -&gt; None</code>","text":"<p>Checks if .xyz file has correct length and contains two header lines</p> <p>for the number of atoms and an optional comment</p> <p>Parameters:</p> <ul> <li> <code>f_name</code>               (<code>str</code>)           \u2013            <p>File name</p> </li> <li> <code>allow_indices</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, allows indexing numbers on atomic labels</p> </li> <li> <code>allow_nonelements</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, allow atomic labels which are do not correspond to a </p> <p>chemical element</p> </li> <li> <code>bool</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, allow atomic labels which are do not correspond to a </p> <p>chemical element</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the .xyz file has incorrect length, is missing the number</p> <p>of atoms and comment lines, or contains atomic label indices</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.save_xyz","title":"<code>save_xyz(f_name: str, labels: ArrayLike, coords: ArrayLike, with_numbers: bool = False, verbose: bool = True, mask: list = [], atomic_numbers: bool = False, comment: str = '') -&gt; None</code>","text":"<p>Save an xyz file containing labels and coordinates</p> <p>Parameters:</p> <ul> <li> <code>f_name</code>               (<code>str</code>)           \u2013            <p>File name</p> </li> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>list of 3 element lists containing xyz coordinates of each atom</p> </li> <li> <code>with_numbers</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, add/overwrite numbers to labels before printing</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print information on filename to screen</p> </li> <li> <code>mask</code>               (<code>list</code>, default:                   <code>[]</code> )           \u2013            <p>n_atom list of 0 (exclude) and 1 (include) indicating which atoms to print</p> </li> <li> <code>atomic_numbers</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, will save xyz file with atomic numbers</p> </li> <li> <code>comment</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Comment line printed to 2<sup>nd</sup> line of .xyz file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.remove_label_indices","title":"<code>remove_label_indices(labels: ArrayLike)</code>","text":"<p>Remove label indexing from atomic symbols</p> <p>indexing is either numbers or numbers followed by letters:</p> <p>e.g. H1, H2, H3</p> <p>or H1a, H2a, H3a</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str] | str</code>           \u2013            <p>atomic labels without indexing, type depends on input type</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.add_label_indices","title":"<code>add_label_indices(labels: ArrayLike, style: str = 'per_element', start_index: int = 1) -&gt; list[str]</code>","text":"<p>Add label indexing to atomic symbols - either element or per atom.</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> <li> <code>style</code>               (<code>str</code>, default:                   <code>'per_element'</code> )           \u2013            <p>{'per_element', 'sequential'}</p> <pre><code>'per_element': Index by element e.g. Dy1, Dy2, N1, N2, etc.\n\n'sequential': Index the atoms 1-&gt;N regardless of element\n</code></pre> </li> <li> <code>start_index</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>integer at which indexing will start</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>atomic labels with indexing</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.count_n_atoms","title":"<code>count_n_atoms(form_str: str) -&gt; int</code>","text":"<p>Count number of atoms in a chemical formula</p> <p>Parameters:</p> <ul> <li> <code>form_str</code>               (<code>str</code>)           \u2013            <p>chemical formula string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>number of atoms in chemical formula</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.index_elements","title":"<code>index_elements(labels: ArrayLike, shift: int = 0) -&gt; dict[str, int]</code>","text":"<p>Return dictionary of element (keys) and positional indices (values) from list of labels</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> <li> <code>shift</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>additive shift to apply to all indices</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, int]</code>           \u2013            <p>element label (keys) and indices (values)</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.count_elements","title":"<code>count_elements(labels: ArrayLike) -&gt; dict[str, int]</code>","text":"<p>Count number of each element in a list of elements</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, int]</code>           \u2013            <p>dictionary of elements (keys) and counts (vals)</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_formula","title":"<code>get_formula(labels: ArrayLike) -&gt; str</code>","text":"<p>Generates empirical formula in alphabetical order given a list of labels</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>atomic labels</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Empirical formula in alphabetical order</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.formstr_to_formdict","title":"<code>formstr_to_formdict(form_str: str) -&gt; dict[str, int]</code>","text":"<p>Converts formula string into dictionary of {atomic label:quantity} pairs</p> <p>Parameters:</p> <ul> <li> <code>form_string</code>           \u2013            <p>Chemical formula as string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, int]</code>           \u2013            <p>dictionary of {atomic label:quantity} pairs</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.formdict_to_formstr","title":"<code>formdict_to_formstr(form_dict: dict[str, int], include_one: bool = False) -&gt; str</code>","text":"<p>Converts dictionary of {atomic label:quantity} pairs into</p> <p>a single formula string in alphabetical order</p> <p>Parameters:</p> <ul> <li> <code>form_dict</code>               (<code>dict[str, int]</code>)           \u2013            <p>dictionary of {atomic label:quantity} pairs</p> </li> <li> <code>include_one</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Include 1 in final chemical formula e.g. C1H4</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Chemical formula as string in alphabetical order</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.contains_metal","title":"<code>contains_metal(form_string: str) -&gt; bool</code>","text":"<p>Indicates if a metal is found in a chemical formula string</p> <p>Parameters:</p> <ul> <li> <code>form_string</code>               (<code>str</code>)           \u2013            <p>Chemical formula as string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if metal found, else False</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.combine_xyz","title":"<code>combine_xyz(labels_1: ArrayLike, labels_2: ArrayLike, coords_1: ArrayLike, coords_2: ArrayLike) -&gt; tuple[list[str], NDArray]</code>","text":"<p>Combine two sets of labels and coordinates</p> <p>Parameters:</p> <ul> <li> <code>labels_1</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords_1</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>labels_2</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords_2</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>Combined atomic labels</p> </li> <li> <code>ndarray of floats</code>           \u2013            <p>Combined xyz coordinates as (n_atoms, 3) array</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_neighborlist","title":"<code>get_neighborlist(labels: ArrayLike, coords: ArrayLike, adjust_cutoff: dict[str, float] = {}) -&gt; neighborlist.NeighborList</code>","text":"<p>Calculate ASE neighborlist based on covalent radii</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>adjust_cutoff</code>               (<code>dict[str, float]</code>, default:                   <code>{}</code> )           \u2013            <p>dictionary of atoms (keys) and new cutoffs (values)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>NeighborList</code>           \u2013            <p>Neighborlist for system</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_adjacency","title":"<code>get_adjacency(labels: ArrayLike, coords: ArrayLike, adjust_cutoff: dict[str, float] = {}) -&gt; NDArray</code>","text":"<p>Calculate adjacency matrix using ASE based on covalent radii.</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>adjust_cutoff</code>               (<code>dict[str, float]</code>, default:                   <code>{}</code> )           \u2013            <p>dictionary of atoms (keys) and new cutoffs (values)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray of floats</code>           \u2013            <p>Adjacency matrix with same order as labels/coords</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_bonds","title":"<code>get_bonds(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style: str = 'indices')</code>","text":"<p>Calculate list of atoms between which there is a bond.</p> <p>Using ASE. Only unique bonds are retained.</p> <p>e.g. 0-1 and not 1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array in Angstrom</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of bonds to screen</p> </li> <li> <code>style</code>               (<code>str</code>, default:                   <code>'indices'</code> )           \u2013            <p>indices: Bond list contains atom number</p> <p>labels : Bond list contains atom label</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str]]</code>           \u2013            <p>list of lists of unique bonds (atom pairs)</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.find_bonds","title":"<code>find_bonds(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style: str = 'labels')</code>","text":"<p>Calculate list of atoms between which there is a bond.</p> <p>Using ASE. Only unique bonds are retained.</p> <p>e.g. 0-1 and not 1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array in Angstrom</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of bonds to screen</p> </li> <li> <code>style</code>               (<code>str</code>, default:                   <code>'labels'</code> )           \u2013            <p>indices: Bond list contains atom number</p> <p>labels : Bond list contains atom label</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str]]</code>           \u2013            <p>list of lists of unique bonds (atom pairs)</p> </li> <li> <code>ndarray of floats</code>           \u2013            <p>Bond length in Angstrom</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_angles","title":"<code>get_angles(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style: str = 'indices')</code>","text":"<p>Calculate list of atoms between which there is a bond angle. Using ASE. Only unique angles are retained. e.g. 0-1-2 but not 2-1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of angles to screen</p> </li> <li> <code>style</code>               (<code>str</code>, default:                   <code>'indices'</code> )           \u2013            <pre><code>indices: Angle list contains atom number\nlabels : Angle list contains atom label\nvalues : Angle list is values in degrees\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str | float]]</code>           \u2013            <p>list of lists of unique angles (atom trios)</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.find_angles","title":"<code>find_angles(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style='labels')</code>","text":"<p>Calculate all angles using ASE. Only unique angles are retained. e.g. 0-1-2 but not 2-1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of angles to screen</p> </li> <li> <code>style</code>           \u2013            <pre><code>indices: Angle labels are atom number\nlabels : Angle labels are atom label\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str]]</code>           \u2013            <p>list of lists of unique angles (atom trios) as labels or indices</p> </li> <li> <code>ndarray</code>           \u2013            <p>Angles in degrees</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.get_dihedrals","title":"<code>get_dihedrals(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style: str = 'indices')</code>","text":"<p>Calculate and list of atoms between which there is a dihedral. Using ASE. Only unique dihedrals are retained. e.g. 0-1-2-3 but not 3-2-1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of dihedrals to screen</p> </li> <li> <code>style</code>               (<code>str</code>, default:                   <code>'indices'</code> )           \u2013            <pre><code>indices: Dihedral list contains atom number\nlabels : Dihedral list contains atom label\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str]]</code>           \u2013            <p>list of lists of unique dihedrals (atom quads)</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.find_dihedrals","title":"<code>find_dihedrals(labels: ArrayLike, coords: ArrayLike, neigh_list: neighborlist.NeighborList = None, verbose: bool = True, style='labels')</code>","text":"<p>Calculate and list of atoms between which there is a dihedral. Using ASE. Only unique dihedrals are retained. e.g. 0-1-2-3 but not 3-2-1-0</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>neigh_list</code>               (<code>NeighborList</code>, default:                   <code>None</code> )           \u2013            <p>neighborlist of system, calculated if not provided</p> </li> <li> <code>verbose</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Print number of dihedrals to screen</p> </li> <li> <code>style</code>           \u2013            <pre><code>indices: Dihedral list contains atom number\nlabels : Dihedral list contains atom label\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[int | str]]</code>           \u2013            <p>list of lists of unique dihedrals (atom quads)</p> </li> <li> <code>ndarray</code>           \u2013            <p>Dihedral angles in degrees</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.lab_to_num","title":"<code>lab_to_num(labels: ArrayLike) -&gt; list[int]</code>","text":"<p>Convert atomic label to atomic number</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic labels</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[int] | int</code>           \u2013            <p>Atomic numbers</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.num_to_lab","title":"<code>num_to_lab(numbers: ArrayLike, numbered: bool = True) -&gt; list[str]</code>","text":"<p>Convert atomic number to atomic labels</p> <p>Parameters:</p> <ul> <li> <code>numbers</code>               (<code>ArrayLike</code>)           \u2013            <p>Atomic numbers</p> </li> <li> <code>numbered</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, adds indexing number to end of atomic labels</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>Atomic labels</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.reflect_coords","title":"<code>reflect_coords(coords: ArrayLike) -&gt; NDArray</code>","text":"<p>Reflect coordinates through xy plane</p> <p>Parameters:</p> <ul> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray of floats</code>           \u2013            <p>reflected xyz coordinates as (n_atoms, 3) array</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.find_entities","title":"<code>find_entities(labels: ArrayLike, coords: ArrayLike, adjust_cutoff: dict[str, float] = {}, non_bond_labels: list[str] = []) -&gt; dict[str, list[list[int]]]</code>","text":"<pre><code>Finds formulae of entities given in labels and coords using adjacency\nmatrix\n</code></pre> <pre><code>Parameters\n</code></pre> <pre><code>labels: array_like\n    atomic labels\ncoords: array_like\n    xyz coordinates of each atom as (n_atoms, 3) array\nadjust_cutoff: dict[str, float], optional\n    dictionary of atoms (keys) and new cutoffs (values) used in generating\n</code></pre> <p>adjacency matrix     non_bond_labels: list[str], optional         List of atomic labels specifying atoms to which no bonds will be         allowed.         e.g If a metal centre is provided this will result in single ligands</p> <pre><code>    being returned.\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>dict[str, list[list[int]]]\n    keys = molecular formula\n\n    vals = list of lists, where each list contains the indices of a single\n</code></pre> <p>occurrence of the <code>key</code>, and the indices match the order given</p> <pre><code>    in `labels` and `coords`\n</code></pre>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.find_entities_from_adjacency","title":"<code>find_entities_from_adjacency(labels_nn: ArrayLike, adjacency: ArrayLike)</code>","text":"<pre><code>Finds formulae of entities given in labels and adjacency matrix\n</code></pre> <pre><code>Parameters\n</code></pre> <pre><code>labels: array_like\n    atomic labels\nadjacency: array_like\n    Adjacency matrix (0,1) with same order as labels\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>dict[str:list[list[int]]]\n    keys = molecular formula\n\n    vals = list of lists, where each list contains the indices of a single\n</code></pre> <p>occurrence of the <code>key</code>, and the indices match the order given</p> <pre><code>    in `labels` and `coords`\n</code></pre>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.calculate_rmsd","title":"<code>calculate_rmsd(coords_1: ArrayLike, coords_2: ArrayLike, mask_1: ArrayLike = [], mask_2: ArrayLike = [], order_1: ArrayLike = [], order_2: ArrayLike = []) -&gt; float</code>","text":"<pre><code>Calculates RMSD between two structures\n\nRMSD = sqrt(mean(deviations**2))\n\nWhere deviations are defined as norm([x1,y1,z1]-[x2,y2,z2])\n\nIf coords_1 and coords_2 are not the same length, then a mask array can be\n</code></pre> <p>provided for either/both and is applied prior to the calculation</p> <pre><code>coords_1 and coords_2 can also be reordered if new orders are specified\n- note this occurs BEFORE masking\n</code></pre> <pre><code>Parameters\n</code></pre> <pre><code>coords_1: array_like\n    xyz coordinates as (n_atoms, 3) array\ncoords_2: array_like\n    xyz coordinates as (n_atoms, 3) array\n\nmask_1: list\n    list of 0 (exclude) and 1 (include) for each element in coords_1\nmask_2: list\n    list of 0 (exclude) and 1 (include) for each element in coords_2\norder_1: list\n    list of new indices for coords_1 - applied BEFORE masking\norder_2: list\n    list of new indices for coords_2 - applied BEFORE masking\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>float\n    Root mean square of norms of deviation between two structures\n</code></pre>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.build_rotation_matrix","title":"<code>build_rotation_matrix(alpha: float, beta: float, gamma: float) -&gt; NDArray</code>","text":"<p>Creates rotation matrix using euler angles alpha, beta, gamma for the zyz convention</p> <p>https://easyspin.org/easyspin/documentation/eulerangles.html</p> <p>Parameters:</p> <ul> <li> <code>alpha</code>               (<code>float</code>)           \u2013            <p>alpha angle in radians</p> </li> <li> <code>beta</code>               (<code>float</code>)           \u2013            <p>beta  angle in radians</p> </li> <li> <code>gamma</code>               (<code>float</code>)           \u2013            <p>gamma angle in radians</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray of floats</code>           \u2013            <p>Rotation matrix R which is applied to a vector x as R dot x</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.rotate_coords","title":"<code>rotate_coords(coords: ArrayLike, alpha: float, beta: float, gamma: float) -&gt; NDArray</code>","text":"<p>Rotates coordinates using euler angles alpha, beta, gamma for the zyz convention</p> <p>https://easyspin.org/easyspin/documentation/eulerangles.html</p> <p>Parameters:</p> <ul> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> <li> <code>alpha</code>               (<code>float</code>)           \u2013            <p>alpha angle in radians</p> </li> <li> <code>beta</code>               (<code>float</code>)           \u2013            <p>beta  angle in radians</p> </li> <li> <code>gamma</code>               (<code>float</code>)           \u2013            <p>gamma angle in radians</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray of floats</code>           \u2013            <p>xyz coordinates as (n_atoms, 3) array after rotation</p> <p>in same order as input coordinates</p> </li> </ul>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.minimise_rmsd","title":"<code>minimise_rmsd(coords_1: ArrayLike, coords_2: ArrayLike, mask_1: ArrayLike = [], mask_2: ArrayLike = [], order_1: ArrayLike = [], order_2: ArrayLike = []) -&gt; tuple[float, float, float, float]</code>","text":"<pre><code>Minimises the RMSD between two structures\n\nby rotating coords_1 onto coords_2\n\nIf coords_1 and coords_2 are not the same length, then a mask array can be\n</code></pre> <p>provided for either/both and is applied prior to the calculation</p> <pre><code>coords_1 and coords_2 can also be reordered if new orders are specified\n\n**note reordering occurs before masking**\n</code></pre> <pre><code>Parameters\n</code></pre> <pre><code>coords_1: array_like\n    xyz coordinates as (n_atoms, 3) array\ncoords_2: array_like\n    xyz coordinates as (n_atoms, 3) array\nmask_1: array_like\n    0 (exclude) or 1 (include) for each element in coords_1\nmask_2: array_like\n    0 (exclude) or 1 (include) for each element in coords_2\norder_1: array_like\n    new indices for coords_1 - applied BEFORE masking\norder_2: array_like\n    new indices for coords_2 - applied BEFORE masking\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>float\n    Root mean square of norms of deviation between two structures\nfloat\n    alpha angle in radians\nfloat\n    beta angle in radians\nfloat\n    gamma angle in radians\n</code></pre>"},{"location":"reference/esta/externalBag/external_xyz_py/#esta.externalBag.external_xyz_py.calculate_com","title":"<code>calculate_com(labels: ArrayLike, coords: ArrayLike) -&gt; NDArray</code>","text":"<p>Calculates centre-of-mass using relative atomic masses</p> <p>Parameters:</p> <ul> <li> <code>labels</code>               (<code>ArrayLike</code>)           \u2013            <p>list of atomic labels</p> </li> <li> <code>coords</code>               (<code>ArrayLike</code>)           \u2013            <p>xyz coordinates as (n_atoms, 3) array</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray of floats</code>           \u2013            <p>xyz coordinates of centre of mass as (3) array</p> </li> </ul>"},{"location":"reference/esta/externalBag/geometry/","title":"esta.externalBag.geometry","text":""},{"location":"reference/esta/externalBag/geometry/#esta.externalBag.geometry","title":"<code>esta.externalBag.geometry</code>","text":""},{"location":"reference/esta/externalBag/get_connection/","title":"esta.externalBag.get_connection","text":""},{"location":"reference/esta/externalBag/get_connection/#esta.externalBag.get_connection","title":"<code>esta.externalBag.get_connection</code>","text":""},{"location":"reference/esta/externalBag/get_connection/#esta.externalBag.get_connection.connectivity_bond_list_","title":"<code>connectivity_bond_list_(atm_position, atm_symbol, cutoff=None)</code>","text":"<p>similar to connectivity_bond_list, but now atm_position and atm_symbol are directly input instead of xyz file</p>"},{"location":"reference/esta/externalBag/get_connection/#esta.externalBag.get_connection.connectivity_matrix_","title":"<code>connectivity_matrix_(atm_position, atm_symbol, cutoff=None)</code>","text":"parameters: <p>atm_position: rank 2 array     atomic positions atm_symbol: list      list of atom symobols cutoff: dict     dict containing atomic symobols and atomic radii as key-values; e.g     cutoff={'H':0.4, 'P':1.0}. Radii are in angstrom</p> return: <p>c_matrix: rank 2 array      matrix containing 1' and 0' for showing atomic connection between      atoms in atomic systems</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/","title":"esta.externalBag.mathutil_nwchem","text":""},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem","title":"<code>esta.externalBag.mathutil_nwchem</code>","text":""},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.numderiv","title":"<code>numderiv(func, x, step, eps)</code>","text":"<p>Use central differences to compute the gradient and diagonal elements of the Hessian.  func(x) = function to be differentiated x[] = (array) point at which to differentiate step[] = (array) remembers finite difference step between .        successive calls.  Set to zero on first call  .        or set close to appropriate value  eps = expected precision in func</p> <p>Some care is taken to adjust the step so that the gradient and Hessian diagonal are estimated with about 4 digits of precision but some noise is unavoidable due either to the noise in the function or cubic/higher terms in the Taylor expansion.</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.quadfit","title":"<code>quadfit(alpha0, f0, alpha1, f1, alpha2, f2)</code>","text":"<p>Given 3 points compute the gradient and hessian at point 0 using a quadratic fit.</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.jacobi","title":"<code>jacobi(ainput)</code>","text":"<p>Diagonalize a real symmetric matrix using the variable threshold cyclic Jacobi method.</p> <p>(v,e) = jacobi(a)</p> <p>Input: an is a real symmetric matrix</p> <p>Returns: (v,e) where v is the list of eigenvectors and e is an array of the corresponding eigenvalues in ascending order. v[k] is a vector containing the kth eigenvector.  These satisfy</p> <p>A*Vt = Vt*e</p> <p>or</p> <p>V*A = e*V</p> <p>or</p> <p>sum(j)(aivk) = e[k]*vk</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.hessian_update_bfgs","title":"<code>hessian_update_bfgs(hp, dx, g, gp)</code>","text":"<p>Apply the BFGS update to the approximate Hessian h.</p> <p>hp = Hessian matrix from previous iteration dx[]  = Step from previous iteration .       (dx[] = x[] - xp[] where xp[] is the previous point) g[]   = gradient at current point gp[]  = gradient at previous point</p> <p>Returns the updated hessian</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.quasinr","title":"<code>quasinr(func, guess, tol, eps, printvar=None)</code>","text":"<p>Unconstrained minimization of a function of n variables without analytic derivatives using quasi-Newtwon with BFGS update and numerical gradients.</p> <p>func(x) is a function that takes an array of n values and returns the function value</p> <p>guess[] is an array of n values for the initial guess</p> <p>tol is the convergence criterion for the maximum value of the gradient</p> <p>eps is the expected precision in the function value</p> <p>printvar(x) is an optional user function to print the values of parameters each macro iteration</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.cgminold","title":"<code>cgminold(func, dfunc, guess, tol)</code>","text":"<p>Simple conjugate gradient assuming analtyic derivatives.</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.cgmin","title":"<code>cgmin(func, dfunc, guess, tol, precond=None, reset=None)</code>","text":"<p>Conjugate gradient with optional preconditioning and use of analytic gradients.</p>"},{"location":"reference/esta/externalBag/mathutil_nwchem/#esta.externalBag.mathutil_nwchem.cgmin2","title":"<code>cgmin2(func, guess, tol, eps, printvar=None, reset=None)</code>","text":"<p>Unconstrained minimization of a function of n variables without analytic derivatives using conjugate gradient with diagonal preconditioning.</p> <p>func(x) is a function that takes an array of n values and returns the function value</p> <p>guess[] is an array of n values for the initial guess</p> <p>tol is the convergence criterion for the maximum value of the gradient</p> <p>eps is the expected precision in the function value</p> <p>printvar(x) is an optional user function to print the values of parameters each iteration</p> <p>reset is the number of iterations between forced resets of the conjugacy.  In principle this could be n but noise in the numerical gradients makes a smaller number a better choice.</p>"},{"location":"reference/esta/externalBag/rmsd/","title":"esta.externalBag.rmsd","text":""},{"location":"reference/esta/externalBag/rmsd/#esta.externalBag.rmsd","title":"<code>esta.externalBag.rmsd</code>","text":""},{"location":"reference/esta/externalBag/spharmonic4mcartesiancoord/","title":"esta.externalBag.spharmonic4mcartesiancoord","text":""},{"location":"reference/esta/externalBag/spharmonic4mcartesiancoord/#esta.externalBag.spharmonic4mcartesiancoord","title":"<code>esta.externalBag.spharmonic4mcartesiancoord</code>","text":""},{"location":"reference/esta/externalBag/spharmonic4mcartesiancoord/#esta.externalBag.spharmonic4mcartesiancoord.Ylm_real","title":"<code>Ylm_real(l, m, G)</code>","text":"<p>from eminus</p> <p>Calculate real spherical harmonics from cartesian coordinates.</p> <p>Reference: https://scipython.com/blog/visualizing-the-real-forms-of-the-spherical-harmonics</p> <p>Args:     l (int): Angular momentum number.     m (int): Magnetic quantum number.     G (ndarray): Reciprocal lattice vector or array of lattice vectors.</p> <p>Returns:     ndarray: Real spherical harmonics.</p>"},{"location":"reference/esta/externalBag/timestamp/","title":"esta.externalBag.timestamp","text":""},{"location":"reference/esta/externalBag/timestamp/#esta.externalBag.timestamp","title":"<code>esta.externalBag.timestamp</code>","text":""},{"location":"reference/esta/externalBag/tools_AICON2/","title":"esta.externalBag.tools_AICON2","text":""},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2","title":"<code>esta.externalBag.tools_AICON2</code>","text":""},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.Generate_kpoints","title":"<code>Generate_kpoints(struct, kppa)</code>","text":"<p>Gererate KPOINTS file with desired grid resolution.</p> Parameters: <p>struct: pmg.core.structure object kppa: float     The grid resolution in the reciprocal space, the unit is A-1.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.get_highsympath","title":"<code>get_highsympath(filename)</code>","text":"<p>Get the high symmetry path of phonon spectrum.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.get_sym_eq_kpoints","title":"<code>get_sym_eq_kpoints(struct, kpoint, cartesian=False, tol=0.01)</code>","text":"<p>Get the symmetry equivalent kpoints list</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.get_highsymweight","title":"<code>get_highsymweight(filename)</code>","text":"<p>Get the multiplicity of the high symmetry path.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.extract_GV","title":"<code>extract_GV(filepath)</code>","text":"<p>Extract frequency and group velocity information.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.extract_GrunP","title":"<code>extract_GrunP(filepath, nbands=9, npoints=255)</code>","text":"<p>Extract gruneisen parameters information.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.calc_MGV","title":"<code>calc_MGV(filepath, weight)</code>","text":"<p>Calculate branch velocity and frequency.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.calc_MGP","title":"<code>calc_MGP(filepath, weight)</code>","text":"<p>Calculate branch gruneisen parameters.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.Get_GVD","title":"<code>Get_GVD(filepath)</code>","text":"<p>This function is used for obtaining the Gruneisen parameter, group velocity and Debye temperature for kappa calculation,  they are all four dimension including three acoustic branches and one \"representive\" optic branch.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.calc_MFPS","title":"<code>calc_MFPS(Elem_tabl)</code>","text":"<p>Calculate mass fluctuation phonon scattering parameter.</p>"},{"location":"reference/esta/externalBag/tools_AICON2/#esta.externalBag.tools_AICON2.Write_INPCAR","title":"<code>Write_INPCAR(coord, step_size, bnd_num, prg, lattice)</code>","text":""},{"location":"reference/esta/externalBag/xtb_ase/","title":"esta.externalBag.xtb_ase","text":""},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase","title":"<code>esta.externalBag.xtb_ase</code>","text":"<p>Init data</p>"},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase.XTB","title":"<code>XTB</code>","text":"<p>               Bases: <code>GenericFileIOCalculator</code></p> <p>xTB calculator</p>"},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase.XTB.__init__","title":"<code>__init__(profile: XTBProfile | None = None, directory: Path | str = '.', method: Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff'] = 'gfn2-xtb', charge: int = 0, uhf: int = 0, spinpol: bool | None = None, **kwargs) -&gt; None</code>","text":"<p>Initialize the xTB calculator.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>XTBProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated xtb_ase.calculator.XTBProfile object to use.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the xTB calculation in.</p> </li> <li> <code>method</code>               (<code>Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff']</code>, default:                   <code>'gfn2-xtb'</code> )           \u2013            <p>The xTB method to use. Case-insensitive.</p> </li> <li> <code>charge</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The net charge of the system.</p> </li> <li> <code>uhf</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of unpaired electrons in the system.</p> </li> <li> <code>spinpol</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to use spin-polarized xTB. If None, <code>spinpol</code> will be automatically set to True if <code>uhf</code> &gt; 0.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional xTB parameters to be written out to a detailed input file, e.g. in the format of <code>scc={\"temp\": 500}</code>. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase.XTBProfile","title":"<code>XTBProfile</code>","text":"<p>xTB profile</p>"},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase.XTBProfile.__init__","title":"<code>__init__(argv: list[str] | None = None) -&gt; None</code>","text":"<p>Initialize the xTB profile.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The command line arguments to the xTB executable, e.g. <code>[\"xtb\", \"--tblite\"]</code>. Do not specify an input file, i.e. --input (-I), or the geometry file, as these will be automatically added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/xtb_ase/#esta.externalBag.xtb_ase.XTBProfile.run","title":"<code>run(directory: Path | str, input_filename: str, geom_filename: str, output_filename: str) -&gt; None</code>","text":"<p>Run the xTB calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The directory where the calculation will be run.</p> </li> <li> <code>input_filename</code>               (<code>str</code>)           \u2013            <p>The name of the input file present in the directory.</p> </li> <li> <code>geom_filename</code>               (<code>str</code>)           \u2013            <p>The name of the coordinates file present in the directory.</p> </li> <li> <code>output_filename</code>               (<code>str</code>)           \u2013            <p>The name of the log file to write to in the directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/","title":"esta.externalBag.xtb_ase.calculator","text":""},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator","title":"<code>esta.externalBag.xtb_ase.calculator</code>","text":"<p>ASE calculator for xtb_ase</p>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator.XTBProfile","title":"<code>XTBProfile</code>","text":"<p>xTB profile</p>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator.XTBProfile.__init__","title":"<code>__init__(argv: list[str] | None = None) -&gt; None</code>","text":"<p>Initialize the xTB profile.</p> <p>Parameters:</p> <ul> <li> <code>argv</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The command line arguments to the xTB executable, e.g. <code>[\"xtb\", \"--tblite\"]</code>. Do not specify an input file, i.e. --input (-I), or the geometry file, as these will be automatically added.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator.XTBProfile.run","title":"<code>run(directory: Path | str, input_filename: str, geom_filename: str, output_filename: str) -&gt; None</code>","text":"<p>Run the xTB calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The directory where the calculation will be run.</p> </li> <li> <code>input_filename</code>               (<code>str</code>)           \u2013            <p>The name of the input file present in the directory.</p> </li> <li> <code>geom_filename</code>               (<code>str</code>)           \u2013            <p>The name of the coordinates file present in the directory.</p> </li> <li> <code>output_filename</code>               (<code>str</code>)           \u2013            <p>The name of the log file to write to in the directory.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator.XTB","title":"<code>XTB</code>","text":"<p>               Bases: <code>GenericFileIOCalculator</code></p> <p>xTB calculator</p>"},{"location":"reference/esta/externalBag/xtb_ase/calculator/#esta.externalBag.xtb_ase.calculator.XTB.__init__","title":"<code>__init__(profile: XTBProfile | None = None, directory: Path | str = '.', method: Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff'] = 'gfn2-xtb', charge: int = 0, uhf: int = 0, spinpol: bool | None = None, **kwargs) -&gt; None</code>","text":"<p>Initialize the xTB calculator.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>XTBProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated xtb_ase.calculator.XTBProfile object to use.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the xTB calculation in.</p> </li> <li> <code>method</code>               (<code>Literal['gfn0-xtb', 'gfn1-xtb', 'gfn2-xTB', 'gfn-ff']</code>, default:                   <code>'gfn2-xtb'</code> )           \u2013            <p>The xTB method to use. Case-insensitive.</p> </li> <li> <code>charge</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The net charge of the system.</p> </li> <li> <code>uhf</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The number of unpaired electrons in the system.</p> </li> <li> <code>spinpol</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to use spin-polarized xTB. If None, <code>spinpol</code> will be automatically set to True if <code>uhf</code> &gt; 0.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional xTB parameters to be written out to a detailed input file, e.g. in the format of <code>scc={\"temp\": 500}</code>. See https://github.com/grimme-lab/xtb/blob/main/man/xcontrol.7.adoc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul>"},{"location":"reference/esta/extract_data/","title":"esta.extract_data","text":""},{"location":"reference/esta/extract_data/#esta.extract_data","title":"<code>esta.extract_data</code>","text":"<p>extract data from a general file present in the array of columns.  The text data present in the file is excluded</p>"},{"location":"reference/esta/extract_data/#esta.extract_data.data_from","title":"<code>data_from(filename, columns=None)</code>","text":"<p>extract column/s data from the file </p> parameters: <p>filename: str     name of the file columns: list of integers     columns from which the data to be extracted</p> returns: <p>data : array      array data with n = no. of columns in in <code>columns</code> input</p>"},{"location":"reference/esta/fortran/","title":"esta.fortran","text":""},{"location":"reference/esta/fortran/#esta.fortran","title":"<code>esta.fortran</code>","text":""},{"location":"reference/esta/gamessBag/","title":"esta.gamessBag","text":""},{"location":"reference/esta/gamessBag/#esta.gamessBag","title":"<code>esta.gamessBag</code>","text":""},{"location":"reference/esta/gaussianBag/","title":"esta.gaussianBag","text":""},{"location":"reference/esta/gaussianBag/#esta.gaussianBag","title":"<code>esta.gaussianBag</code>","text":""},{"location":"reference/esta/gaussianBag/input_gaussian/","title":"esta.gaussianBag.input_gaussian","text":""},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian","title":"<code>esta.gaussianBag.input_gaussian</code>","text":""},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>class to generate input files (*.com file) for gaussian calculations</p> <p>.. note::      basic key parameters are added by default in the different type of calculations!</p>"},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian.GenerateCom.__init__","title":"<code>__init__(xyzfile, charge, multiplicity, cal_type)</code>","text":"<p>class to generate input files (*.com file) for gaussian calculations</p>"},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian.GenerateCom.write_com","title":"<code>write_com(func_basis=None, dispersion=None, solvent=None, chk_file_prefix=None, nproc=None, memory=None, redund_tags=None, **extra_tags)</code>","text":"<p>Parameters:</p> <ul> <li> <code>func_bais</code>           \u2013            <p>information for the functional and basis</p> </li> <li> <code>dispersion</code>           \u2013            <p>dispersion interactions</p> </li> <li> <code>solvent</code>           \u2013            <p>solvent for the reaction</p> </li> <li> <code>chk_filename</code>           \u2013            <p>name of the chk file where data for subsequent calculations can be used for.</p> </li> <li> <code>extra_tags</code>           \u2013            <p>a dictionary containing gaussian related parameters, e.g. nosymm or ultrafine etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>input</code> (              <code>com gaussian file containing info of atomic structure as well </code> )          \u2013            <p>as other parameters</p> </li> </ul> Notes <p>see an example input file for different type of calculations in gaussian manual or other relevant sites.</p> <p>Examples:</p> <p>see the script_gaussian directory for examples of different types of calculations</p>"},{"location":"reference/esta/gaussianBag/input_gaussian/#esta.gaussianBag.input_gaussian.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for:</p> <ul> <li>saddle calculations (see general folder for the implementation)</li> <li>EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</li> </ul> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/gaussianBag/input_gaussian1/","title":"esta.gaussianBag.input_gaussian1","text":""},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1","title":"<code>esta.gaussianBag.input_gaussian1</code>","text":""},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for gaussian calculations</p> <p>.. note::          work in progress: more componets are being added!!</p> <p>author: skumar</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom.__init__","title":"<code>__init__(xyzfile, charge, multiplicity, cal_type)</code>","text":"<p>class to generate input files (*.com file) for gaussian calculations</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom.write_com","title":"<code>write_com(func_basis=None, dispersion=None, solvent=None, chk_file_prefix=None, nproc=None, memory=None, **extra_tags)</code>","text":"<p>Parameters:</p> <ul> <li> <code>func_bais</code>           \u2013            <p>information for the functional and basis</p> </li> <li> <code>dispersion</code>           \u2013            <p>dispersion interactions</p> </li> <li> <code>solvent</code>           \u2013            <p>solvent for the reaction</p> </li> <li> <code>chk_filename</code>           \u2013            <p>name of the chk file where data for subsequent calculations can be used for.</p> </li> <li> <code>extra_tags</code>           \u2013            <p>a dictionary containing gaussian related parameters, e.g. nosymm or ultrafine etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>input</code> (              <code>com gaussian file containing info of atomic structure as well </code> )          \u2013            <p>as other parameters</p> </li> <li> <code>.. note::</code>           \u2013            <p>%chk=opt.chk %nproc=26 %mem=5000MW</p> </li> </ul>"},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom.write_com--p-b3lypdef2svp-empiricaldispersiongd3-optmaxcycles60","title":"p B3LYP/Def2SVP EmpiricalDispersion=GD3 opt=(maxcycles=60)","text":"<p>opt  cation</p> <p>1 1 O        -0.407106382       1.443503609       0.802672557 .. so on</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1/#esta.gaussianBag.input_gaussian1.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for:</p> <ul> <li>saddle calculations (see general folder for the implementation)</li> <li>EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</li> </ul> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/","title":"esta.gaussianBag.input_gaussian1_1Dec2023","text":""},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023","title":"<code>esta.gaussianBag.input_gaussian1_1Dec2023</code>","text":""},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for gaussian calculations</p> <p>.. note::      basic key parameters are added by default in the different type of calculations!</p> <p>author: skumar</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023.GenerateCom.__init__","title":"<code>__init__(xyzfile, charge, multiplicity, cal_type)</code>","text":"<p>class to generate input files (*.com file) for gaussian calculations</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023.GenerateCom.write_com","title":"<code>write_com(func_basis=None, dispersion=None, solvent=None, chk_file_prefix=None, nproc=None, memory=None, **extra_tags)</code>","text":"<p>Parameters:</p> <ul> <li> <code>func_bais</code>           \u2013            <p>information for the functional and basis</p> </li> <li> <code>dispersion</code>           \u2013            <p>dispersion interactions</p> </li> <li> <code>solvent</code>           \u2013            <p>solvent for the reaction</p> </li> <li> <code>chk_filename</code>           \u2013            <p>name of the chk file where data for subsequent calculations can be used for.</p> </li> <li> <code>extra_tags</code>           \u2013            <p>a dictionary containing gaussian related parameters, e.g. nosymm or ultrafine etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>input</code> (              <code>com gaussian file containing info of atomic structure as well </code> )          \u2013            <p>as other parameters</p> </li> <li> <code>.. note::</code>           \u2013            <p>see an example input file for different type of calculations  in gaussian manual or other relevant sites.</p> </li> </ul>"},{"location":"reference/esta/gaussianBag/input_gaussian1_1Dec2023/#esta.gaussianBag.input_gaussian1_1Dec2023.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for:</p> <ul> <li>saddle calculations (see general folder for the implementation)</li> <li>EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</li> </ul> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/","title":"esta.gaussianBag.input_grrm_advv","text":""},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv","title":"<code>esta.gaussianBag.input_grrm_advv</code>","text":""},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for different type of  calculations for GRRM using:</p> <ul> <li> <p>non-supported </p> </li> <li> <p>orca </p> </li> <li> <p>gaussian </p> </li> </ul> <p>.. note::      Different types of calculation are carried out by the  </p> <pre><code>GRRM software given below:\n\n\n     calculaiton type                          .... status of Implementation\n===============================================================================\n1)\n   - Normal mode analysis (FREQ)\n   - Minimum point optimization (MIN)          ......DONE\n   - Saddle-point optimization (SADDLE)\n   - IRC following (IRC)\n   - LUP path optimization (LUP)               .... ongoing\n\n   -- to do \n    Crossing point (MECI or MESX) optimization ....  will not be done\n    Crossing point (MECI or MESX) estimation   ....     will not be done\n    External atoms (microiterations)\n    Frozen atoms                               .... DONE\n\n2)\n\n   MIN-AFIR calculations                      ...  DONE\n   AFIR calculations                          ...  DONE\n   DS-AFIR calculations                       ...  DONE\n\n   Refinement calculations                    ..... TODO\n</code></pre> <p>author: skumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.read_xyz2","title":"<code>read_xyz2(xyz2file)</code>","text":"<p>Returns:</p> <ul> <li> <code>    atomic positions: array: rank 2 array of shape (natoms, 3)</code>           \u2013            <p>atomic labels: list/array of strings: rank 1 array of atomic labels no of atoms: scalar</p> </li> </ul>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.flags_grrm","title":"<code>flags_grrm(**kwargs)</code>","text":"<p>options in GRRM code for calculation types</p> <p>.. note::</p> <pre><code>Options\nsublink=/home/kumarsonu/bin/link_excode_allv3.1_.py\nAdd Interaction\nFragm.1=56,57,58,1\nFragm.2=59-62\n1 2\nGamma=200.0\nEND\nNOFC\nKeepIntFiles\nDownDC=12\n</code></pre>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.write_com","title":"<code>write_com(interface=None, basis=None, solvent=None, log_filename=None, **kwargs)</code>","text":"input: <pre><code>atomic postions\natomic labels\nno of atoms\nkwargs containing GRRM related parameters\n</code></pre> output: <pre><code>input com GRRM file containing info of atomic structure as well \nas other GRRM parameteres\n</code></pre>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.write_com_2xyz","title":"<code>write_com_2xyz(xyz2file, interface=None, **kwargs)</code>","text":"<p>xyz files of products read from command line arguments ....mainly used  for creating DS-AFIR input file ...</p> input: <pre><code>atomic postions\natomic labels\nno of atoms\n_________________ --&gt; all of these variable read form 1xyz file ..by \n                        calling self.read_xyz()\n\nstr: xyz file name ---2nd xyz filename correspinding to product of rxn\n</code></pre> output: <pre><code>com file containing info of atomic structure info of two atomic systems\n</code></pre>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.write_inp","title":"<code>write_inp(xyzfile, charge, multiplicity, ncores=None, memory=None, interface=None)</code>","text":"<p>generate input file for ORCA like below:</p> <p>Parameters:</p> <ul> <li> <code>prefix</code>           \u2013            <p>name of inp file with .inp extension</p> </li> <li> <code>charge</code>           \u2013            <p>chare on ths system</p> </li> <li> <code>multiplicity</code>           \u2013            <p>spin multiplicity (2S+1); for a single electron: S =\u00bd</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>file</code> (              <code>string</code> )          \u2013            <p>inp file for orca containg charge and multiplicity options</p> </li> <li> <code>.. note::</code>           \u2013            <p>! XTB2 NoUseSym @job</p> <ul> <li>xyz  0 1 @geometry *</li> </ul> </li> </ul>"},{"location":"reference/esta/gaussianBag/input_grrm_advv/#esta.gaussianBag.input_grrm_advv.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for:</p> <ul> <li>saddle calculations (see general folder for the implementation)</li> <li>EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</li> </ul> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/","title":"esta.gaussianBag.output_gaussian_adv","text":""},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv","title":"<code>esta.gaussianBag.output_gaussian_adv</code>","text":"<p>gauss class to handle for the gaussian16 log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss","title":"<code>gauss</code>","text":"<p>gauss class for the  gaussian16 output file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positions from the log file of gaussian</p> <p>..important::     all the atomic positions are stored in pos_all array</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_all_atomic_positions","title":"<code>get_all_atomic_positions()</code>","text":"<p>get all xyzs from log file of gaussian calculations.</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get a single xyz file from atomic positions and atomic labels input.</p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic numbers: </p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>.. note::     outfile: write data in a single xyz file specified by name <code>outfile</code>;      here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_energies","title":"<code>get_energies()</code>","text":"<p>extract energies from the gaussian log file</p> <p>.. note::      get the energies from the gaussian log/output file</p> <pre><code>For example: \n============\n\nZero-point correction=                           0.018555 (Hartree/Particle)\nThermal correction to Energy=                    0.018650\nThermal correction to Enthalpy=                  0.018681\nThermal correction to Gibbs Free Energy=         0.017917\nSum of electronic and zero-point Energies=          -2538.604330\nSum of electronic and thermal Energies=             -2538.604235\nSum of electronic and thermal Enthalpies=           -2538.604203\nSum of electronic and thermal Free Energies=        -2538.604968\n\nSCF Done:  E(UB3P86) =  -2538.62288479     A.U.\n\nand so on ..\n\n\nhttps://www.cup.uni-muenchen.de/ch/compchem/vib/thermo1.html\n</code></pre>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_forces","title":"<code>get_forces()</code>","text":"<p>find the forces on all atoms along with max force, and min of all forces on atoms</p> <p>parameters:          self.filename: str          name of the gaussian log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_natoms_dummy","title":"<code>get_natoms_dummy()</code>","text":"<p>get natoms if \"NAtoms\" string is not present in the  gaussian log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv/#esta.gaussianBag.output_gaussian_adv.gauss.get_homo_lumo","title":"<code>get_homo_lumo()</code>","text":"<p>get homo, lumo, and band gaps in hartree (default) from log file of the gaussian, check whether  spin polairsed system or not?</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/","title":"esta.gaussianBag.output_gaussian_adv0","text":""},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0","title":"<code>esta.gaussianBag.output_gaussian_adv0</code>","text":"<p>gauss class to handle for the gaussian16 log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss","title":"<code>gauss</code>","text":"<p>gauss class for the  gaussian16 output file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positions from the log file of gaussian</p> <p>..important::     all the atomic positions are stored in pos_all array</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_all_atomic_positions","title":"<code>get_all_atomic_positions()</code>","text":"<p>get all xyzs from log file of gaussian calculations.</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get a single xyz file from atomic positions and atomic labels input.</p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic numbers: </p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>.. note::     outfile: write data in a single xyz file specified by name <code>outfile</code>;      here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_energies","title":"<code>get_energies()</code>","text":"<p>extract energies from the gaussian log file</p> <p>.. note::      get the energies from the gaussian log/output file</p> <pre><code>For example: \n============\n\nZero-point correction=                           0.018555 (Hartree/Particle)\nThermal correction to Energy=                    0.018650\nThermal correction to Enthalpy=                  0.018681\nThermal correction to Gibbs Free Energy=         0.017917\nSum of electronic and zero-point Energies=          -2538.604330\nSum of electronic and thermal Energies=             -2538.604235\nSum of electronic and thermal Enthalpies=           -2538.604203\nSum of electronic and thermal Free Energies=        -2538.604968\n\nSCF Done:  E(UB3P86) =  -2538.62288479     A.U.\n\nand so on ..\n\n\nhttps://www.cup.uni-muenchen.de/ch/compchem/vib/thermo1.html\n</code></pre>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_forces","title":"<code>get_forces()</code>","text":"<p>find the forces on all atoms along with max force, and min of all forces on atoms</p> <p>parameters:          self.filename: str          name of the gaussian log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_natoms_dummy","title":"<code>get_natoms_dummy()</code>","text":"<p>get natoms if \"NAtoms\" string is not present in the  gaussian log file</p>"},{"location":"reference/esta/gaussianBag/output_gaussian_adv0/#esta.gaussianBag.output_gaussian_adv0.gauss.get_homo_lumo","title":"<code>get_homo_lumo()</code>","text":"<p>get homo, lumo, and band gaps in hartree (default) from log file of the gaussian, check whether  spin polairsed system or not?</p>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/","title":"esta.gaussianBag.xx__input_gaussian0","text":""},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0","title":"<code>esta.gaussianBag.xx__input_gaussian0</code>","text":""},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for gaussian calculations</p> <p>.. note::          work in progress: more componets are being added!!</p> <p>author: skumar</p>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom.__init__","title":"<code>__init__(xyzfile, charge, multiplicity, cal_type)</code>","text":"<p>python class to generate input files (*.com file) for gaussian calculations</p>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom.write_com","title":"<code>write_com(func_basis=None, dispersion=None, solvent=None, chk_file_prefix=None, **kwargs)</code>","text":"<p>Parameters:</p> <ul> <li> <code>func_bais</code>           \u2013            <p>information for the functional and basis</p> </li> <li> <code>solvent</code>           \u2013            <p>solvent for the reaction</p> </li> <li> <code>chk_filename</code>           \u2013            <p>name of the chk file where data for subsequent calculations can be used for.</p> </li> <li> <code>there</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>input</code> (              <code>com gaussian file containing info of atomic structure as well </code> )          \u2013            <p>as other parameters</p> </li> <li> <code>.. note::</code>           \u2013            <p>%chk=opt.chk %nproc=26 %mem=5000MW</p> </li> </ul>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom.write_com--p-b3lypdef2svp-empiricaldispersiongd3-optmaxcycles60","title":"p B3LYP/Def2SVP EmpiricalDispersion=GD3 opt=(maxcycles=60)","text":"<p>opt  cation</p> <p>1 1 O        -0.407106382       1.443503609       0.802672557 .. so on</p>"},{"location":"reference/esta/gaussianBag/xx__input_gaussian0/#esta.gaussianBag.xx__input_gaussian0.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for:</p> <ul> <li>saddle calculations (see general folder for the implementation)</li> <li>EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</li> </ul> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/","title":"esta.gaussianBag.xx__output_gaussian_adv0","text":""},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0","title":"<code>esta.gaussianBag.xx__output_gaussian_adv0</code>","text":"<p>gauss class to handle for the gaussian16 output file</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss","title":"<code>gauss</code>","text":"<p>gauss class for the  gaussian16 output file</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get xyz from log file/output file of gaussian</p> <p>Note: all the atomic positions are stored in pos_all array; you can use it  as well</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_all_atomic_positions","title":"<code>get_all_atomic_positions()</code>","text":"<p>get all xyz from log file/output file of gaussian</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic numbers: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic numbers: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_energies","title":"<code>get_energies()</code>","text":"<p>get the energies from the gaussian log/output file</p> <p>For example: </p> <p>Zero-point correction=                           0.018555 (Hartree/Particle)  Thermal correction to Energy=                    0.018650  Thermal correction to Enthalpy=                  0.018681  Thermal correction to Gibbs Free Energy=         0.017917  Sum of electronic and zero-point Energies=          -2538.604330  Sum of electronic and thermal Energies=             -2538.604235  Sum of electronic and thermal Enthalpies=           -2538.604203  Sum of electronic and thermal Free Energies=        -2538.604968</p> <p>SCF Done:  E(UB3P86) =  -2538.62288479     A.U.</p> <p>and so on ..</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_forces","title":"<code>get_forces()</code>","text":"<p>find the forces on all atoms  max and min of all forces on atoms</p> <p>parameters:          self.filename: str          name of the gaussian log file</p>"},{"location":"reference/esta/gaussianBag/xx__output_gaussian_adv0/#esta.gaussianBag.xx__output_gaussian_adv0.gauss.get_natoms_dummy","title":"<code>get_natoms_dummy()</code>","text":"<p>get natoms if \"NAtoms\" string is not present in the  gaussian log file</p>"},{"location":"reference/esta/gaussianBag/xx_input_grrm/","title":"esta.gaussianBag.xx_input_grrm","text":""},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm","title":"<code>esta.gaussianBag.xx_input_grrm</code>","text":""},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom","title":"<code>GenerateCom</code>","text":""},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\nno of atoms: scalar\n</code></pre>"},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom.read_xyz2","title":"<code>read_xyz2(xyz2file)</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\nno of atoms: scalar\n</code></pre>"},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom.flags_grrm","title":"<code>flags_grrm(**kwargs)</code>","text":"<p>other options in GRRM code for calculation types e.g:</p> <p>Options sublink=/home/kumarsonu/bin/link_excode_allv3.1_.py Add Interaction Fragm.1=56,57,58,1 Fragm.2=59-62 1 2 Gamma=200.0 END NOFC KeepIntFiles DownDC=12</p>"},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom.write_com","title":"<code>write_com(**kwargs)</code>","text":"input: <pre><code>atomic postions\natomic labels\nno of atoms\n</code></pre> output: <pre><code>com file containing info of atomic structure\n</code></pre>"},{"location":"reference/esta/gaussianBag/xx_input_grrm/#esta.gaussianBag.xx_input_grrm.GenerateCom.write_com_2xyz","title":"<code>write_com_2xyz(xyz2file, **kwargs)</code>","text":"input: <pre><code>atomic postions\natomic labels\nno of atoms\n_________________ --&gt; all of these variable read form 1xyz file ..by \n                        calling self.read_xyz()\n\nstr: xyz file name ---2nd xyz filename correspinding to product of rxn\n</code></pre> output: <pre><code>com file containing info of atomic structure info of two atomic systems\n</code></pre>"},{"location":"reference/esta/gaussianBag/xxx__input_gaussian_TODO/","title":"esta.gaussianBag.xxx__input_gaussian_TODO","text":""},{"location":"reference/esta/gaussianBag/xxx__input_gaussian_TODO/#esta.gaussianBag.xxx__input_gaussian_TODO","title":"<code>esta.gaussianBag.xxx__input_gaussian_TODO</code>","text":""},{"location":"reference/esta/gaussianBag/xxx__input_gaussian_TODO/#esta.gaussianBag.xxx__input_gaussian_TODO.get_str_and_float","title":"<code>get_str_and_float(sf)</code>","text":"input: <pre><code>list of strings\n</code></pre> output: <pre><code>list of stings and floats; is it not intersting ..ha ha ..sk!\n</code></pre> <p>example:  o_list = ['sdata', '218', '167', '-0.0001'] t_list = [get_list_of_string_and_float(v) for v in o_list] print(t_list)</p>"},{"location":"reference/esta/gaussianBag/xxx__input_gaussian_TODO/#esta.gaussianBag.xxx__input_gaussian_TODO.get_atomic_positions","title":"<code>get_atomic_positions(filename)</code>","text":"<p>get atomic positiions and atomic labels from  gaussian com file</p>"},{"location":"reference/esta/general/","title":"esta.general","text":""},{"location":"reference/esta/general/#esta.general","title":"<code>esta.general</code>","text":"<p>general modules, functions, and classes to analysis</p>"},{"location":"reference/esta/general/aadhaar/","title":"esta.general.aadhaar","text":""},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar","title":"<code>esta.general.aadhaar</code>","text":"<p>aadhaar class is a base class to read/write and process information  related to atoms such as atoms coord, atom labels, and types, and so on!!</p> <p>It reads only xyz file (for poscar file use vaspBag crystal_latticee class)</p> <p>It writes poscar file from cell parameters and xyz file data xyz file/s  or xyz file with frozen and notfrozen atoms</p> Note <p>to attach more properites to  Aadhaar class for xyz type data     ..such as atm manipulation class ...     angles, dihedral angles, bond-distances, distance matrix, connectivity matrix,      Nearest neighbors (NN), 2NN, 3NN,     atomic radii of atoms, and other atomic properites </p> <pre><code>same has to be done to CrystalLattice class in case of POSCAR file data\n.. PBC class, atomic distances using PBC and related connectivity for local \nenvironment, ...\n</code></pre>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar","title":"<code>Aadhaar</code>","text":"<p>aadhaar class for atomic structure related information handling.</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.natom","title":"<code>natom</code>  <code>property</code>","text":"<p>get no. of atoms</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.atm_position","title":"<code>atm_position</code>  <code>property</code>","text":"<p>get atom positions</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.atm_symbol","title":"<code>atm_symbol</code>  <code>property</code>","text":"<p>get atom symbols</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.__init__","title":"<code>__init__()</code>","text":"<p>initialize the class</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_fix_atom","title":"<code>get_fix_atom(fix=None)</code>","text":"<p>return the fix atoms  with starting from 0; on input fix contains numbering starting from 1</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.xyz_as_pdf","title":"<code>xyz_as_pdf()</code>","text":"<p>get xyz data in the panda  data frame with first line  for tags for atoms, and coordinates</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.xyz_as_csv","title":"<code>xyz_as_csv(csvfile=None, savefile=None)</code>","text":"<p>get xyz data in the csv data format</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.xyz_as_csv--not-this-with-first-line-as-comment-atom-symbtag-and-x-yz","title":"..not this ...with    first line as comment (atom symbTag, and x, y,z)","text":""},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.read_xyz_tagged","title":"<code>read_xyz_tagged(xyzfile)</code>","text":"<p>read xyz file with some positions tagged as Fixed by placing <code>F</code>  in the 4<sup>th</sup> column of the xyz file</p> Parameters <p>xyzfile: str     name of xyz file, xyzfile</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions (rank 2 with shape (natoms, 3))</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels, rank 1 array of atomic labels</p> </li> <li> <code>natoms</code> (              <code>scalar</code> )          \u2013            </li> <li> <code>comment</code> (              <code>str</code> )          \u2013            <p>atom coords are in ang</p> </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.read_xyz_all","title":"<code>read_xyz_all(xyzfile)</code>","text":"<p>read xyz data in get all xyz file by reading the atomic positions and atomic labels. </p> Parameters <p>string: str     name of xyz file containgin many xyz data structures</p> <p>Returns:</p> <ul> <li> <code>array</code> (              <code>array of rank 3 with shape (nstrs, natoms, 3)</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>list</code> (              <code>a list of strings </code> )          \u2013            <p>strings/symbols for the  atomic labels</p> </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.write_xyz_all_separate","title":"<code>write_xyz_all_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_poscar","title":"<code>get_poscar(cell_parameter, pos, label, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions, and atom labels.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_poscar_selective","title":"<code>get_poscar_selective(cell_parameter, pos, label, fix_tag=None, name_outfile=None)</code>","text":"<p>create POSCAR file given the cell_parameters, atomic postions,  atom labels, and fix_tag.  Optionally the name of output POSCAR can be provided. When dealing with mutliple POSCAR file, better to provide the name of the output POSCAR file.</p> <p>Parameters:</p> <ul> <li> <code>cell_parameter</code>           \u2013            <p>lattice vectors in the form np.array([lv1, lv2, lv3])</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions</p> </li> <li> <code>label</code>           \u2013            <p>strings of atomic symbols</p> </li> <li> <code>fix_tag</code>           \u2013            <p>list of list containgin tag for atom fixing, e.g [['F','F','F'], ['T','T','T'], .... to natoms]</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output POSCAR file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>generates POSCAR file with name = name_outfile</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_xyz_file","title":"<code>get_xyz_file(atomic_position, atomic_label, fix_index=None, fix_dir=None, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels.</p> Parameters <p>atomic_position: array of rank 2 or shape of (natoms, 3)     atomic positions with shape (natoms, 3) atomic_label: str list     list of atomic labels fix_index: list  (optional)     list of atoms to be fixed with numbering from 1; e.g. ['1','2','10']     (The resulting xyz file contains F or T for after the      x y z coordinates in the same line) fix_dir : list (optional) [TODO .... this is not working properly if it not None ... testing needed .... see ]     direction of fix, e.g. xyz (all directions if used for the time being) name_outfile: str, optional     prefix for the output file</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_xyz_o","title":"<code>get_xyz_o(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file given the  atomic positions and atomic labels and energies.</p> Note <p>xyz_o with o means single file </p> <p>energy and comment are independent of each other NOW!</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_xyz_grouped","title":"<code>get_xyz_grouped(atomic_position, atomic_label, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions and atomic labels. name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are grouped together.</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_separate","title":"<code>get_all_xyz_separate(xyzfile, comment=None)</code>","text":"<p>write xyz_all data into separate xyz files</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels.</p> <p>name_outfile is the prefix for the output file Note that the similar atoms (identical symbols) are NOT grouped together.</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_in_a_file_","title":"<code>get_all_xyz_in_a_file_(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies. comment True then energy is printed in comment section. .. note::     The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_in_a_file__","title":"<code>get_all_xyz_in_a_file__(atomic_position, atomic_label, energy=None, name_outfile=None, comment=None, **extra)</code>","text":"<p>create single XYZ file for all xyz strcutures given the  atomic positions and atomic labels and energies.</p> <p>If comment is True then energy must be present!! **kwargs are added so as to pass addition arguments!!</p> <p>.. note::  The similar atoms (identical symbols) are grouped together. ?confirm THIS..TODO 19-04-2024  The dictionary extra keyword must be \"no.\", otherwise error message is emitted</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_axsf","title":"<code>get_axsf(position, symbol, lv, eigen_disp=None, factor=None, name_outfile=None)</code>","text":"<p>get axsf file given xyz data (or xyz file or POSCAR file) and displacements of displaced-atoms/moving atoms</p> Parameters: <p>xyzobject</p> <p>lv: array      lattice vectors matrix lv[3,3] with rows as lattice vectors (c-style,  opposite to Fortran-style)</p> <p>eigen_disp: array     eigen displacements vectors of shape (3*natom, natom,3)     (note sometimes all atoms are displaced and sometimes only few are displace)</p> Returns: <p>axsf file for viewing with xcryden</p> <p>.. format of axsf file</p> <p>ANIMSTEPS  2 CRYSTAL PRIMVEC 20.1192283600  0.0000000000  0.0000000000 0.0000000000 27.0000000000  0.0000000000 0.0000000000  0.0000000000 17.0000000000 PRIMCOORD   1 5  1 H   11.2498769970   13.8121424280    4.3686516620   -0.0000942577   -0.0000152115    0.0005174206 H   12.5137322430   15.0793556060    1.8688610990    0.0003968067   -0.0001103587   -0.0009433925 H   13.2963873660   13.8030528830    2.8291899960    0.0000467070    0.0000647718   -0.0006208035 H   14.1576884440   15.3238761340    2.5101912960    0.0001419676   -0.0000543467   -0.0006737093 H   13.6497403220   14.1378762940    5.3369092520   -0.0004499922   -0.0000278449    0.0006083637 PRIMCOORD   2 5  1 H   11.2355725044   13.5305891253    4.3477591403    0.0001368359   -0.0000037193    0.0015032442 H   12.3273729886   14.6920409122    1.7133173515    0.0002135816    0.0000056774   -0.0003496343 H   13.2074926046   13.5157335368    2.7144034122    0.0002043936   -0.0001109390   -0.0004939726 H   13.9830728189   15.0490029986    2.2619945638    0.0001662968   -0.0000176645   -0.0002263822 H   13.6135087175   14.0164433539    5.2070257688   -0.0003970061    0.0001379729    0.0006418720</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_in_eqlist_format","title":"<code>get_all_xyz_in_eqlist_format(atomic_position, atomic_label, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   energy, spin, zpe,  and normal mode eigenvalues are made zero in utput in *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_all_xyz_in_eqlist_format_adv","title":"<code>get_all_xyz_in_eqlist_format_adv(atomic_position, atomic_label, energy, name_outfile=None, comment=None)</code>","text":"<p>create single *EQ_list.log file from all xyz strcutures given the  atomic positions and atomic labels. Note that the similar atoms (identical symbols) are grouped together.</p> <p>.. note::   spin, zpe,  and normal mode eigenvalues are made zero in outout *eq_list.log file; need to check if grrm   code accepts this or not?</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_xyz_frozen","title":"<code>get_xyz_frozen(frozen_tuple, not_frozan_tuple, name_outfile=None)</code>","text":"<p>get xyz data with frozan and not frozen atoms in the output file. </p> <p>Parameters:</p> <ul> <li> <code>frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code>               (<code>tuple</code>)           \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>name_outfile</code>           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>name of xyz_frozen_file : str </code>           \u2013            <p>create 'xyz_FROZEN' type file containing information of frozen and not frozen atoms etc</p> </li> </ul>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_xyz_oniom_file","title":"<code>get_xyz_oniom_file(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None)</code>","text":"<p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3   more to do later!!</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_com_oniom","title":"<code>get_com_oniom(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile, kwargss, l_oniom_gaussian=None)</code>","text":"<p>input oniom file generation</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> Note <p>move these methods to grrmBag for clarity   </p> Note <p>update 2024: now gaussian:ONIOM+PM6 type file for GRRM can be genereated/ but remove the lines afer option part and add one line space in end of  *com file</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_com_oniom_min","title":"<code>get_com_oniom_min(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>input oniom file for MIN calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_com_oniom_restruct","title":"<code>get_com_oniom_restruct(atomic_position, atomic_label, iatm_high_level, link_lowhigh_level_atoms, name_infile=None, name_outfile=None, **kwargs)</code>","text":"<p>input oniom for ReStruct calculations</p> <p>create XYZ file from the atomic positions, atomic labels, and integers representing atoms in  the high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_com_oniom_frozen","title":"<code>get_com_oniom_frozen(frozen_tuple, not_frozan_tuple, iatm_high_level, link_lowhigh_level_atoms, name_outfile=None, **kwargs)</code>","text":"<p>create oniom input file with frozen atoms for MIN calculations (default)</p> <p>The high level layer (iatm_high_level) for Oniom software. Atoms in high level layer are indexed with integers starting from 1, not from 0.</p> <p>.. note::  link_lowhigh_level_atoms is optionalm but it should have entries like   this [[4,3],[15,3],[20,3] ] \u2192 meaning that low levels atoms are 4,15,20 \u2192 link to   high level atom 3 </p> <p>other input files (6 in number; total of 7 files needed to execute the oniom calculations)   needed should be \u2192 MoH.inp,  MoL.inp,  ReL.inp, OniomGRRM, Ownoniom.tcsh, Ownoniom.out (check the names again sk!!)</p> <p>.. note::  move these methods to grrmBag for clarity</p>"},{"location":"reference/esta/general/aadhaar/#esta.general.aadhaar.Aadhaar.get_fix_indices","title":"<code>get_fix_indices(ref_atm_id=None, direction=None, distance=None, exclude_type=None)</code>","text":"<p>return atom indices with are to be fixed </p> <p>ref_atm_id MUST be included in the fix indices.</p> Parametes <p>ref_atm_id: int     reference atom wrt to which atoms are to be selected direction: str     direction alogn which atoms are to be selected distance: float     distance range along the <code>direction</code>. For example, if it is <code>yz</code>, then      some distance along y and z direction is selected (all vals of x allowed) to      select the atoms exclude_type: list of str     atom symbols to be excluded from the selection</p> <p>Returns:</p> <ul> <li> <code>close_atoms_</code> (              <code>list of atoms indices</code> )          \u2013            <p>list of all atoms close to ref atom along a direction</p> </li> </ul> Note <pre><code>ref_atm_id = 54\ndirection = 'y'\ndistance= 1 # ang (+1 and -1 Ang along y direction)\nexclude_type = None # type of atoms to exclude; eg. ['B', 'H'] 2 types of atoms\n</code></pre>"},{"location":"reference/esta/general/add_const_to_dict/","title":"esta.general.add_const_to_dict","text":""},{"location":"reference/esta/general/add_const_to_dict/#esta.general.add_const_to_dict","title":"<code>esta.general.add_const_to_dict</code>","text":""},{"location":"reference/esta/general/add_vacuum_to_unit_cell/","title":"esta.general.add_vacuum_to_unit_cell","text":""},{"location":"reference/esta/general/add_vacuum_to_unit_cell/#esta.general.add_vacuum_to_unit_cell","title":"<code>esta.general.add_vacuum_to_unit_cell</code>","text":""},{"location":"reference/esta/general/add_vacuum_to_unit_cell/#esta.general.add_vacuum_to_unit_cell.add_vacuum","title":"<code>add_vacuum(LV1, LV2, LV3, vacuum)</code>","text":"<p>Add vacuum layer along LV3</p> Parameters <p>LV1 : array     lattice vec 1 LV2 : array     lattice vec 2 LV3 : array     lattice vec 3 vacuum : float     The thickness of the vacuum in Ang</p> <p>Returns:</p> <ul> <li> <code>uc</code> (              <code>array of shape(3,3)</code> )          \u2013            <p>unit cell with vaccumm along the uc[2] vector</p> </li> <li> <code>.. note:: </code>           \u2013            <ul> <li>in future LV1,LV2,LV3 may be taekn in the form of a cell matrix with each row representing LV1, LV2, and LV3    </li> <li>vacuum in all directions can be added ... just pass the axis(LV1..2..3)  in a loop to this method</li> </ul> </li> </ul>"},{"location":"reference/esta/general/adjust_vacuum/","title":"esta.general.adjust_vacuum","text":""},{"location":"reference/esta/general/adjust_vacuum/#esta.general.adjust_vacuum","title":"<code>esta.general.adjust_vacuum</code>","text":""},{"location":"reference/esta/general/adjust_vacuum/#esta.general.adjust_vacuum.adjust_vacuum","title":"<code>adjust_vacuum(filename, vac_x_new, vac_y_new)</code>","text":"<p>adjust vacuum in rectangular unit cell of POSCAR file  x and y directions are adjusted and z direction as a  periodic direction </p> <p>so far being used for bnd at diff agle..sk!!</p> <p>.. note::  to be generalized where it can be used for adjusting or adding   vaccuum in any direction or set of directions</p>"},{"location":"reference/esta/general/affine/","title":"esta.general.affine","text":""},{"location":"reference/esta/general/affine/#esta.general.affine","title":"<code>esta.general.affine</code>","text":"<p>Linear algebra operations and helpers.</p> <p>Taken from the link (scikit-ued: https://github.com/LaurentRDC/scikit-ued/)</p> <p>Inspired by Christoph Gohlke's transformation.py (link: http://www.lfd.uci.edu/~gohlke/ )</p>"},{"location":"reference/esta/general/affine/#esta.general.affine.affine_map","title":"<code>affine_map(array)</code>","text":"<p>Extends 3x3 transform matrices to 4x4, i.e. general affine transforms.</p> <p>Parameters:</p> <ul> <li> <code>array</code>               (<code>ndarray, shape {(3,3), (4,4)}</code>)           \u2013            <p>Transformation matrix. If shape = (4,4), returned intact.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>extended</code> (              <code>(ndarray, shape(4, 4))</code> )          \u2013            <p>Extended array</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.affine_map--raises","title":"Raises","text":"<p>ValueError : If the transformation matrix is neither 3x3 or 4x4</p>"},{"location":"reference/esta/general/affine/#esta.general.affine.transform","title":"<code>transform(matrix, array)</code>","text":"<pre><code>Applies a matrix transform on an array.\n</code></pre> <p>Parameters:</p> <ul> <li> <code>matrix</code>               (<code>ndarray, shape {(3,3), (4,4)}</code>)           \u2013            <p>Transformation matrix.</p> </li> <li> <code>array</code>               (<code>ndarray, shape {(3,), (3,3), (4,4)}</code>)           \u2013            <p>Array to be transformed. Either a 1x3 vector, or a transformation matrix in 3x3 or 4x4 shape.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>transformed</code> (              <code>ndarray</code> )          \u2013            <p>Transformed array, either a 1D vector or a 4x4 transformation matrix</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.transform--raises","title":"Raises","text":"<p>ValueError : If the transformation matrix is neither 3x3 or 4x4</p>"},{"location":"reference/esta/general/affine/#esta.general.affine.translation_matrix","title":"<code>translation_matrix(direction)</code>","text":"<p>Return matrix to translate by direction vector.</p> <p>Parameters:</p> <ul> <li> <code>direction</code>               (<code>(array_like, shape(3))</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>translation</code> (              <code>`~numpy.ndarray`, shape (4,4)</code> )          \u2013            <p>4x4 translation matrix.</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.change_of_basis","title":"<code>change_of_basis(basis1, basis2=(e1, e2, e3))</code>","text":"<p>Returns the matrix that goes from one basis to the other.</p> <p>Parameters:</p> <ul> <li> <code>basis1</code>               (<code>list of array_like, shape (3,)</code>)           \u2013            <pre><code>First basis\n</code></pre> </li> <li> <code>basis2</code>               (<code>list of array_like, shape (3,)</code>, default:                   <code>(e1, e2, e3)</code> )           \u2013            <pre><code>Second basis. By default, this is the standard basis\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>cob</code> (              <code>`~numpy.ndarray`, shape (3,3)</code> )          \u2013            <p>Change-of-basis matrix that, applied to <code>basis</code>, will return <code>basis2</code>.</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.is_basis","title":"<code>is_basis(basis)</code>","text":"<p>Returns true if the set of vectors forms a basis. This is done by checking whether basis vectors are independent via an eigenvalue calculation.</p> <p>Parameters:</p> <ul> <li> <code>basis</code>               (<code>list of array-like, shape (3,)</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>out</code> (              <code>bool</code> )          \u2013            <p>Whether or not the basis is valid.</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.is_rotation_matrix","title":"<code>is_rotation_matrix(matrix)</code>","text":"<p>Checks whether a matrix is orthogonal with unit determinant (1 or -1), properties of rotation matrices.</p> <p>Parameters:</p> <ul> <li> <code>matrix</code>               (<code>ndarray, shape {(3,3), (4,4)}</code>)           \u2013            <p>Rotation matrix candidate. If (4,4) matrix is provided, only the top-left block matrix of (3,) is checked</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>result</code> (              <code>bool</code> )          \u2013            <p>If True, input could be a rotation matrix.</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.rotation_matrix","title":"<code>rotation_matrix(angle, axis=(0, 0, 1))</code>","text":"<p>Return matrix to rotate about axis defined by direction around the origin [0,0,0]. To combine rotation and translations, see http://www.euclideanspace.com/maths/geometry/affine/matrix4x4/index.htm</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <pre><code>Rotation angle [rad]\n</code></pre> </li> <li> <code>axis</code>               (<code>array-like of length 3</code>, default:                   <code>(0, 0, 1)</code> )           \u2013            <pre><code>Axis about which to rotate\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>matrix</code> (              <code>`~numpy.ndarray`, shape (3,3)</code> )          \u2013            <p>Rotation matrix.</p> </li> </ul> See also <p>translation_rotation_matrix</p>"},{"location":"reference/esta/general/affine/#esta.general.affine.translation_rotation_matrix","title":"<code>translation_rotation_matrix(angle, axis, translation)</code>","text":"<p>Returns a 4x4 matrix that includes a rotation and a translation.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <pre><code>Rotation angle [rad]\n</code></pre> </li> <li> <code>axis</code>               (<code>array-like of length 3</code>)           \u2013            <pre><code>Axis about which to rotate\n</code></pre> </li> <li> <code>translation</code>               (<code>(array_like, shape(3))</code>)           \u2013            <pre><code>Translation vector\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>matrix</code> (              <code>`~numpy.ndarray`, shape (4,4)</code> )          \u2013            <p>Affine transform matrix.</p> </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.change_basis_mesh","title":"<code>change_basis_mesh(xx, yy, zz, basis1, basis2)</code>","text":"<p>Changes the basis of meshgrid arrays.</p> <p>Parameters:</p> <ul> <li> <code>xx</code>               (<code>ndarrays</code>)           \u2013            <p>Arrays of equal shape, such as produced by numpy.meshgrid.</p> </li> <li> <code>yy</code>               (<code>ndarrays</code>)           \u2013            <p>Arrays of equal shape, such as produced by numpy.meshgrid.</p> </li> <li> <code>zz</code>               (<code>ndarrays</code>)           \u2013            <p>Arrays of equal shape, such as produced by numpy.meshgrid.</p> </li> <li> <code>basis1</code>               (<code>list of ndarrays, shape(3,)</code>)           \u2013            <p>Basis of the mesh</p> </li> <li> <code>basis2</code>               (<code>list of ndarrays, shape(3,)</code>)           \u2013            <p>Basis in which to express the mesh</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>XX, YY, ZZ : `~numpy.ndarray`</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/affine/#esta.general.affine.minimum_image_distance","title":"<code>minimum_image_distance(xx, yy, zz, lattice)</code>","text":"<p>Returns a periodic array according to the minimum image convention.</p> <p>Parameters:</p> <ul> <li> <code>xx</code>               (<code>ndarrays</code>)           \u2013            <pre><code>Arrays of equal shape, such as produced by numpy.meshgrid.\n</code></pre> </li> <li> <code>yy</code>               (<code>ndarrays</code>)           \u2013            <pre><code>Arrays of equal shape, such as produced by numpy.meshgrid.\n</code></pre> </li> <li> <code>zz</code>               (<code>ndarrays</code>)           \u2013            <pre><code>Arrays of equal shape, such as produced by numpy.meshgrid.\n</code></pre> </li> <li> <code>lattice</code>               (<code>list of ndarrays, shape(3,)</code>)           \u2013            <pre><code>Basis of the mesh\n</code></pre> </li> </ul> <p>Returns:</p> <ul> <li> <code>r</code> (              <code>`~numpy.ndarray`</code> )          \u2013            <p>Minimum image distance over the lattice</p> </li> </ul>"},{"location":"reference/esta/general/angle/","title":"esta.general.angle","text":""},{"location":"reference/esta/general/angle/#esta.general.angle","title":"<code>esta.general.angle</code>","text":""},{"location":"reference/esta/general/angle/#esta.general.angle.unit_vector","title":"<code>unit_vector(vector)</code>","text":"<p>Returns the unit vector of the vector.</p>"},{"location":"reference/esta/general/angle/#esta.general.angle.angle_between","title":"<code>angle_between(v1, v2)</code>","text":"<p>Returns the angle in radians between vectors 'v1' and 'v2'::</p> <p>angle_between((1, 0, 0), (0, 1, 0)) 1.5707963267948966 angle_between((1, 0, 0), (1, 0, 0)) 0.0 angle_between((1, 0, 0), (-1, 0, 0)) 3.141592653589793</p>"},{"location":"reference/esta/general/angle/#esta.general.angle.angle_between_atom_pairs","title":"<code>angle_between_atom_pairs(atm_pair1, atm_pair2, filename)</code>","text":"<p>find angle between vectors corresponding to atom-pairs1 and atom-pair2.</p> <p>e.g atom-pair 1,3 and atoms-pairs 5,6</p> <p>atm_pair_vector1: v1 is vector from atom 1 to 3 : 1----------&gt;3 atm_pair_vector2: v2 is vector from atom 5 6o 6 : 5----------&gt;6</p> <p>atm_pair1 = [1,3] atm_pair2 = [5,6] from a filename (xyz file) with numbering of atoms from 1</p> Parameters: <p>atm_pairs1: list     list of atom-indices, e.g [1,3] atm_pairs2: list     list of atom-indices, e.g [5,6] filename: str     name of the xyz file</p> Returns: <p>ang: scalar     angle in degree between vectors formed by the atm_pairs1 and atm_pairs2</p>"},{"location":"reference/esta/general/angle/#esta.general.angle.angle_between_atoms_","title":"<code>angle_between_atoms_(atm1_index, atm2_index, atm3_index, filename)</code>","text":"<p>find angle between three atoms present in the xyz file.</p> <p>If there are many angle to be calculated then pass a list of list of atomic indices ... TODO                                  .. easy to do it .. just loop over the list of atom indices </p> Parameters: <p>atm1_index: integer     index for the atom1, numbering of atom from 1 atm2_index: integer     index for the atom2, numbering of atom from 1 atm3_index: integer     index for the atom3, numbering of atom from 1 filename: str     name of the xyz file</p> Returns: <p>ang: scalar     angle in degree between atoms from atom2 to atom1, and atom2 to atom3</p>"},{"location":"reference/esta/general/angle/#esta.general.angle.angle_between_atoms","title":"<code>angle_between_atoms(atms_indices_list, filename=None)</code>","text":"<p>find angle between list (or list of list) containing three atoms indices present in the xyz file.</p> Parameters: <p>atms_indices_list: list     list (or list of list) of three atoms indices (numbering from 1) present  filename: str     name of the xyz file</p> Returns: <p>ang: list of scalar     list of angles in degrees label: list     list of atomic symbols</p>"},{"location":"reference/esta/general/angle/#esta.general.angle.dihedral_between_atoms","title":"<code>dihedral_between_atoms(atms_indices_list, filename=None)</code>","text":"<p>find the dihedral angle between four pts p[0:4] or list of 4 pts</p> <p>.. note::      need testing .. whether to choose dihedral1 or dihedral3, initially taking      dihedral1 only</p> Parameters: <p>atms_indices_list: list     list (or list of list) of three atoms indices (numbering from 1) present  filename: str (optional)     name of the xyz file</p> Returns: <p>ang: list of scalar     list of angles in degrees label: list      list of atomic symbols</p>"},{"location":"reference/esta/general/atomic_Distance_Density/","title":"esta.general.atomic_Distance_Density","text":""},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density","title":"<code>esta.general.atomic_Distance_Density</code>","text":""},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density","title":"<code>atom_distance_density</code>","text":"<p>calculate the atomic distance density of bonds present between atoms  in the POSCAR file</p> <p>Parameters:</p> <ul> <li> <code>just</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atomic distance density: array </code>           \u2013            <p>array for the atomic distance density. </p> </li> <li> <code>distance array: array </code>           \u2013            <p>array range over which the bond lengths are possible.</p> </li> <li> <code>.. note:: </code>           \u2013            </li> </ul> See Also <p>add other related things here.</p> Notes <p>Examples:</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density--a-gaussian-distribution-function-is-used-for-the-delta-function","title":"A Gaussian distribution function is used for the delta function:","text":"<p>The probability density for the Gaussian distribution is</p> <p>p(x) = \frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }} e^{ - \frac{ (x - \\mu)^2 } {2 \\sigma^2} },</p> <p>where \\mu is the mean and \\sigma the standard deviation.  The square of the standard deviation, \\sigma^2, is called the variance.</p> <p>The function has its peak at the mean, and its \u201cspread\u201d increases with  the standard deviation (the function reaches 0.607 times its maximum  at x + \\sigma and x - \\sigma [2]). This implies that numpy.random.normal  is more likely to return samples lying close to the mean, rather than  those far away.</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density.distance_array","title":"<code>distance_array(natom_type, tau_cartesian)</code>","text":"<p>calculate the distance array among different atoms</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density.distance_array1","title":"<code>distance_array1(natom_type, atm_type, tau_cartesian)</code>","text":"<p>calculate the distance array among different atoms</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density.remove_duplicate","title":"<code>remove_duplicate(list_entries)</code>","text":"<p>remove duplicates ??</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density.gaussian_distribution","title":"<code>gaussian_distribution(x0, x, sigma)</code>","text":"<p>generate a gaussian dist for data along 1D axis</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.atom_distance_density.dos","title":"<code>dos(array_distribution, sigma, dgrid_min=None, dgrid_max=None, normalise=False)</code>","text":"<p>Now calculation of atomic distance density for given sigma of  gauss distribution</p>"},{"location":"reference/esta/general/atomic_Distance_Density/#esta.general.atomic_Distance_Density.get_neighbors","title":"<code>get_neighbors(label, tau_cartesian, n_pts, n_neighbors)</code>","text":"<p>get all neighbors of N points (n_pts= atomic positions) along with distance </p> input: <pre><code>list: label: label of pts/atoms \narray: tau_cartesian, atomic-positions/pts in cartesian coordinates\ninteger: n_pts, no. of pts/atomic-coordinate whose neighbors are \n    to be found\ninteger: n_neighbors, integer for how many eneighbours\n</code></pre> output: <pre><code>arrray: ind, array of indices of neighbors including self \narray: dist, array of distances from neighbors incuding self distance (self \n    distance is zero, as we know)\n</code></pre>"},{"location":"reference/esta/general/average/","title":"esta.general.average","text":""},{"location":"reference/esta/general/average/#esta.general.average","title":"<code>esta.general.average</code>","text":"<p>A script which averages a CHGCAR or LOCPOT file in one direction to make a 1D curve. User must specify filename and direction on command line. Depends on ase</p>"},{"location":"reference/esta/general/b/","title":"esta.general.b","text":""},{"location":"reference/esta/general/b/#esta.general.b","title":"<code>esta.general.b</code>","text":"<p>convert poscar file to xyz file</p>"},{"location":"reference/esta/general/b/#esta.general.b.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell=None)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum/","title":"esta.general.bending_acb_centroid_vacuum","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum/#esta.general.bending_acb_centroid_vacuum","title":"<code>esta.general.bending_acb_centroid_vacuum</code>","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum/#esta.general.bending_acb_centroid_vacuum.get_bent_structure","title":"<code>get_bent_structure(angle_degree, filee=None)</code>","text":"<p>get a bent POSCAR structure from the POSCAR file present in the  current directory.</p> <p>Parameters:</p> <ul> <li> <code>angle_degree</code>               (<code>scalar</code>)           \u2013            <p>angle for bending in degree</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filename</code> (              <code>str</code> )          \u2013            <p>filename containg data for bent str in POSCAR format</p> </li> <li> <code>.. note::</code>           \u2013            <p>read related information etc from other folder ..for bending</p> </li> <li> <code>.. warning::</code>           \u2013            <p>MOST important: perfect periodicity MUST be there for atomic postions .... see  if all the attoms are repeated in all dire using vesta ..... if  some are repeated and others are not .. then that means that bending will lead to wrong  bent poscar files .....wasted lot of time findfing this out ..SK!! ... add vac in a dire in 150 and 180 deg ..</p> </li> <li> <code>Date</code> (              <code>(2017, 2022)</code> )          \u2013            </li> <li> <code>Author</code> (              <code>sonu kumar</code> )          \u2013            </li> <li> <code>Email</code> (              <code>physics @ com</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum/#esta.general.bending_acb_centroid_vacuum.abc2acb_axis_n_rotation","title":"<code>abc2acb_axis_n_rotation(filename, ang_deg)</code>","text":"<ol> <li> <p>change abc axis \u2192 acb axis  so that periodic axis b is along z-axis (atm position are changed accordingly)</p> </li> <li> <p>checking if -ve coordinates along x and y axis are present or not?     then shift aloms along these axis accordingly ... not done .. do it if -ve      values are there .</p> </li> <li> <ul> <li>finding centroid of x and y coordinates : x_av, y_av</li> <li>shifting of atomic positions in the plane st atoms are close to origin: positions_shiftd</li> <li>further shifting of atoms so that -ve coordinates are removed by adding these: x_add, y_add</li> </ul> </li> <li> <p>add vacuum</p> </li> </ol>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_/","title":"esta.general.bending_acb_centroid_vacuum_","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_/#esta.general.bending_acb_centroid_vacuum_","title":"<code>esta.general.bending_acb_centroid_vacuum_</code>","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_/#esta.general.bending_acb_centroid_vacuum_.get_bent_structure","title":"<code>get_bent_structure(angle_degree, filee=None)</code>","text":"<p>get a bent POSCAR structure from the POSCAR file present in the  current directory.</p> <p>Parameters:</p> <ul> <li> <code>angle_degree</code>               (<code>scalar</code>)           \u2013            <p>angle for bending in degree</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filename</code> (              <code>str</code> )          \u2013            <p>filename containg data for bent str in POSCAR format</p> </li> <li> <code>..note::</code>           \u2013            <p>read related information etc from other folder ..for bending</p> </li> <li> <code>..warning::</code>           \u2013            <p>MOST important: perfect periodicity MUST be there for atomic postions .... see  if all the attoms are repeated in all dire using vesta ..... if  some are repeated and others are not .. then that means that bending will lead to wrong  bent poscar files .....wasted lot of time findfing this out ..SK!! ... add vac in a dire in 150 and 180 deg ..</p> </li> <li> <code>Date</code> (              <code>(2017, 2022)</code> )          \u2013            </li> <li> <code>Author</code> (              <code>sonu kumar</code> )          \u2013            </li> <li> <code>Email</code> (              <code>physics @ com</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_/#esta.general.bending_acb_centroid_vacuum_.abc2acb_axis_n_rotation","title":"<code>abc2acb_axis_n_rotation(filename, ang_deg)</code>","text":"<ol> <li> <p>change abc axis \u2192 acb axis  so that periodic axis b is along z-axis (atm position are changed accordingly)</p> </li> <li> <p>checking if -ve coordinates along x and y axis are present or not?     then shift aloms along these axis accordingly ... not done .. do it if -ve      values are there .</p> </li> <li> <ul> <li>finding centroid of x and y coordinates : x_av, y_av</li> <li>shifting of atomic positions in the plane st atoms are close to origin: positions_shiftd</li> <li>further shifting of atoms so that -ve coordinates are removed by adding these: x_add, y_add</li> </ul> </li> <li> <p>add vacuum</p> </li> </ol>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv1/","title":"esta.general.bending_acb_centroid_vacuum_adv1","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv1/#esta.general.bending_acb_centroid_vacuum_adv1","title":"<code>esta.general.bending_acb_centroid_vacuum_adv1</code>","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv1/#esta.general.bending_acb_centroid_vacuum_adv1.get_bent_structure","title":"<code>get_bent_structure(angle_degree, ldist_reduce=None, dist_reduce=None, filee=None)</code>","text":"<p>get a bent POSCAR structure from the POSCAR file present in the  current directory.</p> <p>Parameters:</p> <ul> <li> <code>angle_degree</code>               (<code>scalar</code>)           \u2013            <p>angle for bending in degree</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filename</code> (              <code>str</code> )          \u2013            <p>filename containg data for bent str in POSCAR format</p> </li> <li> <code>.. note::</code>           \u2013            <p>read related information etc from other folder ..for bending</p> </li> <li> <code>.. warning::</code>           \u2013            <p>MOST important: perfect periodicity MUST be there for atomic postions .... see  if all the attoms are repeated in all dire using vesta ..... if  some are repeated and others are not .. then that means that bending will lead to wrong  bent poscar files ..... wasted lot of time findfing this out ..SK!! ...     add vac in a dire in 150 and 180 deg  ..</p> <p>.. warning:: there are other points to be taken care duirng the bending ... see the notes in esta_theory dir </p> </li> <li> <code>Author</code> (              <code>sonu kumar</code> )          \u2013            </li> <li> <code>Email</code> (              <code>physics @ com</code> )          \u2013            </li> <li> <code>Date</code> (              <code>2022</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv1/#esta.general.bending_acb_centroid_vacuum_adv1.abc2acb_axis_n_rotation","title":"<code>abc2acb_axis_n_rotation(filename, ang_deg)</code>","text":"<ol> <li> <p>change abc axis \u2192 acb axis  so that periodic axis b is along z-axis (atm position are changed accordingly)</p> </li> <li> <p>checking if -ve coordinates along x and y axis are present or not?     then shift aloms along these axis accordingly ... not done .. do it if -ve      values are there .</p> </li> <li> <ul> <li>finding centroid of x and y coordinates : x_av, y_av</li> <li>shifting of atomic positions in the plane st atoms are close to origin: positions_shiftd</li> <li>further shifting of atoms so that -ve coordinates are removed by adding these: x_add, y_add</li> </ul> </li> <li> <p>add vacuum</p> </li> </ol>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv2/","title":"esta.general.bending_acb_centroid_vacuum_adv2","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv2/#esta.general.bending_acb_centroid_vacuum_adv2","title":"<code>esta.general.bending_acb_centroid_vacuum_adv2</code>","text":""},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv2/#esta.general.bending_acb_centroid_vacuum_adv2.get_bent_structure","title":"<code>get_bent_structure(angle_degree, lmultilayer=False, ldist_reduce=None, dist_reduce=None, filee=None)</code>","text":"<p>get a bent POSCAR structure from the POSCAR file present in the  current directory.</p> <p>Parameters:</p> <ul> <li> <code>angle_degree</code>               (<code>scalar</code>)           \u2013            <p>angle for bending in degree</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filename</code> (              <code>str</code> )          \u2013            <p>filename containg data for bent str in POSCAR format</p> </li> <li> <code>.. note::</code>           \u2013            <p>read related information etc from other folder ..for bending</p> </li> <li> <code>.. warning::</code>           \u2013            <p>MOST important: perfect periodicity MUST be there for atomic postions .... see  if all the attoms are repeated in all dire using vesta ..... if  some are repeated and others are not .. then that means that bending will lead to wrong  bent poscar files ..... wasted lot of time findfing this out ..SK!! ...     add vac in a dire in 150 and 180 deg  ..</p> <p>.. warning:: there are other points to be taken care duirng the bending ... see the notes in esta_theory dir </p> </li> <li> <code>Author</code> (              <code>sonu kumar</code> )          \u2013            </li> <li> <code>Email</code> (              <code>physics @ com</code> )          \u2013            </li> <li> <code>Date</code> (              <code>2022</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/bending_acb_centroid_vacuum_adv2/#esta.general.bending_acb_centroid_vacuum_adv2.abc2acb_axis_n_rotation","title":"<code>abc2acb_axis_n_rotation(filename, ang_deg)</code>","text":"<ol> <li> <p>change abc axis \u2192 acb axis  so that periodic axis b is along z-axis (atm position are changed accordingly)</p> </li> <li> <p>checking if -ve coordinates along x and y axis are present or not?     then shift aloms along these axis accordingly ... not done .. do it if -ve      values are there .</p> </li> <li> <ul> <li>finding centroid of x and y coordinates : x_av, y_av</li> <li>shifting of atomic positions in the plane st atoms are close to origin: positions_shiftd</li> <li>further shifting of atoms so that -ve coordinates are removed by adding these: x_add, y_add</li> </ul> </li> <li> <p>add vacuum</p> </li> </ol>"},{"location":"reference/esta/general/bending_nanoribbon/","title":"esta.general.bending_nanoribbon","text":""},{"location":"reference/esta/general/bending_nanoribbon/#esta.general.bending_nanoribbon","title":"<code>esta.general.bending_nanoribbon</code>","text":""},{"location":"reference/esta/general/bending_nanoribbon/#esta.general.bending_nanoribbon.get_bent_structure","title":"<code>get_bent_structure(angle_degree)</code>","text":"<p>get a bent POSCAR structure from the POSCAR file present in the  current directory.</p> <p>Parameters:</p> <ul> <li> <code>angle_degree</code>               (<code>scalar</code>)           \u2013            <p>angle for bending in degree</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>filename</code> (              <code>str</code> )          \u2013            <p>filename containg data for bent str in POSCAR format</p> </li> <li> <code>.. note::</code>           \u2013            <p>read related information etc from other folder ..for bending</p> </li> <li> <code>.. warning::</code>           \u2013            <p>MOST important: perfect periodicity MUST be there for atomic postions .... see  if all the attoms are repeated in all dire using vesta ..... if  some are repeated and others are not .. then that means that bending will lead to wrong  bent poscar files .....wasted lot of time findfing this out ..SK!! ... add vac in a dire in 150 and 180 deg ..</p> </li> <li> <code>Date</code> (              <code>2020</code> )          \u2013            </li> <li> <code>Author</code> (              <code>sonu kumar</code> )          \u2013            </li> <li> <code>Email</code> (              <code>physics @ com</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/boltzmann/","title":"esta.general.boltzmann","text":""},{"location":"reference/esta/general/boltzmann/#esta.general.boltzmann","title":"<code>esta.general.boltzmann</code>","text":"<p>Find Boltzman distribution of the states based on their energies</p>"},{"location":"reference/esta/general/boltzmann/#esta.general.boltzmann.boltzmann_dist_","title":"<code>boltzmann_dist_(energies, temp=None)</code>","text":"<p>energies in kcal mol-1 temp in K; if none then room temp = 298 K</p>"},{"location":"reference/esta/general/boltzmann/#esta.general.boltzmann.boltzmann_dist","title":"<code>boltzmann_dist(energies, temp=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>energies</code>               (<code>array</code>)           \u2013            <p>energis in kjmol-1</p> </li> <li> <code>temp</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>temperature in K Default values is room temp = 298 K</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>conc</code> (              <code>array</code> )          \u2013            <p>concentration or distribution of energy states </p> </li> <li> <code>.. note:: </code>           \u2013            <p>units conversion from JK-1 to kcal mol-1 for the 1/k factor in exponetial: </p> <p>(1) JK-1 \u2192 (1/1000)  KJ K-1 \u2192 (1/1000 * avogadro_number) kJ K-1 mol-1                                  cf.kb/1000 * 1/cf.calorie2joule * cf.N_A \u2190 kcal mol-1</p> </li> </ul>"},{"location":"reference/esta/general/boltzmann/#esta.general.boltzmann.boltzmann_factor","title":"<code>boltzmann_factor(energies, temp=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>energies</code>               (<code>array</code>)           \u2013            <p>energis in kjmol-1</p> </li> <li> <code>temp</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>temperature in K Default values is room temp = 298 K</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>conc</code> (              <code>array</code> )          \u2013            <p>boltzmann factor from the boltzmann distribution </p> </li> <li> <code>.. note:: </code>           \u2013            <p>units conversion from JK-1 to kcal mol-1 for the 1/k factor in exponetial: </p> <p>(1) JK-1 \u2192 (1/1000)  KJ K-1 \u2192 (1/1000 * avogadro_number) kJ K-1 mol-1                                  cf.kb/1000 * 1/cf.calorie2joule * cf.N_A \u2190 kcal mol-1</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/","title":"esta.general.calculate_rmsd","text":""},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd","title":"<code>esta.general.calculate_rmsd</code>","text":""},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.ReorderCallable","title":"<code>ReorderCallable</code>","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.ReorderCallable.__call__","title":"<code>__call__(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Protocol for a reorder callable function</p> <p>Return:     ndarray dtype=int  # Array of indices</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.RmsdCallable","title":"<code>RmsdCallable</code>","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.RmsdCallable.__call__","title":"<code>__call__(P: ndarray, Q: ndarray, **kwargs: Any) -&gt; float</code>","text":"<p>Protocol for a rotation callable function</p> <p>return:     RMSD after rotation</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.str_atom","title":"<code>str_atom(atom: int) -&gt; str</code>","text":"<p>Convert atom type from integer to string</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.int_atom","title":"<code>int_atom(atom: str) -&gt; int</code>","text":"<p>Convert atom type from string to integer</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.rmsd","title":"<code>rmsd(P: ndarray, Q: ndarray, **kwargs) -&gt; float</code>","text":"<p>Calculate Root-mean-square deviation from two sets of vectors V and W.</p> <p>Parameters:</p> <ul> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>Root-mean-square deviation between the two vectors</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_rmsd","title":"<code>kabsch_rmsd(P: ndarray, Q: ndarray, W: Optional[ndarray] = None, translate: bool = False, **kwargs: Any) -&gt; float</code>","text":"<p>Rotate matrix P unto Q using Kabsch algorithm and calculate the RMSD. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> <li> <code>translate</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use centroids to translate vector P and Q unto each other.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>root-mean squared deviation</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_rotate","title":"<code>kabsch_rotate(P: ndarray, Q: ndarray) -&gt; ndarray</code>","text":"<p>Rotate matrix P unto matrix Q using Kabsch algorithm.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_fit","title":"<code>kabsch_fit(P: ndarray, Q: ndarray, W: Optional[ndarray] = None) -&gt; ndarray</code>","text":"<p>Rotate and translate matrix P unto matrix Q using Kabsch algorithm. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated and translated.</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch","title":"<code>kabsch(P: ndarray, Q: ndarray) -&gt; ndarray</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q, centered around the centroid. Each vector set is represented as an NxD matrix, where D is the the dimension of the space. The algorithm works in three steps: - a centroid translation of P and Q (assumed done before this function   call) - the computation of a covariance matrix C - computation of the optimal rotation matrix U For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_weighted","title":"<code>kabsch_weighted(P: ndarray, Q: ndarray, W: Optional[ndarray] = None) -&gt; Tuple[ndarray, ndarray, float]</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q. Each vector set is represented as an NxD matrix, where D is the dimension of the space. An optional vector of weights W may be provided.</p> <p>Note that this algorithm does not require that P and Q have already been overlayed by a centroid translation.</p> <p>The function returns the rotation matrix U, translation vector V, and RMS deviation between Q and P', where P' is:</p> <pre><code>P' = P * U + V\n</code></pre> <p>For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> <li> <code>V</code> (              <code>vector</code> )          \u2013            <p>Translation vector (D)</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>Root mean squared deviation between P and Q</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_weighted_fit","title":"<code>kabsch_weighted_fit(P: ndarray, Q: ndarray, W: Optional[ndarray] = None, return_rmsd: bool = False) -&gt; Tuple[ndarray, Optional[float]]</code>","text":"<p>Fit P to Q with optional weights W. Also returns the RMSD of the fit if return_rmsd=True.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>ndarray</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>ndarray</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>Optional[ndarray]</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points</p> </li> <li> <code>rmsd</code>               (<code>Bool</code>)           \u2013            <p>If True, rmsd is returned as well as the fitted coordinates.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P'   : array</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>if the function is called with rmsd=True</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.kabsch_weighted_rmsd","title":"<code>kabsch_weighted_rmsd(P: ndarray, Q: ndarray, W: Optional[ndarray] = None) -&gt; float</code>","text":"<p>Calculate the RMSD between P and Q with optional weights W</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>vector</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.quaternion_rmsd","title":"<code>quaternion_rmsd(P: ndarray, Q: ndarray, **kwargs: Any) -&gt; float</code>","text":"<p>Rotate matrix P unto Q and calculate the RMSD based on doi:10.1016/1049-9660(91)90036-O</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.quaternion_transform","title":"<code>quaternion_transform(r: ndarray) -&gt; ndarray</code>","text":"<p>Get optimal rotation note: translation will be zero when the centroids of each molecule are the same</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.makeW","title":"<code>makeW(r1: float, r2: float, r3: float, r4: float = 0) -&gt; ndarray</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.makeQ","title":"<code>makeQ(r1: float, r2: float, r3: float, r4: float = 0) -&gt; ndarray</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.quaternion_rotate","title":"<code>quaternion_rotate(X: ndarray, Y: ndarray) -&gt; ndarray</code>","text":"<p>Calculate the rotation</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Y</code>               (<code>ndarray</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rot</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.centroid","title":"<code>centroid(X: ndarray) -&gt; ndarray</code>","text":"<p>Centroid is the mean position of all the points in all of the coordinate directions, from a vectorset X.</p> <p>https://en.wikipedia.org/wiki/Centroid</p> <p>C = sum(X)/len(X)</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>C</code> (              <code>ndarray</code> )          \u2013            <p>centroid</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.hungarian_vectors","title":"<code>hungarian_vectors(p_vecs: ndarray, q_vecs: ndarray, sigma: float = 1.0, use_kernel: bool = True) -&gt; ndarray</code>","text":"<p>Hungarian cost assignment of a similiarty molecule kernel.</p> <p>Note: Assumes p and q are atoms of same type</p> <p>Parameters:</p> <ul> <li> <code>p_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> <li> <code>q_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>indices_b</code> (              <code>array</code> )          \u2013            <p>(N) view vector of reordered assignment</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.reorder_similarity","title":"<code>reorder_similarity(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, use_kernel: bool = True, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Re-orders the input atom list and xyz coordinates using QML similarity the Hungarian method for assignment.</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.reorder_distance","title":"<code>reorder_distance(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Re-orders the input atom list and xyz coordinates by atom type and then by distance of each atom from the centroid.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms_reordered</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, where N is points holding the ordered atoms' names</p> </li> <li> <code>coords_reordered</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension (rows re-ordered)</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.hungarian","title":"<code>hungarian(A: ndarray, B: ndarray) -&gt; ndarray</code>","text":"<p>Hungarian reordering.</p> <p>Assume A and B are coordinates for atoms of SAME type only</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.reorder_hungarian","title":"<code>reorder_hungarian(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.reorder_inertia_hungarian","title":"<code>reorder_inertia_hungarian(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Align the principal intertia axis and then re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.generate_permutations","title":"<code>generate_permutations(elements: List[int], n: int) -&gt; Iterator[List[int]]</code>","text":"<p>Heap's algorithm for generating all n! permutations in a list https://en.wikipedia.org/wiki/Heap%27s_algorithm</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.brute_permutation","title":"<code>brute_permutation(A: ndarray, B: ndarray) -&gt; ndarray</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the brute force method of permuting all rows of the input coordinates</p> <p>Parameters:</p> <ul> <li> <code>A</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>B</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered view of B projected to A</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.reorder_brute","title":"<code>reorder_brute(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, **kwargs: Any) -&gt; ndarray</code>","text":"<p>Re-orders the input atom list and xyz coordinates using all permutation of rows (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.check_reflections","title":"<code>check_reflections(p_atoms: ndarray, q_atoms: ndarray, p_coord: ndarray, q_coord: ndarray, reorder_method: Optional[ReorderCallable] = None, rmsd_method: RmsdCallable = kabsch_rmsd, keep_stereo: bool = False) -&gt; Tuple[float, ndarray, ndarray, ndarray]</code>","text":"<p>Minimize RMSD using reflection planes for molecule P and Q</p> <p>Warning: This will affect stereo-chemistry</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>min_rmsd</code>           \u2013            </li> <li> <code>min_swap</code>           \u2013            </li> <li> <code>min_reflection</code>           \u2013            </li> <li> <code>min_review</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.rotation_matrix_vectors","title":"<code>rotation_matrix_vectors(v1: ndarray, v2: ndarray) -&gt; ndarray</code>","text":"<p>Returns the rotation matrix that rotates v1 onto v2 using Rodrigues' rotation formula.</p> (see https://math.stackexchange.com/a/476311) <p>v1 : array     Dim 3 float array v2 : array     Dim 3 float array</p> Return <p>output : 3x3 matrix     Rotation matrix</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_cm","title":"<code>get_cm(atoms: ndarray, V: ndarray) -&gt; ndarray</code>","text":"Get the center of mass of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : (3) array     The CM vector</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_inertia_tensor","title":"<code>get_inertia_tensor(atoms: ndarray, V: ndarray) -&gt; ndarray</code>","text":"Get the tensor of intertia of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : 3x3 float matrix     The tensor of inertia</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_principal_axis","title":"<code>get_principal_axis(atoms: ndarray, V: ndarray) -&gt; ndarray</code>","text":"Get the molecule's principal axis. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : array     Array of dim 3 containing the principal axis</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.set_coordinates","title":"<code>set_coordinates(atoms: ndarray, V: ndarray, title: str = '', decimals: int = 8) -&gt; str</code>","text":"<p>Print coordinates V with corresponding atoms to stdout in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>list</code>)           \u2013            <p>List of atomic types</p> </li> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,3) matrix of atomic coordinates</p> </li> <li> <code>title</code>               (<code>string(optional)</code>, default:                   <code>''</code> )           \u2013            <p>Title of molecule</p> </li> <li> <code>decimals</code>               (<code>int(optional)</code>, default:                   <code>8</code> )           \u2013            <p>number of decimals for the coordinates</p> </li> </ul> Return <p>output : str     Molecule in XYZ format</p>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_coordinates","title":"<code>get_coordinates(filename: Path, fmt: str, is_gzip: bool = False, return_atoms_as_int: bool = False) -&gt; Tuple[ndarray, ndarray]</code>","text":"<p>Get coordinates from filename in format fmt. Supports XYZ and PDB.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> <li> <code>fmt</code>               (<code>string</code>)           \u2013            <p>Format of filename. Either xyz or pdb.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_coordinates_pdb","title":"<code>get_coordinates_pdb(filename: Path, is_gzip: bool = False, return_atoms_as_int: bool = False) -&gt; Tuple[ndarray, ndarray]</code>","text":"<p>Get coordinates from the first chain in a pdb file and return a vectorset with all the coordinates.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/general/calculate_rmsd/#esta.general.calculate_rmsd.get_coordinates_xyz","title":"<code>get_coordinates_xyz(filename: Path, is_gzip: bool = False, return_atoms_as_int: bool = False) -&gt; Tuple[ndarray, ndarray]</code>","text":"<p>Get coordinates from filename and return a vectorset with all the coordinates, in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/general/cartAndSpherical/","title":"esta.general.cartAndSpherical","text":""},{"location":"reference/esta/general/cartAndSpherical/#esta.general.cartAndSpherical","title":"<code>esta.general.cartAndSpherical</code>","text":""},{"location":"reference/esta/general/charge_bader/","title":"esta.general.charge_bader","text":""},{"location":"reference/esta/general/charge_bader/#esta.general.charge_bader","title":"<code>esta.general.charge_bader</code>","text":""},{"location":"reference/esta/general/charge_bader/#esta.general.charge_bader.get_ACF_file","title":"<code>get_ACF_file()</code>","text":"<p>method to read ACF.dat file</p>"},{"location":"reference/esta/general/circle_equation/","title":"esta.general.circle_equation","text":""},{"location":"reference/esta/general/circle_equation/#esta.general.circle_equation","title":"<code>esta.general.circle_equation</code>","text":""},{"location":"reference/esta/general/circle_least_squares/","title":"esta.general.circle_least_squares","text":""},{"location":"reference/esta/general/circle_least_squares/#esta.general.circle_least_squares","title":"<code>esta.general.circle_least_squares</code>","text":""},{"location":"reference/esta/general/compare_scalar/","title":"esta.general.compare_scalar","text":""},{"location":"reference/esta/general/compare_scalar/#esta.general.compare_scalar","title":"<code>esta.general.compare_scalar</code>","text":""},{"location":"reference/esta/general/compare_scalar/#esta.general.compare_scalar.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/general/compare_scalar/#esta.general.compare_scalar.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/general/conjugate_gradient/","title":"esta.general.conjugate_gradient","text":""},{"location":"reference/esta/general/conjugate_gradient/#esta.general.conjugate_gradient","title":"<code>esta.general.conjugate_gradient</code>","text":""},{"location":"reference/esta/general/conjugate_gradient/#esta.general.conjugate_gradient.conjugate_grad","title":"<code>conjugate_grad(A, b, x=None)</code>","text":"Description <p>Solve a linear equation Ax = b using conjugate gradient method.</p> <p>Parameters:</p> <ul> <li> <code>A</code>           \u2013            </li> <li> <code>b</code>           \u2013            </li> <li> <code>x</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>1d numpy.array x such that Ax = b</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/conversion_factors/","title":"esta.general.conversion_factors","text":""},{"location":"reference/esta/general/conversion_factors/#esta.general.conversion_factors","title":"<code>esta.general.conversion_factors</code>","text":"<ol> <li>library to get conversion factor to convert quantities from once to another</li> <li>get commanly use physical constants in physical and chemical sciences </li> </ol> <p>NOTE: ii ---&gt; means \u2192 inverse</p> <p>Author: S. Kumar,  email:  sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/crystal_latticee/","title":"esta.general.crystal_latticee","text":""},{"location":"reference/esta/general/crystal_latticee/#esta.general.crystal_latticee","title":"<code>esta.general.crystal_latticee</code>","text":"<p>Crystal lattice class to define lattice parameters and basis crystal = lattice + basis (atoms or molecules )</p> <p>Author: Sonu Kumar</p> <p>Email: sonukumar.physics@gmail.com</p> <p>Date: April, 2017, 2019, 2020</p> <p>adapted from ----&gt; vaspBag/crystal_lattice.py</p>"},{"location":"reference/esta/general/crystal_latticee/#esta.general.crystal_latticee.CrystalLattice","title":"<code>CrystalLattice</code>","text":"<p>Crystal lattice class to define lattice parameters and basis crystal = lattice + basis (atoms or molecules )</p>"},{"location":"reference/esta/general/crystal_latticee/#esta.general.crystal_latticee.CrystalLattice.get_poscar","title":"<code>get_poscar()</code>","text":"<p>get poscar file variables:</p> <p>Parameters:</p> <ul> <li> <code>POSCAR</code>               (<code>str</code>)           \u2013            <p>file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>if l_SelectDynamics:</code>           \u2013            <p>return self.tau_cartesian, self.real_volume, self.LV1, self.LV2, self.LV3,self.atm_type, self.natom_type, self.natoms, self.atomFix, self.atomMove</p> </li> <li> <code>else</code> (              <code> </code> )          \u2013            <p>return self.tau_cartesian, self.real_volume, self.LV1, self.LV2, self.LV3,self.atm_type, self.natom_type, self.natoms</p> </li> </ul>"},{"location":"reference/esta/general/crystal_latticee/#esta.general.crystal_latticee.CrystalLattice.reciprocal_lattice","title":"<code>reciprocal_lattice()</code>","text":"<p>method to calculate the reciprocal lattice vectors        </p> <p>Parameters:</p> <ul> <li> <code>real</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>reciprocal space lattice vectors : b1, b2, b3 </code>           \u2013            </li> </ul> Notes <p>a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/general/crystal_latticee/#esta.general.crystal_latticee.CrystalLattice.get_all_atoms_labels","title":"<code>get_all_atoms_labels()</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p> parameters <p>poscar file : str     POSCAR file in current dir.</p> <p>Returns:</p> <ul> <li> <code>atomic labels: list of strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file</code>           \u2013            <p>list of strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file</p> </li> <li> <code>no. of atoms : integer </code>           \u2013            <p>total number of atoms in the POSCAR file</p> </li> <li> <code>sequence of numbers : scalars</code>           \u2013            <p>seq of numbers starting from 1 to ntotal for all atoms (e.g. 1 1 1 2 3 4 4 .. )</p> </li> <li> <code>author</code> (              <code>sk</code> )          \u2013            </li> <li> <code>email</code> (              <code>physics @ com</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/general/direction_index2str/","title":"esta.general.direction_index2str","text":""},{"location":"reference/esta/general/direction_index2str/#esta.general.direction_index2str","title":"<code>esta.general.direction_index2str</code>","text":""},{"location":"reference/esta/general/direction_index2str/#esta.general.direction_index2str.direction_indx_to_str","title":"<code>direction_indx_to_str(direction_indices)</code>","text":"<p>simple way to change direction indices to strings </p> <p>e.g. </p> <p>[1,0,0] \u2192 'x', '0', '0' \u2192 'x', '0', 'z' \u2192 ['x', 'y', 'z'] ... ...</p>"},{"location":"reference/esta/general/distance_conformation/","title":"esta.general.distance_conformation","text":""},{"location":"reference/esta/general/distance_conformation/#esta.general.distance_conformation","title":"<code>esta.general.distance_conformation</code>","text":""},{"location":"reference/esta/general/distance_conformation/#esta.general.distance_conformation.perturbed_structure","title":"<code>perturbed_structure(filename, delta_d=0.5)</code>","text":"<p>get perturbed str using distance-geometry method ..  (stable calculation of coordinates from distance information; Acta. Cryst. 1978 A 34 282-284 )</p> <p>.. todo::       how to specify the limits for the distance matrix is crucial. Here delta_d is used for setting      the distances between atoms .. a better way to modify the distances is needed!!</p>"},{"location":"reference/esta/general/distance_matrix/","title":"esta.general.distance_matrix","text":""},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix","title":"<code>esta.general.distance_matrix</code>","text":""},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.distance_matrix_pbc","title":"<code>distance_matrix_pbc(filename=None)</code>","text":"<p>find distance matrix for poscar file with PBC along all?? directions</p>"},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.distance_matrix_pbc_","title":"<code>distance_matrix_pbc_(atm_position, cell)</code>","text":"<p>find distance matrix for given atom coord and cell vectors atm_position: array of rank 2 cell: array of rank 2; e.g. np.array([  [1.,    2.,   3.0],   # lv1                                         [23,    32,   5.0],   # lv2                                         [10.43, 1.32, 43.0]]) # lv3</p>"},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.distance_matrix_xyz","title":"<code>distance_matrix_xyz(filename=None)</code>","text":"<p>find distance matrix for the xyz file data</p>"},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.distance_matrix_xyz_","title":"<code>distance_matrix_xyz_(atm_position)</code>","text":"<p>find distance matrix for the given atomic coords</p>"},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.connection_matrix","title":"<code>connection_matrix(atm_position, atm_syml, scale=None, dist_add=None)</code>","text":"<p>given atomic positions, atomic symobls, and atomic radii scale, find the connectivy matrix for atomic  system</p>"},{"location":"reference/esta/general/distance_matrix/#esta.general.distance_matrix.distance_atom_pairs","title":"<code>distance_atom_pairs(filename=None)</code>","text":"<p>find distance between atom pairs given poscar data file </p> Warning: <pre><code>better MIC ..need to be done (already done ..see py files in general dir or externalBag or aseBag ...streamline things****)\n</code></pre> <p>Returns:</p> <ul> <li> <code>    dist: ndarry</code>           \u2013            <p>distance matrix or rank 2 tensor or rank2 array</p> </li> <li> <code>note</code> (              <code>: </code> )          \u2013            <p>BEtter see ... stefano curtalo paper on lattice and space gps ..GOOD..SK!! ... on other molecular dynamics book .. ??</p> </li> <li> <code>note</code> (              <code>: </code> )          \u2013            <p>see basics of min imgae conventions ... paper of  Efficient Coding of the Minimum Image Convention By Ulrich K. Deiters \u2217 Institute of Physical Chemistry, University of Cologne,  Luxemburger Str. 116, 50939 K\u00f6ln, Germany</p> </li> </ul>"},{"location":"reference/esta/general/distances_ase_esa/","title":"esta.general.distances_ase_esa","text":""},{"location":"reference/esta/general/distances_ase_esa/#esta.general.distances_ase_esa","title":"<code>esta.general.distances_ase_esa</code>","text":""},{"location":"reference/esta/general/distances_ase_esa/#esta.general.distances_ase_esa.distances_pbc_ase","title":"<code>distances_pbc_ase(pos1, pos2=None, cell=None, pbc=None, lprint_dist=None)</code>","text":"<p>get the distance among atoms  using MIC .... using ASE geometry class .. for testing with own implementation ..sk!!</p> parameters: <pre><code>pos1: 3d array\n    atomic positions of shape(natoms, 3)\npos2: 3d array \n    atomic position of shape (natoms, 3)\n\ncell: 3x3 array or matrix\n    lattice parameters in the c format \n    e.g. cell = np.array ([lv1],\n                          [lv2],\n                          [lv3]])  \n         which is equivalent to \n                np.array ( [[1,0,1],\n                           [0,1,0],\n                           [0,0,1]])\npbc: use periodic boundary condtion, set to True by default\n\nlprint_dist: logical (True/False), optional\n    to print distance among atoms\n</code></pre> returns: <pre><code>dist_vectors: (natoms, natoms, 3) dim array for distance among all atoms along x, y, and z.\ndist_len : (natoms, natoms) dim matrix or array for distances among all atoms\n</code></pre>"},{"location":"reference/esta/general/entropy_data/","title":"esta.general.entropy_data","text":""},{"location":"reference/esta/general/entropy_data/#esta.general.entropy_data","title":"<code>esta.general.entropy_data</code>","text":"<p>List of experimental Entropies of some molecules at 298.15 K</p> <p>url: https://cccbdb.nist.gov/xp2x.asp</p>"},{"location":"reference/esta/general/filter_vib_freq/","title":"esta.general.filter_vib_freq","text":""},{"location":"reference/esta/general/filter_vib_freq/#esta.general.filter_vib_freq","title":"<code>esta.general.filter_vib_freq</code>","text":""},{"location":"reference/esta/general/filter_vib_freq/#esta.general.filter_vib_freq.filter_vib_freq","title":"<code>filter_vib_freq(vib_freq, freq_val=None)</code>","text":"<p>filter the vib freq: </p> input: <pre><code>vib_freq: 1D array of freqs in eV\nfreq_val: scalar; \n          if none, then freqs &lt;=  50 cm-1 are shifted to 50 cm-1\n</code></pre> output: <pre><code>list of filtered vibrational freqs (close to zero or -ve values replaced by constant\nvalue \"freq_val\" or default 50 cm-1 value)\n</code></pre> <p>Note: all values less than 50 cm-1 are replaced by 50 cm-1 if freq_val is None</p> <p>Note: 50 cm-1 in ev is eq to 0.00619 eV</p>"},{"location":"reference/esta/general/finding_vacuum_region2/","title":"esta.general.finding_vacuum_region2","text":""},{"location":"reference/esta/general/finding_vacuum_region2/#esta.general.finding_vacuum_region2","title":"<code>esta.general.finding_vacuum_region2</code>","text":""},{"location":"reference/esta/general/finding_vacuum_region2/#esta.general.finding_vacuum_region2.get_max_min_coord","title":"<code>get_max_min_coord(filename, location)</code>","text":"<p>Calculation of region of vacuum and then take average over there to find vacuum level</p>"},{"location":"reference/esta/general/finite_difference/","title":"esta.general.finite_difference","text":""},{"location":"reference/esta/general/finite_difference/#esta.general.finite_difference","title":"<code>esta.general.finite_difference</code>","text":""},{"location":"reference/esta/general/free_energy_ethane/","title":"esta.general.free_energy_ethane","text":""},{"location":"reference/esta/general/free_energy_ethane/#esta.general.free_energy_ethane","title":"<code>esta.general.free_energy_ethane</code>","text":""},{"location":"reference/esta/general/free_energy_ethane/#esta.general.free_energy_ethane.GibbsFreeEnergy","title":"<code>GibbsFreeEnergy</code>","text":"<p>               Bases: <code>object</code></p> <p>A class to calculate the Gibbs free enegy  G = E -TS + E_ZPE</p> <p>TODO: </p> <ul> <li> <p>Temp and pressure dependence free energy formula and   its implementation.</p> </li> <li> <p>ZPE calculations .. done (see the code)</p> </li> </ul>"},{"location":"reference/esta/general/free_energy_ethane/#esta.general.free_energy_ethane.GibbsFreeEnergy.get_free_energy","title":"<code>get_free_energy()</code>","text":"<p>Units::  Edft : eV             S : eV/K          temp : K</p>"},{"location":"reference/esta/general/from_pos2xyz/","title":"esta.general.from_pos2xyz","text":""},{"location":"reference/esta/general/from_pos2xyz/#esta.general.from_pos2xyz","title":"<code>esta.general.from_pos2xyz</code>","text":"<p>convert poscar file to xyz file</p>"},{"location":"reference/esta/general/from_pos2xyz/#esta.general.from_pos2xyz.pos2xyz","title":"<code>pos2xyz(posfile)</code>","text":"<p>convert input poscar file to xyz file</p>"},{"location":"reference/esta/general/from_pos2xyz_adv/","title":"esta.general.from_pos2xyz_adv","text":""},{"location":"reference/esta/general/from_pos2xyz_adv/#esta.general.from_pos2xyz_adv","title":"<code>esta.general.from_pos2xyz_adv</code>","text":"<p>convert poscar file to xyz file</p>"},{"location":"reference/esta/general/from_pos2xyz_adv/#esta.general.from_pos2xyz_adv.pos2xyz","title":"<code>pos2xyz(posfile)</code>","text":"<p>convert input poscar file to xyz file</p>"},{"location":"reference/esta/general/from_pos2xyz_adv/#esta.general.from_pos2xyz_adv.pos2xyz_","title":"<code>pos2xyz_(posfile)</code>","text":"<p>convert input poscar file (with or without selective tags) to xyz  file (with Fix tags or not with Fix tags)</p>"},{"location":"reference/esta/general/functionalize/","title":"esta.general.functionalize","text":""},{"location":"reference/esta/general/functionalize/#esta.general.functionalize","title":"<code>esta.general.functionalize</code>","text":""},{"location":"reference/esta/general/functionalize/#esta.general.functionalize.functionalize","title":"<code>functionalize(attach_to_atoms_list, pos, label, fdist=None)</code>","text":"<p>functionalize the atoms in poscar file format according to  the list of atoms given in attach_to_atoms_list</p> <p>Parameters:</p> <ul> <li> <code>attach_to_atoms_list</code>           \u2013            <p>list of atoms to be functionalized, a pair of atoms in a list  is input; the first atom in the list is functionalised, and the  second atom in the list provide a sense of direction for the  functionalization;  for example: attach_to_atoms_list = [ ['8','28'], ['15','2'], ['16','1'], ['23','4']  ]</p> </li> <li> <code>cell</code>           \u2013            <p>cell lattice vectors of the shape (3,3); e.g. np.array([lv1, lv2, lv3]) lv1 is lattice vector of length 3, similary lv2, lv3!!</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions in the initial poscar file</p> </li> <li> <code>label</code>           \u2013            <p>atomic labelols in the poscar file</p> </li> <li> <code>fdist</code>           \u2013            <p>functionalixation distance (default is 0.65 Ang)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>new_pos</code> (              <code>array of rank2</code> )          \u2013            <p>new atomic positions with additional atoms</p> </li> <li> <code>new_label</code> (              <code>list of str</code> )          \u2013            <p>atomic labelols with additional ones in the poscar file</p> </li> </ul>"},{"location":"reference/esta/general/functionalize/#esta.general.functionalize.functionalize_with_direction","title":"<code>functionalize_with_direction(attach_to_atoms_list, pos, label, fun_atoms=None, fdist=None)</code>","text":"<p>functionalize the atoms in poscar file format according to  the list of atoms given in attach_to_atoms_list</p> <p>Parameters:</p> <ul> <li> <code>attach_to_atoms_list</code>           \u2013            <p>list of atoms to be functionalized the first atom in the list is functionalised, and the  second list element in the sense of direction for the  functionalization;  for example: [ ['1','z'],   ['8','z']] what about this -- [ ['1,2,3,4','z'],   ['8','z']] .. to do!!</p> </li> <li> <code>cell</code>           \u2013            <p>cell lattice vectors of the shape (3,3); e.g. np.array([lv1, lv2, lv3]) lv1 is lattice vector of length 3, similary lv2, lv3!!</p> </li> <li> <code>pos</code>           \u2013            <p>atomic positions in the initial poscar file</p> </li> <li> <code>label</code>           \u2013            <p>atomic labelols in the poscar file</p> </li> <li> <code>fun_atoms</code>           \u2013            <p>list of atoms to be functionalized; e.g ['H'] only one type of  atom is implementor; for something like  ['H', 'F', 'Cl'] ... todo!!</p> </li> <li> <code>fdist</code>               (<code>float(optional)</code>, default:                   <code>None</code> )           \u2013            <p>distance of functionalization (default is 0.99 Ang)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>new_pos</code> (              <code>array of rank2</code> )          \u2013            <p>new atomic positions with additional atoms</p> </li> <li> <code>new_label</code> (              <code>list of str</code> )          \u2013            <p>atomic labelols with additional ones in the poscar file</p> </li> </ul>"},{"location":"reference/esta/general/get_ACF_bader/","title":"esta.general.get_ACF_bader","text":""},{"location":"reference/esta/general/get_ACF_bader/#esta.general.get_ACF_bader","title":"<code>esta.general.get_ACF_bader</code>","text":""},{"location":"reference/esta/general/get_ACF_bader/#esta.general.get_ACF_bader.get_ACF_file","title":"<code>get_ACF_file()</code>","text":"<p>method to read ACF.dat file</p>"},{"location":"reference/esta/general/get_com/","title":"esta.general.get_com","text":""},{"location":"reference/esta/general/get_com/#esta.general.get_com","title":"<code>esta.general.get_com</code>","text":""},{"location":"reference/esta/general/get_com/#esta.general.get_com.com","title":"<code>com(array, label)</code>","text":"<p>method to find the centre of mass of atomic array</p> <p>input: atomic array with atomic symbols (some xyz          files contain atomic numbers, which is not yet implemented-todo-sk!)</p> <p>return: an array/vector representing the center of mass</p>"},{"location":"reference/esta/general/get_com/#esta.general.get_com.com_slightly_slow","title":"<code>com_slightly_slow(array, label)</code>","text":"<p>method to find the centre of mass of atomic array</p> <p>input: atomic array with atomic symbols (some xyz          files contain atomic numbers, which is not yet implemented-todo-sk!)</p> <p>return: an array/vector representing the center of mass</p>"},{"location":"reference/esta/general/get_configs/","title":"esta.general.get_configs","text":""},{"location":"reference/esta/general/get_configs/#esta.general.get_configs","title":"<code>esta.general.get_configs</code>","text":""},{"location":"reference/esta/general/get_configs/#esta.general.get_configs.get_atomic_configurations","title":"<code>get_atomic_configurations(N, atompositions, atompositions2)</code>","text":"<p>generate points between a set of two points in N-D space  using simple linear interpolation</p> Parameters: <p>N: integer     no. of images between two points atomspositions: array     initial pt in N-Dimension space atomspositions2: array     final pt or atomic positiion in N-Dimension space</p> Returns: <p>configurations: array of rank 3     atomic positions generated using linear interpolation  total_no_of_images: integer     no. of images</p>"},{"location":"reference/esta/general/get_configs/#esta.general.get_configs.mass_weighted_distance","title":"<code>mass_weighted_distance()</code>","text":"<p>find mass weighted distance between generalised coordinates</p> <p>NOTE: from periodic import element atm  = element('H') #element_mass(\"H\" print e atm.mass a = element(label[k]) print a.mass</p> <p>Note: use mendeleev      from mendeleev import element     element(label[i]).mass</p>"},{"location":"reference/esta/general/get_configs/#esta.general.get_configs.get_poscar_images","title":"<code>get_poscar_images(N, poscar_obj, poscar_obj2)</code>","text":"<p>generate poscar files, given atomic positions in cartesian coordinates,lattice parameteres types of atoms, atom symbols, atoms of each type</p>"},{"location":"reference/esta/general/get_configs_btw2strs/","title":"esta.general.get_configs_btw2strs","text":""},{"location":"reference/esta/general/get_configs_btw2strs/#esta.general.get_configs_btw2strs","title":"<code>esta.general.get_configs_btw2strs</code>","text":"<p>Generate atomic configurations between initial and final atomic positions</p>"},{"location":"reference/esta/general/get_configs_btw2strs/#esta.general.get_configs_btw2strs.get_atomic_configurations","title":"<code>get_atomic_configurations(N, atompositions, atompositions2)</code>","text":"<p>generate points between a set of two points in N-D space</p> <p>Note: initial position in 'atompositions'        and final positions in 'atompositions2'       N : will give no. of images between these positions</p>"},{"location":"reference/esta/general/get_configs_btw2strs/#esta.general.get_configs_btw2strs.mass_weighted_distance","title":"<code>mass_weighted_distance()</code>","text":"<p>find mass weighted distance between generalised coordinates</p> <p>NOTE: from periodic import element atm  = element('H') #element_mass(\"H\" print e atm.mass a = element(label[k]) print a.mass</p> <p>Note: use mendeleev      from mendeleev import element     element(label[i]).mass</p>"},{"location":"reference/esta/general/get_configs_btw2strs/#esta.general.get_configs_btw2strs.get_poscar_images","title":"<code>get_poscar_images(N, poscar_obj, poscar_obj2)</code>","text":"<p>write a function that can generate poscar files, given - atomic positions in cartesian coordinates - lattice parameteres - types of atoms - atom symbols - atoms of each type</p>"},{"location":"reference/esta/general/get_dihedral/","title":"esta.general.get_dihedral","text":""},{"location":"reference/esta/general/get_dihedral/#esta.general.get_dihedral","title":"<code>esta.general.get_dihedral</code>","text":""},{"location":"reference/esta/general/get_dihedral/#esta.general.get_dihedral.dihedral","title":"<code>dihedral(p)</code>","text":"<p>find the dihedral angle between four pts p[0:4] </p> <p>.. note::      need testing .. whether to choose dihedral1 or dihedral3, initially taking      dihedral1</p>"},{"location":"reference/esta/general/get_element_natomeach_xyz/","title":"esta.general.get_element_natomeach_xyz","text":""},{"location":"reference/esta/general/get_element_natomeach_xyz/#esta.general.get_element_natomeach_xyz","title":"<code>esta.general.get_element_natomeach_xyz</code>","text":""},{"location":"reference/esta/general/get_element_natomeach_xyz/#esta.general.get_element_natomeach_xyz.elemnt_and_natm_each","title":"<code>elemnt_and_natm_each(label)</code>","text":"<p>get elements and no of atoms for each element type from label (obtained from .xyz or  poscar file)</p> <p>..for example::    label= ['H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'B',     'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B',     'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'O', 'O', 'O', 'O', 'O', 'O', 'N',    'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N',     'N', 'N', 'N', 'N', 'N', 'N', 'H']</p>"},{"location":"reference/esta/general/get_labelling_atoms/","title":"esta.general.get_labelling_atoms","text":""},{"location":"reference/esta/general/get_labelling_atoms/#esta.general.get_labelling_atoms","title":"<code>esta.general.get_labelling_atoms</code>","text":""},{"location":"reference/esta/general/get_labelling_atoms/#esta.general.get_labelling_atoms.get_all_atoms_lebels","title":"<code>get_all_atoms_lebels(ffile)</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p>"},{"location":"reference/esta/general/get_labelling_atoms/#esta.general.get_labelling_atoms.get_all_atoms_lebels--parameters","title":"Parameters:","text":"<p>input: POSCAR file in current dir.</p> <p>output:      - list of strings of atomic lebels of all atoms according to the numbering of atoms in      POSCAR file     - integer for total number of atoms in the POSCAR file</p> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/get_merged_dict/","title":"esta.general.get_merged_dict","text":""},{"location":"reference/esta/general/get_merged_dict/#esta.general.get_merged_dict","title":"<code>esta.general.get_merged_dict</code>","text":""},{"location":"reference/esta/general/get_merged_dict/#esta.general.get_merged_dict.merge_dict","title":"<code>merge_dict(on_comman_column, dict_list, to_csv_name, precision)</code>","text":"<p>merge or reduce two data Frames based on a comman colum</p>"},{"location":"reference/esta/general/get_moved_atom_n_symb/","title":"esta.general.get_moved_atom_n_symb","text":""},{"location":"reference/esta/general/get_moved_atom_n_symb/#esta.general.get_moved_atom_n_symb","title":"<code>esta.general.get_moved_atom_n_symb</code>","text":""},{"location":"reference/esta/general/get_moved_atom_n_symb/#esta.general.get_moved_atom_n_symb.get_moved_atoms_and_symbols","title":"<code>get_moved_atoms_and_symbols(filename=None)</code>","text":"<p>get symbols and atomic coord of moved atoms</p>"},{"location":"reference/esta/general/get_poscar_from_cxyz/","title":"esta.general.get_poscar_from_cxyz","text":""},{"location":"reference/esta/general/get_poscar_from_cxyz/#esta.general.get_poscar_from_cxyz","title":"<code>esta.general.get_poscar_from_cxyz</code>","text":""},{"location":"reference/esta/general/get_pystyle_integer/","title":"esta.general.get_pystyle_integer","text":""},{"location":"reference/esta/general/get_pystyle_integer/#esta.general.get_pystyle_integer","title":"<code>esta.general.get_pystyle_integer</code>","text":""},{"location":"reference/esta/general/get_pystyle_integer/#esta.general.get_pystyle_integer.get_integer_python_style","title":"<code>get_integer_python_style(input_list)</code>","text":"<p>get list of integers in python style format  with numbering strarting from 0</p> <p>.. example::     input_list  =   ['1', '2', '3:14', '19:981']     output_list =   ['0', '1', '2:13', '18:980']</p>"},{"location":"reference/esta/general/get_range_from_intervals/","title":"esta.general.get_range_from_intervals","text":""},{"location":"reference/esta/general/get_range_from_intervals/#esta.general.get_range_from_intervals","title":"<code>esta.general.get_range_from_intervals</code>","text":""},{"location":"reference/esta/general/get_range_from_intervals/#esta.general.get_range_from_intervals.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>DEPRECATED ............ *** see interval2Range_adv in root folder of esta ** </p> <p>get range of integers from intervals </p> <p>Parameters:</p> <ul> <li> <code>list_of_intervals</code>               (<code> list of strings</code>)           \u2013            <p>list of string of intervals, e.g. ['1','2-4','6-10']</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>elem</code> (              <code>range of integers </code> )          \u2013            <p>range of integers specifying the intervals, e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]</p> </li> </ul>"},{"location":"reference/esta/general/get_rotation_matrix/","title":"esta.general.get_rotation_matrix","text":""},{"location":"reference/esta/general/get_rotation_matrix/#esta.general.get_rotation_matrix","title":"<code>esta.general.get_rotation_matrix</code>","text":""},{"location":"reference/esta/general/get_rotation_matrix/#esta.general.get_rotation_matrix.rotation_matrix","title":"<code>rotation_matrix(axis, theta_degree)</code>","text":"<p>Return the rotation matrix associated with counterclockwise rotation about the given axis by theta degree.</p> <p>Parameters:</p> <ul> <li> <code>axis</code>           \u2013            <p>axis around which to rotate.</p> </li> <li> <code>theta_degree</code>           \u2013            <p>angle in degree by which to rotate</p> </li> </ul>"},{"location":"reference/esta/general/get_similar_configuration0/","title":"esta.general.get_similar_configuration0","text":""},{"location":"reference/esta/general/get_similar_configuration0/#esta.general.get_similar_configuration0","title":"<code>esta.general.get_similar_configuration0</code>","text":""},{"location":"reference/esta/general/get_similar_configuration0/#esta.general.get_similar_configuration0.read_data","title":"<code>read_data(filename)</code>","text":"<p>read rmsd and xyz file names and tell the similar and  different conformations based on rmsd cutoff values</p>"},{"location":"reference/esta/general/get_similar_configuration0/#esta.general.get_similar_configuration0.read_energy","title":"<code>read_energy(filename)</code>","text":"<p>read energies for each conformer</p>"},{"location":"reference/esta/general/get_similar_configuration_advv/","title":"esta.general.get_similar_configuration_advv","text":""},{"location":"reference/esta/general/get_similar_configuration_advv/#esta.general.get_similar_configuration_advv","title":"<code>esta.general.get_similar_configuration_advv</code>","text":""},{"location":"reference/esta/general/get_similar_configuration_advv/#esta.general.get_similar_configuration_advv.read_data","title":"<code>read_data(filename)</code>","text":"<p>read rmsd and xyz file names and tell the similar and  different conformations based on rmsd cutoff values</p>"},{"location":"reference/esta/general/get_similar_configuration_advv/#esta.general.get_similar_configuration_advv.read_energy","title":"<code>read_energy(filename)</code>","text":"<p>read energies for each conformer</p>"},{"location":"reference/esta/general/get_similar_configuration_advv/#esta.general.get_similar_configuration_advv.get_cluster_str_energies_part1","title":"<code>get_cluster_str_energies_part1(output_rmsd_file, energy_file, rmsd_cutoff)</code>","text":"<p>output_rmsd_file reading gives\u2192 rmsd values, xyzfile_names energy_file reading gives\u2192 en, strs_id rmsd_cutoff \u2192 cutoff for rmsd above which strs are different </p> <p>output: array of following values are obtained; specifically similarity array  and others ( fname | similarity  |  rmsd  |  energies |  strID)</p>"},{"location":"reference/esta/general/get_similar_configuration_advv/#esta.general.get_similar_configuration_advv.get_cluster_str_energies_part2","title":"<code>get_cluster_str_energies_part2(filename)</code>","text":"<p>given all xyzfilenames, similarStrID (cluster of strs having same almost geometry), energies, and strID; find lowest energy strs in a given cluster of xyzs</p> <p>first: read the data form similar_configuration_part1.out file</p>"},{"location":"reference/esta/general/integration1D_over_a_cutoff/","title":"esta.general.integration1D_over_a_cutoff","text":""},{"location":"reference/esta/general/integration1D_over_a_cutoff/#esta.general.integration1D_over_a_cutoff","title":"<code>esta.general.integration1D_over_a_cutoff</code>","text":""},{"location":"reference/esta/general/integration1D_over_a_cutoff/#esta.general.integration1D_over_a_cutoff.get_integrated_electrons","title":"<code>get_integrated_electrons(y, x, x_cutoff=0.01)</code>","text":"<p>integrate the 1d curve (e.g. dos ) over an energy range with some  energy cutoff (usuall Fermi energy) to get no of eletrons contained in that curve</p> <p>input:     array: y     array: x, of same length as that of y     float: x_cutoff, default = 1e-2</p> <p>output:     float; electron; electron count wrt cutoff over x range (NOTE: it is fractional)     float; electron_all; electron count over all x range</p>"},{"location":"reference/esta/general/list_grouped_and_unique/","title":"esta.general.list_grouped_and_unique","text":""},{"location":"reference/esta/general/list_grouped_and_unique/#esta.general.list_grouped_and_unique","title":"<code>esta.general.list_grouped_and_unique</code>","text":""},{"location":"reference/esta/general/list_grouped_and_unique/#esta.general.list_grouped_and_unique.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/general/list_grouped_and_unique/#esta.general.list_grouped_and_unique.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p>"},{"location":"reference/esta/general/manipulate/","title":"esta.general.manipulate","text":""},{"location":"reference/esta/general/manipulate/#esta.general.manipulate","title":"<code>esta.general.manipulate</code>","text":"<p>class for the mainipulation of atoms present in xyz file or poscar type files</p> <p>gradually shift ot manipulate_adv module .. as that has many more functions added**</p> <p>Author: skumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate","title":"<code>Manipulate</code>","text":"<p>               Bases: <code>object</code></p> <p>class to mainipulateatoms present in xyz file or poscar type files</p> <p>.. what is done so far::     - delete atoms from poscar or xyzfile  ... done     - replace atoms by another type/type of atoms ..done     - shift atoms about origin               ..done     - shift atoms alogn a general direction  .. done      - other possiblities .....like bending ..done see other location      - inverstion .. done     - merge two xyz data files in a given order  (&gt; 2 to be done)</p> <p>.. note::     - there is shift.py file ... add shift class in this file and then      - use it as a superclass for the manipulate_structure class ...TODO sk!!</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.__init__","title":"<code>__init__(atomic_positions, atomic_labels=None)</code>","text":"<p>self</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.replace","title":"<code>replace(atm_index, symbol_index, ofile=None)</code>","text":"<p>replace atomic positions by atoms of different types</p> <p>atm_index is list of atomic numbering starting from 1  symbol_index is list of atomic symbols in the final xyz file/poscar file</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.delete_atoms","title":"<code>delete_atoms(delete_list)</code>","text":"<p>delete atoms from atomic positions array</p> Parameters <p>atomic_positions : array      atomic positions in xyz file or poscar file  delete_list : list      list of atoms</p> <p>Returns:</p> <ul> <li> <code>atomic_position_new</code> (              <code>array</code> )          \u2013            <p>new atomic positions after deletion of some atoms</p> </li> </ul>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.delete_atomic_strs","title":"<code>delete_atomic_strs(step=None)</code>","text":"<p>delete atomic strs/points along an arrangement of pts in an array  of shape(n, nat, 3) by a step/stride (default=2). n is no. of atomic-sts/points  of shape(nat,3), nat is the no. of atoms in each set.</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.extract_atomic_strs_","title":"<code>extract_atomic_strs_(id_strs=None)</code>","text":"<p>extract atomic strs/points along an arrangement of pts in an array      of shape(n, nat, 3) by specifying the list of atomic strs to be extracted.     Here n is no. of atomic-sts/points of shape(nat,3), nat is the no. of atoms in each set.</p> <p>.. note::     id_atm_strs must be a list; for example: id_atm_strs = [1,2,3,4,7,810,100,123,1932]     for last strs: id_strs=['-1']</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.invert_atoms","title":"<code>invert_atoms(target_index, reference_index, misc=None)</code>","text":"<p>invert atom from atomic positions (target arraay) array or from set of atomic positions  in xyz PAth file</p> <p>Parameters:</p> <ul> <li> <code>target_index</code>           \u2013            <p>array of ints for indexing atoms to be inverted ; numbering starts from 1</p> </li> <li> <code>reference_index</code>           \u2013            <p>1D array of intergers of atoms  wrt which invertion has to          be done</p> </li> <li> <code>misc</code>           \u2013            <p>tag to do some miscellaneous transformation ... under testing ... here I am inverting the array by double the distance a normal inversion is done also, reference pt is moved along the inversion direction as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>pos_with_inv</code> (              <code>array</code> )          \u2013            <p>array of positions containing inverted atoms references by target_index is misc is True,  then reference atoms is also shifted by inversion operation</p> </li> <li> <code>.. note::</code>           \u2013            <p>for doing inversion of t array wrt r point: new t = t' = r - (t-r) = 2* r - t </p> <p>for misc tag: following inversion and shifting of reference pt done (using vector algebra)     new t = t' = -(t-r)  + [ -(t-r)  ] + r = 3* r - 2 *t     or new t = t' = r + (r-t)  + (r-t)/2 = (5*r-3*t)/2  # added (r-t)/2 more distance vect</p> <p>taking for now following ..     or new t = t' = r + (r-t)  + 2(r-t)/3 = (8*r-5*t)/3  # added 2(r-t)/3 more distance vect     new ref pt, r' = -(t-r) + r = 2*r - t ----- right!! here earliet this pt was r</p> </li> </ul>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.freeze_atoms","title":"<code>freeze_atoms(frozen_atm_indx)</code>","text":"<p>collect atoms in freeze atoms list by placing them in  Frozen block from the xyz file</p> Parameters <p>frozen_atm_indx: list      list of integers specifying the atom numbers to be fixed,      numbering starts from 1 ... max of the no. of atoms</p> <p>Returns:</p> <ul> <li> <code>pos_frozen and pos_not_frozen: tuple</code>           \u2013            <p>tuple containing pos_frozen, an  array containing fixed atoms and pos_not_frozen, an arrary containing atoms not fixed </p> </li> <li> <code>frozen_atm_indx and not_frozen_atm_indx: tuple</code>           \u2013            <p>frozen_atm_indx: list of integers specifying the atom numbers to be fixed and not_frozen_atm_indx: list of integers specifying the atom numbers not to be fixed.</p> </li> <li> <code>.. note::</code>           \u2013            <p>Works only for rank 2 array of atomic position only. For rank 3 .. easy to implement!!</p> </li> </ul>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.get_atm_indices_constraint","title":"<code>get_atm_indices_constraint(frozen_atm_indices=None, not_frozen_atm_indices=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>frozen_atm_indices</code>           \u2013            <p>a list of integers specifying the atom numbers to be fixed; Numbering from 0 ..</p> </li> <li> <code>not_frozen_atm_indices</code>           \u2013            <p>a list of integers for not fixed atoms</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_atm_indices</code> (              <code>list of integers</code> )          \u2013            <p>integers for fixed atoms</p> </li> <li> <code>not_frozen_atm_indices</code> (              <code>list of intergers</code> )          \u2013            <p>integers specifying the atoms numbers NOT to be fixed; Numbering from 0 ..</p> </li> <li> <code>.. note::</code>           \u2013            <p>numbering of atoms must be from 1. And only frozen or not frozen atoms list must be given. Similary output is only integers for not frozen or frozen atoms and vice-versa. One at a time for parameters/returns.</p> </li> </ul>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.get_atm_indices_constraint--natoms-total-number-of-atoms-in-the-xyz-file-or-poscar-type-file","title":"natoms: total number of atoms in the xyz file or poscar type file","text":""},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.centroid","title":"<code>centroid(array)</code>","text":"<p>find centroid from the shift.py</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.shift_to_origin","title":"<code>shift_to_origin(filename)</code>","text":"<p>shift to orgin from the shift.py</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.shift","title":"<code>shift(filename, xshift, yshift, zshift)</code>","text":"<p>shift in general from the shift.py</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.substitute","title":"<code>substitute(iatoms_list, ilinkatom_id, flinkatom_id, xyzfile)</code>","text":"<p>substiture atoms present in iatom_list by atoms presnt in the xyzfile. </p> <p>The initial str has a atom link id given by ilinkatom_id and this atom should be replaced by the atom given in the flinkatom_id along with atoms present in  the xyzfile.</p>"},{"location":"reference/esta/general/manipulate/#esta.general.manipulate.Manipulate.merge","title":"<code>merge(pos2, atm_label2)</code>","text":"<p>merge two xyz files first file read after class initialization second xyz's pos2 and atmlabel2 are input to this method!!</p> <p>On output, new pos and label are returned</p>"},{"location":"reference/esta/general/manipulate_adv/","title":"esta.general.manipulate_adv","text":""},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv","title":"<code>esta.general.manipulate_adv</code>","text":"<p>class for the mainipulation of atoms present in xyz file  (or poscar type data, just convert it to xyz data and create manipulate object)</p> <p>Author: sonukumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate","title":"<code>Manipulate</code>","text":"<p>               Bases: <code>object</code></p> <p>class to mainipulate atoms present in xyz file or poscar type file</p> <p>.. information::     - delete atoms from poscar or xyzfile  ... done     - change types by another type/type of atoms ..done     - shift atoms about origin               ..done     - shift atoms alogn a general direction  .. done      - other possiblities .....like bending ..done see other location      - inverstion or reflection .. check? .. done     - reflection etc .. see some other place (see mirror*py file in script_general) ..  done      - merge two xyz data files in a given order  (&gt; 2 to be done)     - split a xyz file in two parts .. done     - reshuffle xyz atomic position .. done     - substitute .. to add .. done separately ../why?? add here     - nn of atoms .. to add .. do .........why?? add here.. done somwhere .. externalBag</p> <p>.. note::     - there is shift.py file ... add shift class in this file and then      - use it as a superclass for the manipulate_structure class ...TODO sk!!</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.__init__","title":"<code>__init__(atomic_positions, atomic_labels=None)</code>","text":"<p>self</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.replace","title":"<code>replace(atm_index, symbol_index, ofile=None)</code>","text":"<p>replace atomic types (indicated by the atomic indices) by different atomic types</p> <p>Parameters:</p> <ul> <li> <code>atm_index</code>               (<code>list of integers</code>)           \u2013            <p>atm_index is list of atomic numbering starting from 1</p> </li> <li> <code>symbol_index</code>               (<code>list of strings of atomic symbols </code>)           \u2013            <p>list of atomic symbols in the final xyz file/poscar file</p> </li> <li> <code>ofile</code>           \u2013            <p>prefix for the outfile xyz file</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.change_type","title":"<code>change_type(atm_index, symbol_index, ofile=None)</code>","text":"<p>replace atom types. </p> <p>replace atom types of atom ids by symbols present in symbol_index list</p> <p>Parameters:</p> <ul> <li> <code>atm_index</code>               (<code>list of integers</code>)           \u2013            <p>atm_index is list of atomic numbering starting from 1</p> </li> <li> <code>symbol_index</code>               (<code>list of strings of atomic symbols </code>)           \u2013            <p>list of atomic symbols in the final xyz file/poscar file</p> </li> </ul> returns: <p>ofile: str     prefix for the outfile xyz file</p> <p>.. example::     atm_index = [1,9,10] # replace atom index 1, 9 ,10 by elements      of type symbol_index = ['I', 'B', 'B']</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.delete_atoms","title":"<code>delete_atoms(delete_list)</code>","text":"<p>delete atoms from atomic positions array</p> Parameters <p>atomic_positions : array of rank 2 or 3     atomic positions in xyz file or poscar file  delete_list : list      list of atoms with atomic numbering from 1</p> <p>Returns:</p> <ul> <li> <code>new_atomic_positions</code> (              <code>array of rank 2 or 3 depending upton input array</code> )          \u2013            <p>new atomic positions after deletion of some atoms</p> </li> <li> <code>new_atomic_labels</code> (              <code>list</code> )          \u2013            <p>list of atomic symbols</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.delete_atoms--l_reverse-boolean","title":"l_reverse: boolean","text":""},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.delete_atoms--delete-atom-list-except-in-delete_list","title":"delete atom list except in delete_list","text":""},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.delete","title":"<code>delete(delete_list=None, delete_type=None, lreverse=False)</code>","text":"<p>a more general method to delete atoms using atoms types and atomic indices </p> Parameters <p>atomic_positions : array      atomic positions in xyz file or poscar file  delete_list : list      list of atom ids to be deleted; e.g. ['1-10', '12']. atoms numbering from 1 delete_type : list      list of atom types; eg.['B', 'O'] lreverse: logical (optional)     logical variable to delete the opposite set of selected atoms </p> <p>Returns:</p> <ul> <li> <code>new_atomic_positions</code> (              <code>array of rank 2 or 3 depending upton input array</code> )          \u2013            <p>new atomic positions after deletion of some atoms</p> </li> <li> <code>new_atomic_labels</code> (              <code>list</code> )          \u2013            <p>list of atomic symbols</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.delete_atomic_strs","title":"<code>delete_atomic_strs(step=None)</code>","text":"<p>delete atomic strs/points along an arrangement of pts in an array  of shape(n, nat, 3) by a step/stride (default=2). n is no. of atomic-sts/points  of shape(nat,3), nat is the no. of atoms in each set.</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.extract_atomic_strs_","title":"<code>extract_atomic_strs_(id_strs=None)</code>","text":"<p>extract atomic strs/points along an arrangement of pts in an array      of shape(n, nat, 3) by specifying the list of atomic strs to be extracted.     Here n is no. of atomic-sts/points of shape(nat,3), nat is the no. of atoms in each set.</p> <p>.. note::     id_atm_strs must be a list; for example: id_atm_strs = [1,2,3,4,7,810,100,123,1932]     for last strs: id_strs=['-1']</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.invert_atoms","title":"<code>invert_atoms(target_index, reference_index, misc=None)</code>","text":"<p>invert atom from atomic positions (target arraay) array or from set of atomic positions  in xyz PAth file (might be useful for stereo-chemical reactions)</p> <p>Parameters:</p> <ul> <li> <code>target_index</code>           \u2013            <p>array of ints for indexing atoms to be inverted ; numbering starts from 1</p> </li> <li> <code>reference_index</code>           \u2013            <p>1D array of intergers of atoms  wrt which invertion has to          be done</p> </li> <li> <code>misc</code>           \u2013            <p>tag to do some miscellaneous transformation ... under testing ... here I am inverting the array by double the distance a normal inversion is done also, reference pt is moved along the inversion direction as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>pos_with_inv</code> (              <code>array</code> )          \u2013            <p>array of positions containing inverted atoms references by target_index is misc is True,  then reference atoms is also shifted by inversion operation</p> </li> <li> <code>.. note::</code>           \u2013            <p>for doing inversion of t array wrt r point: new t = t' = r - (t-r) = 2* r - t </p> <p>for misc tag: following inversion and shifting of reference pt done (using vector algebra)     new t = t' = -(t-r)  + [ -(t-r)  ] + r = 3* r - 2 *t     or new t = t' = r + (r-t)  + (r-t)/2 = (5*r-3*t)/2  # added (r-t)/2 more distance vect</p> <p>taking for now following ..     or new t = t' = r + (r-t)  + 2(r-t)/3 = (8*r-5*t)/3  # added 2(r-t)/3 more distance vect     new ref pt, r' = -(t-r) + r = 2*r - t ----- right!! here earliet this pt was r</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.freeze_atoms","title":"<code>freeze_atoms(frozen_atm_indx)</code>","text":"<p>collect atoms in freeze atoms list by placing them in  Frozen block from the xyz file</p> Parameters <p>frozen_atm_indx: list      list of integers specifying the atom numbers to be fixed,      numbering starts from 1 ... max of the no. of atoms</p> <p>Returns:</p> <ul> <li> <code>pos_frozen and pos_not_frozen: tuple</code>           \u2013            <p>tuple containing pos_frozen, an  array containing fixed atoms and pos_not_frozen, an arrary containing atoms not fixed </p> </li> <li> <code>frozen_atm_indx and not_frozen_atm_indx: tuple</code>           \u2013            <p>frozen_atm_indx: list of integers specifying the atom numbers to be fixed and not_frozen_atm_indx: list of integers specifying the atom numbers not to be fixed.</p> </li> <li> <code>.. note::</code>           \u2013            <p>Works only for rank 2 array of atomic position only. For rank 3 .. easy to implement!!</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.get_atm_indices_constraint","title":"<code>get_atm_indices_constraint(frozen_atm_indices=None, not_frozen_atm_indices=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>frozen_atm_indices</code>           \u2013            <p>a list of integers specifying the atom numbers to be fixed; Numbering from 0 ..</p> </li> <li> <code>not_frozen_atm_indices</code>           \u2013            <p>a list of integers for not fixed atoms</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_atm_indices</code> (              <code>list of integers</code> )          \u2013            <p>integers for fixed atoms</p> </li> <li> <code>not_frozen_atm_indices</code> (              <code>list of intergers</code> )          \u2013            <p>integers specifying the atoms numbers NOT to be fixed; Numbering from 0 ..</p> </li> <li> <code>.. note::</code>           \u2013            <p>numbering of atoms must be from 1. And only frozen or not frozen atoms list must be given. Similary output is only integers for not frozen or frozen atoms and vice-versa. One at a time for parameters/returns.</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.get_atm_indices_constraint--natoms-total-number-of-atoms-in-the-xyz-file-or-poscar-type-file","title":"natoms: total number of atoms in the xyz file or poscar type file","text":""},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.centroid","title":"<code>centroid(array)</code>","text":"<p>find centroid from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.shift_to_origin","title":"<code>shift_to_origin(filename)</code>","text":"<p>shift to orgin from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.shift","title":"<code>shift(filename, xshift, yshift, zshift)</code>","text":"<p>shift in general from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.substitute","title":"<code>substitute(iatoms_list, ilinkatom_id, flinkatom_id, xyzfile)</code>","text":"<p>substiture atoms present in iatom_list by atoms presnt in the xyzfile. </p> <p>The initial str has a atom link id given by ilinkatom_id and this atom should be replaced by the atom given in the flinkatom_id along with atoms present in  the xyzfile.</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.merge","title":"<code>merge(pos2, atm_label2)</code>","text":"<p>merge two xyz files first file read after class initialization second xyz's pos2 and atmlabel2 are input to this method!!</p> <p>On output, new pos and label are returned</p>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.split_xyz","title":"<code>split_xyz(filename, atom_list, l_alternate=None)</code>","text":"<p>split xyz file into two parts</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the xyz file</p> </li> <li> <code>atom_list</code>               (<code>array of strings () of atom indices)</code>)           \u2013            <p>atoms which are there in the new xyz file (order of atom indices can be  any order) ; e.g: [\"1-2\", \"30-49\", \"59-123\"]</p> </li> <li> <code>l_alternate</code>               (<code>logical</code>, default:                   <code>None</code> )           \u2013            <p>whether to get alternate split file containing remaining atoms (not mentioned in the  atom_list)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>xyz file/s containing part of the original xyz file data</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/manipulate_adv/#esta.general.manipulate_adv.Manipulate.reshuffle_xyz","title":"<code>reshuffle_xyz(filename, atom_list)</code>","text":"<p>reshuffle xyz file data and get a new xyz file data</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the xyz file</p> </li> <li> <code>atom_list</code>               (<code>strings of atom indices</code>)           \u2013            <p>atoms which are to be placed first in the xyz. The order of atom indices can be  any order) ; e.g: [\"1-2\", \"30-49\", \"59-123\"]</p> </li> </ul> return <p>xyz file with reshuffled atomic indices</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/","title":"esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate","text":""},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate","title":"<code>esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate</code>","text":"<p>class for the mainipulation of atoms present in xyz file  (or poscar type file .. easy to do .. but not complete so far .. i think)</p> <p>Author: sonukumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate","title":"<code>Manipulate</code>","text":"<p>               Bases: <code>object</code></p> <p>class to mainipulate atoms present in xyz file or poscar type file</p> <p>.. information::     - delete atoms from poscar or xyzfile  ... done     - replace atoms by another type/type of atoms ..done     - shift atoms about origin               ..done     - shift atoms alogn a general direction  .. done      - other possiblities .....like bending ..done see other location      - inverstion or reflection .. check? .. done     - reflection etc .. see some other place (see mirror*py file) ..  done      - merge two xyz data files in a given order  (&gt; 2 to be done)     - split a xyz file in two parts .. done     - reshuffle xyz atomic position .. done</p> <p>.. note::     - there is shift.py file ... add shift class in this file and then      - use it as a superclass for the manipulate_structure class ...TODO sk!!</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.__init__","title":"<code>__init__()</code>","text":"<p>self</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.initialize","title":"<code>initialize(atomic_positions, atomic_labels)</code>","text":"<p>read atomic positions and atomic labels</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.replace","title":"<code>replace(atm_index, symbol_index, ofile=None)</code>","text":"<p>replace atomic positions by atoms of different types</p> <p>atm_index is list of atomic numbering starting from 1  symbol_index is list of atomic symbols in the final xyz file/poscar file</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.delete_atoms","title":"<code>delete_atoms(delete_list)</code>","text":"<p>delete atoms from atomic positions array</p> Parameters <p>atomic_positions : array      atomic positions in xyz file or poscar file  delete_list : list      list of atoms</p> <p>Returns:</p> <ul> <li> <code>atomic_position_new</code> (              <code>array</code> )          \u2013            <p>new atomic positions after deletion of some atoms</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.delete_atomic_strs","title":"<code>delete_atomic_strs(step=None)</code>","text":"<p>delete atomic strs/points along an arrangement of pts in an array  of shape(n, nat, 3) by a step/stride (default=2). n is no. of atomic-sts/points  of shape(nat,3), nat is the no. of atoms in each set.</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.extract_atomic_strs_","title":"<code>extract_atomic_strs_(id_strs=None)</code>","text":"<p>extract atomic strs/points along an arrangement of pts in an array      of shape(n, nat, 3) by specifying the list of atomic strs to be extracted.     Here n is no. of atomic-sts/points of shape(nat,3), nat is the no. of atoms in each set.</p> <p>.. note::     id_atm_strs must be a list; for example: id_atm_strs = [1,2,3,4,7,810,100,123,1932]     for last strs: id_strs=['-1']</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.invert_atoms","title":"<code>invert_atoms(target_index, reference_index, misc=None)</code>","text":"<p>invert atom from atomic positions (target arraay) array or from set of atomic positions  in xyz PAth file</p> <p>Parameters:</p> <ul> <li> <code>target_index</code>           \u2013            <p>array of ints for indexing atoms to be inverted ; numbering starts from 1</p> </li> <li> <code>reference_index</code>           \u2013            <p>1D array of intergers of atoms  wrt which invertion has to          be done</p> </li> <li> <code>misc</code>           \u2013            <p>tag to do some miscellaneous transformation ... under testing ... here I am inverting the array by double the distance a normal inversion is done also, reference pt is moved along the inversion direction as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>pos_with_inv</code> (              <code>array</code> )          \u2013            <p>array of positions containing inverted atoms references by target_index is misc is True,  then reference atoms is also shifted by inversion operation</p> </li> <li> <code>.. note::</code>           \u2013            <p>for doing inversion of t array wrt r point: new t = t' = r - (t-r) = 2* r - t </p> <p>for misc tag: following inversion and shifting of reference pt done (using vector algebra)     new t = t' = -(t-r)  + [ -(t-r)  ] + r = 3* r - 2 *t     or new t = t' = r + (r-t)  + (r-t)/2 = (5*r-3*t)/2  # added (r-t)/2 more distance vect</p> <p>taking for now following ..     or new t = t' = r + (r-t)  + 2(r-t)/3 = (8*r-5*t)/3  # added 2(r-t)/3 more distance vect     new ref pt, r' = -(t-r) + r = 2*r - t ----- right!! here earliet this pt was r</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.freeze_atoms","title":"<code>freeze_atoms(frozen_atm_indx)</code>","text":"<p>collect atoms in freeze atoms list by placing them in  Frozen block from the xyz file</p> Parameters <p>frozen_atm_indx: list      list of integers specifying the atom numbers to be fixed,      numbering starts from 1 ... max of the no. of atoms</p> <p>Returns:</p> <ul> <li> <code>pos_frozen and pos_not_frozen: tuple</code>           \u2013            <p>tuple containing pos_frozen, an  array containing fixed atoms and pos_not_frozen, an arrary containing atoms not fixed </p> </li> <li> <code>frozen_atm_indx and not_frozen_atm_indx: tuple</code>           \u2013            <p>frozen_atm_indx: list of integers specifying the atom numbers to be fixed and not_frozen_atm_indx: list of integers specifying the atom numbers not to be fixed.</p> </li> <li> <code>.. note::</code>           \u2013            <p>Works only for rank 2 array of atomic position only. For rank 3 .. easy to implement!!</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.get_atm_indices_constraint","title":"<code>get_atm_indices_constraint(frozen_atm_indices=None, not_frozen_atm_indices=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>frozen_atm_indices</code>           \u2013            <p>a list of integers specifying the atom numbers to be fixed; Numbering from 0 ..</p> </li> <li> <code>not_frozen_atm_indices</code>           \u2013            <p>a list of integers for not fixed atoms</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_atm_indices</code> (              <code>list of integers</code> )          \u2013            <p>integers for fixed atoms</p> </li> <li> <code>not_frozen_atm_indices</code> (              <code>list of intergers</code> )          \u2013            <p>integers specifying the atoms numbers NOT to be fixed; Numbering from 0 ..</p> </li> <li> <code>.. note::</code>           \u2013            <p>numbering of atoms must be from 1. And only frozen or not frozen atoms list must be given. Similary output is only integers for not frozen or frozen atoms and vice-versa. One at a time for parameters/returns.</p> </li> </ul>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.get_atm_indices_constraint--natoms-total-number-of-atoms-in-the-xyz-file-or-poscar-type-file","title":"natoms: total number of atoms in the xyz file or poscar type file","text":""},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.centroid","title":"<code>centroid(array)</code>","text":"<p>find centroid from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.shift_to_origin","title":"<code>shift_to_origin(filename)</code>","text":"<p>shift to orgin from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.shift","title":"<code>shift(filename, xshift, yshift, zshift)</code>","text":"<p>shift in general from the shift.py</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.substitute","title":"<code>substitute(iatoms_list, ilinkatom_id, flinkatom_id, xyzfile)</code>","text":"<p>substiture atoms present in iatom_list by atoms presnt in the xyzfile. </p> <p>The initial str has a atom link id given by ilinkatom_id and this atom should be replaced by the atom given in the flinkatom_id along with atoms present in  the xyzfile.</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.merge","title":"<code>merge(pos2, atm_label2)</code>","text":"<p>merge two xyz files first file read after class initialization second xyz's pos2 and atmlabel2 are input to this method!!</p> <p>On output, new pos and label are returned</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.split_xyz","title":"<code>split_xyz(filename, atom_list, l_alternate=None)</code>","text":"<p>extract part of the xyz file into two parts</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the xyz file</p> </li> <li> <code>atom_list</code>               (<code>array of strings () of atom indices)</code>)           \u2013            <p>atoms which are there in the new xyz file (order of atom indices can be  any order) ; e.g: [\"1-2\", \"30-49\", \"59-123\"]</p> </li> <li> <code>l_alternate</code>               (<code>logical</code>, default:                   <code>None</code> )           \u2013            <p>whether to get alternate split file containing remaining atoms (not mentioned in the  atom_list)</p> </li> </ul> return <p>xyz file/s containing part of the original xyz file data</p>"},{"location":"reference/esta/general/manipulate_adv____add_split_and_resuffle_to__manipulate/#esta.general.manipulate_adv____add_split_and_resuffle_to__manipulate.Manipulate.reshuffle_xyz","title":"<code>reshuffle_xyz(filename, atom_list)</code>","text":"<p>reshuffle xyz file data and get a new xyz file data</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the xyz file</p> </li> <li> <code>atom_list</code>               (<code>strings of atom indices</code>)           \u2013            <p>atoms which are to be placed first in the xyz. The order of atom indices can be  any order) ; e.g: [\"1-2\", \"30-49\", \"59-123\"]</p> </li> </ul> return <p>xyz file with reshuffled atomic indices</p>"},{"location":"reference/esta/general/metric_tensor/","title":"esta.general.metric_tensor","text":""},{"location":"reference/esta/general/metric_tensor/#esta.general.metric_tensor","title":"<code>esta.general.metric_tensor</code>","text":""},{"location":"reference/esta/general/metric_tensor/#esta.general.metric_tensor.get_metric_tensor","title":"<code>get_metric_tensor(cell_matrix)</code>","text":"<p>finding the metric tensor for cell matrix</p> <p>Parameters:</p> <ul> <li> <code>cell</code>           \u2013            <p>cell or lattice information in the cell matrix</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>metric-tensor : 3D array </code>           \u2013            <p>matrix of metric tensor</p> </li> </ul>"},{"location":"reference/esta/general/min_trans_rot/","title":"esta.general.min_trans_rot","text":""},{"location":"reference/esta/general/min_trans_rot/#esta.general.min_trans_rot","title":"<code>esta.general.min_trans_rot</code>","text":"<p>this module is from ASE, freely available under the GNU LGPL license. For details of ASE, see https://wiki.fysik.dtu.dk/ase/ </p> <p>modified to adapt to the EStA calling modules. Note: easy to implement from scratch as the needed routines are scattered  already in the EStA directories .. TODO!!</p>"},{"location":"reference/esta/general/min_trans_rot/#esta.general.min_trans_rot.rotation_matrix_from_points","title":"<code>rotation_matrix_from_points(m0, m1)</code>","text":"<p>Returns a rigid transformation/rotation matrix that minimizes the RMSD between two set of points.</p> <p>m0 and m1 should be (3, npoints) numpy arrays with coordinates as columns::</p> <pre><code>(x1  x2   x3   ... xN\n y1  y2   y3   ... yN\n z1  z2   z3   ... zN)\n</code></pre> <p>The centeroids should be set to origin prior to computing the rotation matrix.</p> <p>The rotation matrix is computed using quaternion algebra as detailed in::</p> <pre><code>Melander et al. J. Chem. Theory Comput., 2015, 11,1055\n</code></pre>"},{"location":"reference/esta/general/min_trans_rot/#esta.general.min_trans_rot.quaternion_to_matrix","title":"<code>quaternion_to_matrix(q)</code>","text":"<p>Returns a rotation matrix.</p> <p>Computed from a unit quaternion Input as (4,) numpy array.</p>"},{"location":"reference/esta/general/min_trans_rot/#esta.general.min_trans_rot.minimize_rotation_and_translation","title":"<code>minimize_rotation_and_translation(target, atoms)</code>","text":"<p>Minimize RMSD between atoms and target.</p> <p>Rotate and translate atoms to best match target.  For more details, see::</p> <pre><code>Melander et al. J. Chem. Theory Comput., 2015, 11,1055\n</code></pre>"},{"location":"reference/esta/general/neighbors/","title":"esta.general.neighbors","text":""},{"location":"reference/esta/general/neighbors/#esta.general.neighbors","title":"<code>esta.general.neighbors</code>","text":""},{"location":"reference/esta/general/neighbors/#esta.general.neighbors.get_neighbors","title":"<code>get_neighbors(label, tau_cartesian, n_pts, n_neighbors)</code>","text":"<p>get neighbors of n points (n_pts= atomic positions) along with distance </p> <p>Parameters:</p> <ul> <li> <code>label</code>           \u2013            <p>list of label of pts/atoms</p> </li> <li> <code>tau_cartesian</code>           \u2013            <p>array of atomic-positions/pts in cartesian coordinates</p> </li> <li> <code>n_pts</code>           \u2013            <p>no. of pts/atomic-coordinate whose neighbors are to be found</p> </li> <li> <code>n_neighbors</code>           \u2013            <p>integer for how many eneighbours</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ind</code> (              <code>(arrray,)</code> )          \u2013            <p>array of indices of neighbors including self </p> </li> <li> <code>dist</code> (              <code>(array,)</code> )          \u2013            <p>array of distances from neighbors incuding self distance (self      distance is zero, as we know)</p> </li> </ul>"},{"location":"reference/esta/general/niggli_reduce/","title":"esta.general.niggli_reduce","text":""},{"location":"reference/esta/general/niggli_reduce/#esta.general.niggli_reduce","title":"<code>esta.general.niggli_reduce</code>","text":""},{"location":"reference/esta/general/niggli_reduce/#esta.general.niggli_reduce.niggli_reduce","title":"<code>niggli_reduce(poscar=None, out_poscar_esta=None, out_poscar_ase=None)</code>","text":"<p>' read poscar file using aadhaar object from esta and save the poscar file. </p> <p>Further niggli reduce the crystal lattice  using niggli_reduce from build (not geometery) in ASE package and save the poscar. </p> <p>Now you can compare the two poscar files to see about the niggli reduction.</p>"},{"location":"reference/esta/general/nnb_of_atom/","title":"esta.general.nnb_of_atom","text":""},{"location":"reference/esta/general/nnb_of_atom/#esta.general.nnb_of_atom","title":"<code>esta.general.nnb_of_atom</code>","text":""},{"location":"reference/esta/general/nnb_of_atom/#esta.general.nnb_of_atom.NN_of_atom","title":"<code>NN_of_atom(atomid, xyzfile)</code>","text":"<p>find nearest neighbor/s of an atom  (for groups of atoms .. make a loop over this method ..or find better way??)</p> Parameters: <p>atomid: integer     atom index with fortran style numbering xyzfile: str     xyz file name</p> Returns: <p>NN_atomid: list of integers     atom indices for nearest neighbours for the atomid NN_distances: flot array of len as that of no. of NN_atomid     respective distances of atoms in NN_atomid from atomid</p> <p>TODO:     replace atomid 7 by -ch3 (Me) group     QUESTION: why the number of bond connections equal to the number of atoms very strange ?</p>"},{"location":"reference/esta/general/nnb_of_atom/#esta.general.nnb_of_atom.NN_of_atom_","title":"<code>NN_of_atom_(atomid, atm_position, atm_symbol)</code>","text":"<p>similar to NN_of_atom; but atm_position, and atm_symbol are directly input instead of xyz file</p> <p>TODO:     replace atomid 7 by -ch3 (Me) group     QUESTION: why the number of bond connections equal to the number of atoms very strange ?</p>"},{"location":"reference/esta/general/operation/","title":"esta.general.operation","text":""},{"location":"reference/esta/general/operation/#esta.general.operation","title":"<code>esta.general.operation</code>","text":""},{"location":"reference/esta/general/operation/#esta.general.operation.Transform","title":"<code>Transform</code>","text":"<p>transfor class to    * create supercell from crystal lattice object    * rotation/translation etc...todo    * ..    * ..</p> <ul> <li>More transformations to unit cell/atomic positions/reciprocal lattice/kpoints to be added</li> </ul> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.__init__","title":"<code>__init__(cryst_obj)</code>","text":"<p>cryst_obj is crystal_lattice.CrystalLattice('POSCAR', './') object from inout  of vasp_bag</p>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_supercell","title":"<code>get_supercell(scale)</code>","text":"<ul> <li> <p>create supercell by shifting ALL atoms in space with scaling  [scale1,scale2,scale3]</p> </li> <li> <p>looping is performed along three directions of lv's vectors</p> </li> <li> <p>loops are:     i = 0,1,2 ... sclae1     j = 0,1,2 ... scale2      k = 0,1,2 ... scale3</p> </li> <li> <p>total atoms in supercell = atoms in unit-cell * np.product([scale1,scale2,scale3])</p> </li> </ul>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> input: string: atomic labels returns: string: uqique atomic labels for each type of atoms"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> input: <pre><code> list of strings of atomic labels\n</code></pre> returns: <pre><code>get integer number of list entries (atomic symbols) of each type\n</code></pre>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_grouped_xyz","title":"<code>get_grouped_xyz()</code>","text":"<p>xyz file with grouped atoms of same type</p>"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.get_sposcar","title":"<code>get_sposcar()</code>","text":"<p>get poscar file with scaled dimensions: supercell of POSCAR file</p> input: instantiate the transform class, rest is done itself output: SPOSCAR file"},{"location":"reference/esta/general/operation/#esta.general.operation.Transform.rot_trans","title":"<code>rot_trans(inp_mat, lcell=None, lposition=None, translation=None, rotation_matrix=None)</code>","text":"<p>given input matrix (may be cell matrix or position matrix in c order)  and rotation matrix (optional; default is unit matrix), output respective new matrix</p> <p>Parameters:</p> <ul> <li> <code>inp_mat</code>               (<code>array</code>)           \u2013            <p>rank 3 or rank N, N is no. of atoms.</p> </li> <li> <code>lcell</code>               (<code>logical</code>, default:                   <code>None</code> )           \u2013            <p>indicates inp_mat is for cell</p> </li> <li> <code>lposition</code>               (<code>logical</code>, default:                   <code>None</code> )           \u2013            <p>indicates that inp_mat is for atomic points/positions</p> </li> <li> <code>translation</code>               (<code>array</code>, default:                   <code>None</code> )           \u2013            <p>rank 1, optional (default is zero vector = (0 0 0))</p> </li> <li> <code>rotation_matrix</code>               (<code>array of rank3</code>, default:                   <code>None</code> )           \u2013            <p>rotation matrix; default is unit matrix</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>out_mat</code> (              <code>array</code> )          \u2013            <p>output matrix of same shape as that of input matrix</p> </li> <li> <code>.. note::</code>           \u2013            <p>following convention like spglib:  .. _spglib: https://spglib.github.io/spglib/definition.html</p> <p>====&gt;  Basis vectors (a,b,c)  or (a1, a2, a3) </p> <p>In spglib, basis vectors are represented by three column vectors (in Cartesian coordinates. ) :</p> <p>a=\u239b\u239d\u239cax ay az\u239e\u23a0\u239f,         b=\u239b\u239d\u239cbx by bz\u239e\u23a0\u239f,            c=\u239b\u239d\u239ccx cy cz\u239e\u23a0\u239f,</p> <p>====&gt; atomic point x are represented as three fractional values relative to basis  vectors as follows,</p> <p>x=\u239b\u239d\u239cx1x2x3\u239e\u23a0\u239f</p> <p>====&gt; The transformation matrix P changes choice of basis vectors as follows (a b c) = (as bs cs) P where (abc) and (as bs cs) are the basis vectors of an arbitrary  system and of a starndardized system, respectively</p> <p>The origin shift p gives the vector from the origin of the standardized  system Os to the origin of the arbitrary system O <code>p = O \u2212 Os</code></p> <p>A change of basis is described by the combination of the transformation matrix and the origin shift denoted by (P,p) where first the transformation  matrix is applied and then origin shift. The points in the standardized system xs and arbitrary system x are related by </p> <p><code>xs = P x + p</code>,</p> <p>or equivalently, </p> <p><code>x = P^-1 xs \u2212 P^-1 p</code></p> </li> </ul>"},{"location":"reference/esta/general/peak_position_and_average_1D/","title":"esta.general.peak_position_and_average_1D","text":""},{"location":"reference/esta/general/peak_position_and_average_1D/#esta.general.peak_position_and_average_1D","title":"<code>esta.general.peak_position_and_average_1D</code>","text":""},{"location":"reference/esta/general/peak_position_and_average_1D/#esta.general.peak_position_and_average_1D.get_location_peak_and_average","title":"<code>get_location_peak_and_average(y, x, eps=None)</code>","text":"<p>NOTE: it is finding of LOCATION OF PEAK AND AVERAGE !!!</p> <ul> <li>finding index of peak position of a 1D function</li> <li>finding index of average of 1D function not taking into account the function     values below epsilon (epsilon = 1e-2 or other values)</li> </ul> <p>input:     array, x: xvariable     array, y: function 1D; y variable     float, eps: cutoff below which all values of y array are neglected</p> <p>output:     float, peak location or max of the function     float, average position or average of 1D function</p>"},{"location":"reference/esta/general/pseudo_info/","title":"esta.general.pseudo_info","text":""},{"location":"reference/esta/general/pseudo_info/#esta.general.pseudo_info","title":"<code>esta.general.pseudo_info</code>","text":""},{"location":"reference/esta/general/pseudo_info/#esta.general.pseudo_info.get_pseudo_tags","title":"<code>get_pseudo_tags(atomic_species)</code>","text":"<p>get ATOMIC_SPECIES information required for generating  qe-input file</p> <p>input:     list of elements;  output:     output file containing:     label of elements, mass, and UPF files</p>"},{"location":"reference/esta/general/quat2rotation/","title":"esta.general.quat2rotation","text":""},{"location":"reference/esta/general/quat2rotation/#esta.general.quat2rotation","title":"<code>esta.general.quat2rotation</code>","text":""},{"location":"reference/esta/general/quat2rotation/#esta.general.quat2rotation.quat2rot","title":"<code>quat2rot(p)</code>","text":"<p>get rotation matrix from quaternion</p>"},{"location":"reference/esta/general/rate_const_IS0_TS1/","title":"esta.general.rate_const_IS0_TS1","text":""},{"location":"reference/esta/general/rate_const_IS0_TS1/#esta.general.rate_const_IS0_TS1","title":"<code>esta.general.rate_const_IS0_TS1</code>","text":"<p>rate constant calculations</p> <p>for A* ---&gt; B* kind of surface reaction </p> <p>rate constant  ~ r =  A * exp ( -Ea/kbT )</p> <p>where:        A = ( kb * T/ h ) * (q_vib_TS / q_vib_A*)       q = vib partition function = product_i (1/(1-expt(-h*nu_i / kbT))  )</p>"},{"location":"reference/esta/general/read_force_constant/","title":"esta.general.read_force_constant","text":""},{"location":"reference/esta/general/read_force_constant/#esta.general.read_force_constant","title":"<code>esta.general.read_force_constant</code>","text":""},{"location":"reference/esta/general/read_force_constant/#esta.general.read_force_constant.read_force_constant_phonopy","title":"<code>read_force_constant_phonopy(filename)</code>","text":"<p>read force constant from the phonopy.yaml file created using the following command; phonopy --qe --cell ScPtO.scf2phon.in --include-fc  -p band.conf | tee x.out</p> <p>the band.conf contains the following lines: DIM = 1 1 1 PRIMITIVE_AXIS = AUTO BAND = 0. 0. 0. 0 0 0.1 BAND_POINTS=1 WRITEDM = .TRUE.</p> <p>.. note::     the force constant are extraced from the q=0 calculation done using phonopy with      qe as the backend. Should work for all the non-zero qpts as well..not test yet!!</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, phonopy.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>lattice</code> (              <code>array</code> )          \u2013            <p>cell vectors</p> </li> <li> <code>symbol</code> (              <code>list</code> )          \u2013            <p>list of symbols</p> </li> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>masses</code> (              <code>array of scalars</code> )          \u2013            <p>mass of atoms</p> </li> <li> <code>force_constant</code> (              <code>array</code> )          \u2013            <p>force constant between pair of atoms</p> </li> </ul>"},{"location":"reference/esta/general/read_jmol/","title":"esta.general.read_jmol","text":""},{"location":"reference/esta/general/read_jmol/#esta.general.read_jmol","title":"<code>esta.general.read_jmol</code>","text":"<p>read jmol file and extract the xyz file data: - atomic symbols  - atomic positions</p>"},{"location":"reference/esta/general/read_jmol/#esta.general.read_jmol.get_xyz_data","title":"<code>get_xyz_data(filename)</code>","text":"<p>read jmol file created from jmol software and  return atomic positions and atomic labels</p> input: <pre><code>filename: string\n</code></pre> output: <pre><code>atomic_position: array of rank 2\nsymbol : list of atomic symbols\n</code></pre>"},{"location":"reference/esta/general/read_kappa/","title":"esta.general.read_kappa","text":""},{"location":"reference/esta/general/read_kappa/#esta.general.read_kappa","title":"<code>esta.general.read_kappa</code>","text":""},{"location":"reference/esta/general/read_kappa/#esta.general.read_kappa.ReadKappaCSV","title":"<code>ReadKappaCSV(file_path)</code>","text":"<p>read kappa lattice from csv file into an array of rank 2</p> <p>the format of csv file is:     # 8 columns: T, k_xx, k_yy, k_zz, k_xz, k_yz, k_xy, k_ave.</p>"},{"location":"reference/esta/general/read_xyz/","title":"esta.general.read_xyz","text":""},{"location":"reference/esta/general/read_xyz/#esta.general.read_xyz","title":"<code>esta.general.read_xyz</code>","text":""},{"location":"reference/esta/general/read_xyz/#esta.general.read_xyz.read_xyz_file","title":"<code>read_xyz_file(filename, lcharge=False)</code>","text":"<p>read xyz file </p> input: output:"},{"location":"reference/esta/general/reciprocal_lattice/","title":"esta.general.reciprocal_lattice","text":""},{"location":"reference/esta/general/reciprocal_lattice/#esta.general.reciprocal_lattice","title":"<code>esta.general.reciprocal_lattice</code>","text":"<p>method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/general/reciprocal_lattice/#esta.general.reciprocal_lattice.reciprocal_lattice","title":"<code>reciprocal_lattice(LV1, LV2, LV3)</code>","text":"<p>input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/general/rename/","title":"esta.general.rename","text":""},{"location":"reference/esta/general/rename/#esta.general.rename","title":"<code>esta.general.rename</code>","text":""},{"location":"reference/esta/general/rename/#esta.general.rename.split_string","title":"<code>split_string(source, separators)</code>","text":"<p>string split using regex</p>"},{"location":"reference/esta/general/rename/#esta.general.rename.to_file","title":"<code>to_file(filename, separator=None, ilength=None, from_end=None, file_extension=False)</code>","text":"<p>rename file/files to a name derived from the original name by  truncating it using separator. By default, if there is not input separator and ilength (no. of splitted componnets in the filename),  then new_ is prefix before the original files</p>"},{"location":"reference/esta/general/rename_general/","title":"esta.general.rename_general","text":""},{"location":"reference/esta/general/rename_general/#esta.general.rename_general","title":"<code>esta.general.rename_general</code>","text":""},{"location":"reference/esta/general/rename_general/#esta.general.rename_general.to_file_any","title":"<code>to_file_any(iname, str_indx, first_indx_only=None, file_extension=None)</code>","text":"<p>renaming files (xyz/POSCAR, or any file extension possible) to a name derived from the part of the  original filename. </p> Parameters: <p>iname: str     name of the input file str_indx: list or list of lists     part of the name of input file e.g [1,-2] separated     by _ separator. The last index may be ignored usin first_indx_only option (see next data type)     first_indx_only (optional): whether to ignore the last str_indx in the      in the input file name. if True then the -2 in the str_indx=[1,-2] is ignored.      And if False then -2 is included i.e. str_indx = [1,-2+1] is taken (all strs/data with indices     from 1 to -2 is taken, Note that in python last index is excluded)     If list of list: example: [[0,1],[3,4]]; the last index is included in the implementation first_indx_only: boolean     whether only first index in the list indices to be considered; if false both list input indices      are considered file_extension: str     may be xyz or POSCAR or any extension (e.g. .in, so on)</p> Returns: <p>renamed input file/files</p>"},{"location":"reference/esta/general/rename_general/#esta.general.rename_general.to_file","title":"<code>to_file(iname, str_indx, first_indx_only=None, file_extension=None)</code>","text":"<p>renaming files to a name derived from the part of the  original filename. </p> parameters: <p>iname: name of the input file str_indx: part of the name of input file e.g [1,-2] separated           by _ separator. The last index may be ignored usin first_indx_only option (see next data type) first_indx_only (optional): whether to ignore the last str_indx in the   in the input file name. if True then the -2 in the str_indx=[1,-2] is   ignored.   And if False then -2 is included i.e. str_indx = [1,-2+1] is taken (all strs/data with indices  from 1 to -2 is taken, Note that in python last index is excluded)</p>"},{"location":"reference/esta/general/reverse_array/","title":"esta.general.reverse_array","text":""},{"location":"reference/esta/general/reverse_array/#esta.general.reverse_array","title":"<code>esta.general.reverse_array</code>","text":""},{"location":"reference/esta/general/reverse_array/#esta.general.reverse_array.reverse_array","title":"<code>reverse_array(icounter)</code>","text":"<p>reverse the interger array i.e. save the elements in reverse order</p> <p>similary a real array can be reversed!!</p>"},{"location":"reference/esta/general/rodrigues/","title":"esta.general.rodrigues","text":""},{"location":"reference/esta/general/rodrigues/#esta.general.rodrigues","title":"<code>esta.general.rodrigues</code>","text":""},{"location":"reference/esta/general/rodrigues/#esta.general.rodrigues.get_rotation_matrix_rodrigues_vec_axis","title":"<code>get_rotation_matrix_rodrigues_vec_axis(input_uvec, required_uvec_direction=None)</code>","text":"<p>rotate a vector about an arbitray axis by some angle theta so as to align  it along x/y/z axis by using Rodrigues's formula</p> <p>Or find the rotation matrix using Rodrigues formula (both points are same!!)</p> <p>Parameters:</p> <ul> <li> <code>input_uvec</code>           \u2013            <p>3D unit vector (non-unit vector should also work, e.g. for the case of atomic positions)</p> </li> <li> <code>required_uvec_direction</code>           \u2013            <p>required unit vector direction, default is x-axis</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>R</code> (              <code>array of rank2</code> )          \u2013            <p>rotation matrix for rotating the input_vec along the input direction </p> </li> <li> <code>----------------</code>           \u2013            </li> <li> <code>The Rodrigues rotation formula gives us the following way to rotate a vector v\u20d7  by some angle \u03b8 about an arbitrary axis k\u20d7 </code>           \u2013            </li> <li> <code>v\u20d7 rot=v\u20d7 cos(\u03b8)+(k\u20d7 \u00d7v\u20d7 )sin(\u03b8)+k\u20d7 (k\u20d7 \u22c5v\u20d7 )(1\u2212cos\u03b8)</code>           \u2013            </li> <li> <code>Let's call this the \"vector notation\" There is also a way to obtain the corresponding rotation matrix R</code>           \u2013            </li> <li> <code>, as such:</code>           \u2013            </li> <li> <code>R=I+(sin\u03b8)K+(1\u2212cos\u03b8)K2</code>           \u2013            </li> <li> <code>\u2193</code>           \u2013            </li> <li> <code>v\u20d7 rot=Rv\u20d7 </code>           \u2013            </li> <li> <code>where K</code>           \u2013            </li> <li> <code>is the cross-product matrix of the rotation axis:</code>           \u2013            </li> <li> <code>K=\u239b\u239d\u239c0kz\u2212ky\u2212kz0kxky\u2212kx0\u239e\u23a0\u239f</code>           \u2013            </li> <li> <code>See here: https://math.stackexchange.com/questions/2828802/angle-definition-confusion-in-rodrigues-rotation-matrix</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/rodrigues/#esta.general.rodrigues.get_rotation_matrix_rodrigues_vectors","title":"<code>get_rotation_matrix_rodrigues_vectors(vec1, vec2)</code>","text":"<p>Get a rotation matrix which rotates vec1 onto vec2 with the help of  Euler-Rodrigues'rotation formula. This method is somewhat more general  than the get_rotation_matrix_rodrigues_vec_axis method</p> <p>..note::     See the question on SO: Calculate Rotation Matrix to align Vector A to Vector B in 3D?     https://math.stackexchange.com/questions/180418/calculate-rotation-matrix-to-align-vector-a-to-vector-b-in-3d/476311#476311</p> Parameters: <p>vec1 : array     3d array, initial pt in 3D space vec2 : array     3d array target pt after rotation in 3d space</p> Returns: <p>rot_mat : array of rank 2 (matrix)     Rotation matrix which transforms vec1 into vec2</p>"},{"location":"reference/esta/general/rodrigues1/","title":"esta.general.rodrigues1","text":""},{"location":"reference/esta/general/rodrigues1/#esta.general.rodrigues1","title":"<code>esta.general.rodrigues1</code>","text":""},{"location":"reference/esta/general/rodrigues1/#esta.general.rodrigues1.get_rotation_matrix_rodrigues","title":"<code>get_rotation_matrix_rodrigues(input_uvec, required_uvec_direction=None)</code>","text":"<p>rotate a vector about an arbitray axis by some angle theta so as to align  it along x/y/z axis by using Rodrigues's formula</p> <p>Or find the rotation matrix using Rodrigues formula (both points are same!!)</p> <p>Parameters:</p> <ul> <li> <code>input_uvec</code>           \u2013            <p>3D unit vector (non-unit vector should also work, e.g. for the case of atomic positions)</p> </li> <li> <code>required_uvec_direction</code>           \u2013            <p>required unit vector direction, default is x-axis</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>R</code> (              <code>array of rank2</code> )          \u2013            <p>rotation matrix for rotating the input_vec along the input direction </p> </li> <li> <code>----------------</code>           \u2013            </li> <li> <code>The Rodrigues rotation formula gives us the following way to rotate a vector v\u20d7  by some angle \u03b8 about an arbitrary axis k\u20d7 </code>           \u2013            </li> <li> <code>v\u20d7 rot=v\u20d7 cos(\u03b8)+(k\u20d7 \u00d7v\u20d7 )sin(\u03b8)+k\u20d7 (k\u20d7 \u22c5v\u20d7 )(1\u2212cos\u03b8)</code>           \u2013            </li> <li> <code>Let's call this the \"vector notation\" There is also a way to obtain the corresponding rotation matrix R</code>           \u2013            </li> <li> <code>, as such:</code>           \u2013            </li> <li> <code>R=I+(sin\u03b8)K+(1\u2212cos\u03b8)K2</code>           \u2013            </li> <li> <code>\u2193</code>           \u2013            </li> <li> <code>v\u20d7 rot=Rv\u20d7 </code>           \u2013            </li> <li> <code>where K</code>           \u2013            </li> <li> <code>is the cross-product matrix of the rotation axis:</code>           \u2013            </li> <li> <code>K=\u239b\u239d\u239c0kz\u2212ky\u2212kz0kxky\u2212kx0\u239e\u23a0\u239f</code>           \u2013            </li> <li> <code>See here: https://math.stackexchange.com/questions/2828802/angle-definition-confusion-in-rodrigues-rotation-matrix</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/rott/","title":"esta.general.rott","text":""},{"location":"reference/esta/general/rott/#esta.general.rott","title":"<code>esta.general.rott</code>","text":""},{"location":"reference/esta/general/rott/#esta.general.rott.kabsch_fit","title":"<code>kabsch_fit(P, Q, W)</code>","text":"<p>Rotate and translate matrix P unto matrix Q using Kabsch algorithm. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>)           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated and translated.</p> </li> </ul>"},{"location":"reference/esta/general/shift/","title":"esta.general.shift","text":""},{"location":"reference/esta/general/shift/#esta.general.shift","title":"<code>esta.general.shift</code>","text":"<p>method to shift atoms: - shift atoms in xyz file along a direction - shift atoms in xyz file to origin  - to get CM see thermo class -- already implemented</p> <p>author: skumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.centroid","title":"<code>centroid(array)</code>","text":"<p>find centroid of a set of points in array</p> <p>if name == \"main\":     import numpy as np     A= np.random.randint(3,size=(9,3)) #(33,3) #.reshape(33,3)     print(A)     print (centroid(A))</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift_to_origin","title":"<code>shift_to_origin(filename)</code>","text":"<p>method/function to shift atoms: - shift atoms in xyz file to origin</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift","title":"<code>shift(filename, xshift, yshift, zshift)</code>","text":"<p>shift atoms in xyz file along a direction  with some value in each direction</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift_x","title":"<code>shift_x(pos, symbol, xshift, yshift, zshift)</code>","text":"<p>similar to shift, except position and atomic symbol are input instead of xyz file</p> Note <p>name of outfile is needed</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift_many","title":"<code>shift_many(pos_all, symbol_one, xshift, yshift, zshift)</code>","text":"Note <p>here symb of only one atomic structure are provided</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift_xyzs","title":"<code>shift_xyzs(filename, ref_str, atm_indx, target_str=None, dshift=None)</code>","text":"<p>shift a specific atom in an atomic-structure along a direction wrt to the same atom in another atomic-structure in the xyzs (many xyz) in a file</p> Parameters: <p>filename: str     name of the file with many xyz structures ref_str: integer     index of the reference structure wrt which an atom will be shifted (numbering from 1) atm_indx: integer     atom index with numbering starting from 1 target_str: integer     index of the target structure wrt which an atom will be shifted (numbering from 1) dshift : float     shift of atom in an atomic strucutre with respect to the same     atom in another atomic structure     e.g. in neb xyz path, there are different images. shift atom x in image 1 wrt the      same in image 8</p>"},{"location":"reference/esta/general/shift/#esta.general.shift.shift_origin_to_atom","title":"<code>shift_origin_to_atom(filename, atom_no)</code>","text":"<p>shift the origin to specific atom in the xyz (or poscar \u2192 todo) file</p>"},{"location":"reference/esta/general/shift0/","title":"esta.general.shift0","text":""},{"location":"reference/esta/general/shift0/#esta.general.shift0","title":"<code>esta.general.shift0</code>","text":"<p>method/function to shift atoms: - shift atoms in xyz file along a direction - shift atoms in xyz file to origin</p>"},{"location":"reference/esta/general/shift0/#esta.general.shift0.centroid","title":"<code>centroid(array)</code>","text":"<p>find centroid of a set of points in array</p>"},{"location":"reference/esta/general/shift0/#esta.general.shift0.shift_to_origin","title":"<code>shift_to_origin(filename)</code>","text":"<p>method/function to shift atoms: - shift atoms in xyz file to origin </p> <p>Here more to do: calculate CM or centroid??? todo????? sk!!</p>"},{"location":"reference/esta/general/shift0/#esta.general.shift0.shift","title":"<code>shift(filename, xshift, yshift, zshift)</code>","text":"<p>method/function to shift atoms: - shift atoms in xyz file along a direction</p>"},{"location":"reference/esta/general/shift_atom_test_old/","title":"esta.general.shift_atom_test_old","text":""},{"location":"reference/esta/general/shift_atom_test_old/#esta.general.shift_atom_test_old","title":"<code>esta.general.shift_atom_test_old</code>","text":""},{"location":"reference/esta/general/shift_poscar/","title":"esta.general.shift_poscar","text":""},{"location":"reference/esta/general/shift_poscar/#esta.general.shift_poscar","title":"<code>esta.general.shift_poscar</code>","text":""},{"location":"reference/esta/general/shift_poscar/#esta.general.shift_poscar.shift_poscar","title":"<code>shift_poscar(poscar_file_target, poscar_file_reference, target_atom_index, name_outfile=None)</code>","text":"<p>shift atoms of the poscar wrt to atom present in other similar  poscar file </p> <p>e.g. for NEB calculations between different images in the transition state      calculations</p> input: <pre><code>poscar_file_target: poscar file whose atoms are to be shifted\nposcar_file_reference: poscar file for the reference; wrt which atoms are to be \n                        shifted\ntarget_atom_indexr: atom index (starting from 1) in the referecen poscar file wrt to which shift \n                    has be done\n</code></pre>"},{"location":"reference/esta/general/shuffle_output_csv_file_data_adv/","title":"esta.general.shuffle_output_csv_file_data_adv","text":""},{"location":"reference/esta/general/shuffle_output_csv_file_data_adv/#esta.general.shuffle_output_csv_file_data_adv","title":"<code>esta.general.shuffle_output_csv_file_data_adv</code>","text":""},{"location":"reference/esta/general/shuffle_output_csv_file_data_adv/#esta.general.shuffle_output_csv_file_data_adv.get_shuffle_and_filter_data","title":"<code>get_shuffle_and_filter_data(input_csv_file, ext_dat_file)</code>","text":"<p>shuffle and filtering the data (specifically the rows) of output.csv file obtained from gaussian log file; the output.csv file contains data such as energies, homo, lumo etc.</p> <p>The suffling of the data should be done according to another (external) file i.e. the first  column of the xx..sort..csv file (the first column is the integer index for all  the files which are to be considered for data plotting).</p> <p>.. note::     This method is used for gaussian log files; logfiles\u2192 output.csv file\u2192 shuffle/filter \u2192 output_.csv file and      then you have two files: output_.csv and output_'.csv file (one for cation, and another for anion system)</p> <p>Parameters:</p> <ul> <li> <code>input_csv_file</code>           \u2013            <p>name of the output*csv file whose data is to be shuffled</p> </li> <li> <code>ext_dat_file</code>           \u2013            <p>dat file containing column of integers; these are the indices for xyz files and output.csv  file should have these indices in the xyz file names</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>output</code> (              <code>str</code> )          \u2013            <p>output file with data reshuffled from that of input_file</p> </li> </ul>"},{"location":"reference/esta/general/stack/","title":"esta.general.stack","text":""},{"location":"reference/esta/general/stack/#esta.general.stack","title":"<code>esta.general.stack</code>","text":""},{"location":"reference/esta/general/stack/#esta.general.stack.get_stacked0","title":"<code>get_stacked0(file_xyzpath, stack_dist_x, stack_dist_y, stack_dist_z, n_repeat)</code>","text":"<p>stack All atoms or group of atoms along a direction to create stacking of atoms/molecules</p> <p>Parameters:</p> <ul> <li> <code>file_xyzpath</code>               (<code>str</code>)           \u2013            <p>path file</p> </li> <li> <code>stack_dist_x</code>               (<code>float</code>)           \u2013            <p>stacking distance along x direction</p> </li> <li> <code>stack_dist_y</code>               (<code>float</code>)           \u2013            <p>stacking distance along y direction</p> </li> <li> <code>stack_dist_z</code>               (<code>float</code>)           \u2013            <p>stacking distance along z direction</p> </li> <li> <code>n_repeat</code>               (<code>int</code>)           \u2013            <p>how many repetion of atoms along a direction</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    path file is created in the current working directory</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/stack/#esta.general.stack.get_stacked","title":"<code>get_stacked(file_xyzpath, stack_dist_x, stack_dist_y, stack_dist_z, n_repeat, ign_indx)</code>","text":"<p>stack selected atom or group of atoms along a direction to create stacking of  atoms/molecules</p> <p>Parameters:</p> <ul> <li> <code>file_xyzpath</code>               (<code>str</code>)           \u2013            <p>path file</p> </li> <li> <code>stack_dist_x</code>               (<code>float</code>)           \u2013            <p>stacking distance along x direction</p> </li> <li> <code>stack_dist_y</code>               (<code>float</code>)           \u2013            <p>stacking distance along y direction</p> </li> <li> <code>stack_dist_z</code>               (<code>float</code>)           \u2013            <p>stacking distance along z direction</p> </li> <li> <code>n_repeat</code>               (<code>int</code>)           \u2013            <p>how many repetion of atoms along a direction</p> </li> <li> <code>ign_indx</code>           \u2013            <p>list of atoms indices to ignored for the stacking/translation (atom numbering start from 1)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    path file is created in the current working directory</code>           \u2013            </li> </ul> Note <p>non-zero stacking distance defines the stacking direction</p>"},{"location":"reference/esta/general/substitute_atom/","title":"esta.general.substitute_atom","text":""},{"location":"reference/esta/general/substitute_atom/#esta.general.substitute_atom","title":"<code>esta.general.substitute_atom</code>","text":""},{"location":"reference/esta/general/substitute_atom/#esta.general.substitute_atom.substitute_atom_by_atoms","title":"<code>substitute_atom_by_atoms(atomid, atom_id_subs=1, xyzfile=None, xyz_subs_file=None)</code>","text":"Notes <p>substitute an atom (specified by the atomid) in xyzfile with ligand present in xyz_subs_file. atom_id_subs is the atom (in the ligand) approaching to atom indexed by the atomid (in main xyz str). generally atom_id_subs is 1</p> <p>Parameters:</p> <ul> <li> <code>atomid</code>           \u2013            <p>atom number which is to be substituted in the xyz file</p> </li> <li> <code>atom_id_subs</code>           \u2013            <p>atom with atom number (in the ligand) approaching to atom (specified by the atomid) in xyz;  default is 1 IN other words, which atom in the ligand is to be placed at the atom (specified by the atomid)</p> </li> <li> <code>xyzfile</code>           \u2013            <p>name of input xyz file</p> </li> <li> <code>xyz_subs_file</code>           \u2013            <p>name of the xyz file with substituent/ligand in it</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    a new xyz file with ligand or substituent is created</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/substitute_atom/#esta.general.substitute_atom.substitute_atom_by_atoms_in_path","title":"<code>substitute_atom_by_atoms_in_path(atomid, atom_id_subs=1, xyzfile_list=None, xyz_subs_file=None)</code>","text":"<p>substitute an atom in a list of files with ligand present in xyz_subs_file atom_id_subs is the atom if for atom approaching to atomid in main xyz str generally atom_id_subs is 1</p> <p>Parameters:</p> <ul> <li> <code>atomid</code>           \u2013            <p>atom number which is to be substituted in the xyz file</p> </li> <li> <code>atom_id_subs</code>           \u2013            <p>atom with atom number (in the ligand) approaching to atom (specified by the atomid) in xyz;  default is 1 IN other words, which atom in the ligand is to be placed at the atom (specified by the atomid)</p> </li> <li> <code>xyzfile_list</code>           \u2013            <p>list of many xyz file (this constitute the path or trajectory)</p> </li> <li> <code>xyz_subs_file</code>           \u2013            <p>name of the xyz file with substituent/ligand in it</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    a new xyz file with ligand or substituent is created</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/substitute_atom/#esta.general.substitute_atom.substitute_atom_by_atoms_in_path_","title":"<code>substitute_atom_by_atoms_in_path_(atomid, atom_id_subs=1, xyzfile_path=None, xyz_subs_file=None)</code>","text":"Note <p>similar to method substitute_atom_by_atoms_in_path, but instead of xyzfile_list; a new variable xyzfile_path for just  one xyz path file is used; this make things easy </p> <p>Parameters:</p> <ul> <li> <code>atomid</code>           \u2013            <p>atom number which is to be substituted in the xyz file</p> </li> <li> <code>atom_id_subs</code>           \u2013            <p>atom with atom number (in the ligand) approaching to atom (specified by the atomid) in xyz;  default is 1 IN other words, which atom in the ligand is to be placed at the atom (specified by the atomid)</p> </li> <li> <code>xyzfile_path</code>           \u2013            <p>path file in xyz format</p> </li> <li> <code>xyz_subs_file</code>           \u2013            <p>name of the xyz file with substituent/ligand in it</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>    a new xyz file with ligand or substituent is created</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/sum_dictionaries/","title":"esta.general.sum_dictionaries","text":""},{"location":"reference/esta/general/sum_dictionaries/#esta.general.sum_dictionaries","title":"<code>esta.general.sum_dictionaries</code>","text":""},{"location":"reference/esta/general/sum_dictionaries/#esta.general.sum_dictionaries.sum_dictionaries","title":"<code>sum_dictionaries(dict1, dict2)</code>","text":"<p>sum values of two identical dictionaries to get a new dictionary with updated values, </p> <p>NOTE: here format of the two dictionaries is as follows:</p> <p>dict1 = {'freq_expt_ethene.dat': {'298.15 K': '-564.632', '500.0 K': '-565.144', '600.0 K': '-565.417', '700 K': '-565.703', '800 K': '-566.000', '900 K': '-566.308', '1000 K': '-566.626'}} dict2 = {'freq_expt_H2O.dat': {'298.15 K': '-32556.942', '500.0 K': '-32557.369', '600.0 K': '-32557.592', '700 K': '-32557.822', '800 K': '-32558.058', '900 K': '-32558.298', '1000 K': '-32558.543'}}</p> <p>after addition only values in dictionary of dictionaries is updated and key in the dictionary of dictionary remain unchanged!!</p> <p>author = 'sk' email = 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/general/supercell_frame/","title":"esta.general.supercell_frame","text":""},{"location":"reference/esta/general/supercell_frame/#esta.general.supercell_frame","title":"<code>esta.general.supercell_frame</code>","text":""},{"location":"reference/esta/general/superpose3D_se/","title":"esta.general.superpose3D_se","text":""},{"location":"reference/esta/general/superpose3D_se/#esta.general.superpose3D_se","title":"<code>esta.general.superpose3D_se</code>","text":"<p>This module contains the definition of the Superpose3D() function used for  registering two point clouds of known correspondence. (It is documented below.)</p> <p>Note: The original version of this code contained for-loops.  Newer versions of       this code use numpy expressions to avoid for-loops, however the original       code remains in quoted comments because some users find it easier to read.</p>"},{"location":"reference/esta/general/superpose3D_se/#esta.general.superpose3D_se.Superpose3D","title":"<code>Superpose3D(aaXf_orig, aaXm_orig, aWeights=None, allow_rescale=False, report_quaternion=False)</code>","text":"<p>Superpose3D() takes two lists of xyz coordinates, (of the same length) and attempts to superimpose them using rotations, translations, and  (optionally) rescale operations in order to minimize the  root-mean-squared-distance (RMSD) between them. These operations should be applied to the \"aaXm_orig\" argument. This function returns a tuple containing:   (RMSD, optimal_translation, optimal_rotation, and optimal_scale_factor) More detailed documentation can be found in the repository's README.md file. This function implements a more general variant of the method described in this paper R. Diamond, (1988) Acta Cryst. A44, pp. 211-216   \"A note on the rotational superposition problem\"   https://doi.org/10.1107/S0108767387010535 This version has been augmented slightly.  The version in the original  paper only considers rotation and translation and does not allow the  coordinates of either object to be rescaled (multiplication by a scalar).</p>"},{"location":"reference/esta/general/symbol_from_atm_number/","title":"esta.general.symbol_from_atm_number","text":""},{"location":"reference/esta/general/symbol_from_atm_number/#esta.general.symbol_from_atm_number","title":"<code>esta.general.symbol_from_atm_number</code>","text":""},{"location":"reference/esta/general/symbol_from_atm_number/#esta.general.symbol_from_atm_number.get_symbol_from_atomic_number","title":"<code>get_symbol_from_atomic_number(self, atomic_num)</code>","text":"<p>return list of atomic symbols from list of atomic numbers Note: also see the internal python script to do the same .. although a bit faster!!</p>"},{"location":"reference/esta/general/table_latex/","title":"esta.general.table_latex","text":""},{"location":"reference/esta/general/table_latex/#esta.general.table_latex","title":"<code>esta.general.table_latex</code>","text":""},{"location":"reference/esta/general/table_latex/#esta.general.table_latex.to_bmatrix","title":"<code>to_bmatrix(a)</code>","text":"<p>Returns a LaTeX bmatrix</p> <p> numpy array :returns: LaTeX bmatrix as a string</p>"},{"location":"reference/esta/general/table_latex/#esta.general.table_latex.to_table_latex","title":"<code>to_table_latex(a)</code>","text":"<p>Returns a LaTeX table with caption</p> <p> numpy array :returns: LaTeX table as a string</p>"},{"location":"reference/esta/general/thermo/","title":"esta.general.thermo","text":""},{"location":"reference/esta/general/thermo/#esta.general.thermo","title":"<code>esta.general.thermo</code>","text":"<p>this is thermo class for calculating the energy contribution coming from  the translational, rotational , vibrational and electronic degrees of freedom  towards entropy, internal energy, andspecific heat </p> <p>In Nutshell: we need three components</p> <p>enthalpy component H = E + PV</p> <p>entropy components  S </p> <p>free energy components  G = H -TS = E + PV - TS</p> <p>Model under which the thermodynamical quantities can be calculed:</p> <ol> <li> <p>Ideal gas approximation</p> </li> <li> <p>Harmonic approx</p> </li> <li> <p>Hindered rotor and vibrator</p> </li> <li> <p>crystalline materials case</p> </li> </ol> Notes <p>For More information related to theory, see the following: </p> <p>see gaussian thermo pdf file, </p> <p>or chapter 10: essential of compuational chemisty, </p> <p>or html file in the present folder</p> <p>or 'A Note on Thermochemistry' by openmopac manual</p> <p>or Introduction to computational chemistry by Jensen chapter 14.5</p> <p>author: sk, email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn","title":"<code>ThermoDyn</code>","text":"<p>thermodyn class to find energies (eV or other units) for  entropy, internal energy, and specific heat with respect to translational, rotational, vibrational, and electronic degrees of freedom</p> <p>Note theat all energies are in eV  or SI units</p> <p>for theory: see gaussian thermo pdf file, or chapter 10: essential of compuational  chemisty, or html file in the present folder</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn.__init__","title":"<code>__init__(E_dft=None, vib_freq=None, E_zpe=None, S_vib=None, E_vib=None, temp=None, type_molecule=None, spin=None, symbols=None, pos=None, symmetry_number=None, pressure=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>E_dft</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>dft energy =  electronic energy = E_ele  in eV</p> </li> <li> <code>vib_freq</code>               (<code>array</code>, default:                   <code>None</code> )           \u2013            <p>array of vibrational freq in eV</p> </li> <li> <code>E_zpe</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>zero point energy in eV</p> </li> <li> <code>S_vib</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>vibrational entropy in eV/K</p> </li> <li> <code>E_vib</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>internal (thermal) energy  energy contribution due to vibrational  motion in eV -- note when multipying exp factors etc... sk</p> </li> <li> <code>temp</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>temp in Kelvin</p> </li> <li> <code>type_molecule</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>linear or non-linear</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>it returns various terms present in the free energy and free energy</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn.get_zpe","title":"<code>get_zpe()</code>","text":"<p>get quantum mechanical zpe energy in eV</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn.get_S_vib","title":"<code>get_S_vib()</code>","text":"<p>get S_vib, vibrational entropy in eV/K</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn.get_E_vib","title":"<code>get_E_vib()</code>","text":"<p>get vibration contribution to internal energy: </p> <p>it contains vibtaration heat capacity contains 3N\u22126 degrees of freedom for nonlinear molecules  and 3N\u22125 degrees of freedom for linear molecules (where N is the number of atoms)</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoDyn.get_moment_inertia","title":"<code>get_moment_inertia()</code>","text":"<p>get moment of inertia of the molecule or other possible system</p> <p>formula: see A note on thermochemistry or else where!!</p> Notes <p>Taken from A note on thermochemisty:</p> <p>IA = \u03a3imi(RAi)2, where i runs over all atoms in the system, mi  is the mass of the atom in amu, and RAi is the distance from the  axis of rotation, A, to atom i in \u00c5ngstroms.</p> <p>The axes of rotation are calculated as follows: </p> <p>First, a 3 by 3 matrix, t,  is constructed, with the elements of t being:</p> <p>t1,1 =  Y2 +  Z2 = \u03a3imi(yi2 + zi2) t1,2 =  -X.Y = -\u03a3imixiyi t2,2 =  X2 +  Z2 = \u03a3imi(xi2 + zi2) t1,3 =  -X.Z = -\u03a3imixizi t2,3 =  -Y.Z = -\u03a3imiyizi t3,3 =  X2 +  Y2 = \u03a3imi(xi2 + yi2)</p> <p>where mi is the mass of the atom in amu, and xi, yi,  and zi, are the Cartesian coordinates of the atoms, in \u00c5ngstroms. Then t is diagonalized. The resulting eigenvalues, (amu \u00c5ngstrom2), are  divided by N.A2, where N=Avogardo's number and A = number of \u00c5ngstroms in a  centimeter, to give the moments of inertia in g.cm2.  Because a useful unit  is 10-40.g.cm2, the moments of inertia are multiplied by 1040 before being printed. The eigenvectors associated with the eigenvalues are the axes of rotation, A, B, and C. </p> <p>Useful conversion factors  1 g cm2  = 1.660540x10-40  (amu \u00c5ngstrom2) Rotational constants in cm-1:  A = hN1016/(8\u03c02c)/(amu \u00c5ngstrom2) A (in MHz) = 5.053791x105/(amu \u00c5ngstrom2)  A (in cm-1) =  5.053791x105/c(amu \u00c5ngstrom2)  = 16.85763/(amu \u00c5ngstrom2)  </p> <p>Parameters:</p> <ul> <li> <code>coordinates</code>               (<code>array</code>)           \u2013            <p>cartesian coordinates of rank 2;  [:,:]</p> </li> <li> <code>symbols</code>               (<code>list</code>)           \u2013            <p>list of atomic symbols (need to calculate the Molecular mass or total mass)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>vector</code> (              <code>array</code> )          \u2013            <p>moment of inertia about axis of rotation A, B, and C; </p> </li> <li> <code>principle axis : array</code>           \u2013            <p>array of rank2, principle axis of rotations, A, B, and C  about which moment of inertia is calculated</p> </li> </ul>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoIdealGas","title":"<code>ThermoIdealGas</code>","text":"<p>               Bases: <code>ThermoDyn</code></p> <p>calculate thermodynamic quantities within the ideal gas approximation</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoIdealGas.get_enthalpy","title":"<code>get_enthalpy(l_ignore=False)</code>","text":"<p>calculate enthapy (H) for ideal gas; H (P,T) = H (T); pressure dependence is not there</p> <p>if l_ignore is True, then enthalpy is set to zero .. 9/11/2024</p> Notes <p>H(P,T) = E + PV = E_electronic (E_DFT) + E_zpe + integrate over T (specific heat capacity  at const P)</p> <p>H(T) = Eelec + EZPE + \u222b C_P dT; integral from 0\u2192T</p> <p>Cp = kB + CV,trans + CV,rot + CV,vib + CV,elec       </p> <p>\u222bCV,vib dT = \u2211  \u03f5i/exp ( \u03f5i/kBT\u22121) ; for linear mol = 3N-5 and 3N-6 nonlinear vibrations</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoIdealGas.get_entropy","title":"<code>get_entropy(l_ignore_S_trans=None)</code>","text":"<p>calculate entropy S(T,P) = S(T,P_0) \u2212 kB ln P/P_0</p> Notes <p>S =  S_trans + S_rot + S_elec + S_vib \u2212 kB ln (P/P_o)</p> <p>1 Pa = 1 N / m2</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoIdealGas.get_Gibbs_free_energy","title":"<code>get_Gibbs_free_energy()</code>","text":"<p>calculate the free energy G at a given temp and pressue</p> Notes <p>(T,P ) = H(T) \u2212 TS (T,P)  + E_DFT</p> <p>E_DFT is energy from DFT calculation ror some other nonDFT calculations</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic","title":"<code>ThermoHarmonic</code>","text":"<p>Harmonic thermodynamics</p> NOTE: <p>Harmonic limit: taken from ASE website:  The conversion of electronic structure calculation information into  thermodynamic properties is less established for adsorbates. However,  the simplest approach often taken is to treat all 3N degrees of freedom of the adsorbate harmonically since the adsorbate often  has no real translational or rotational degrees of freedom. </p> <p>U(T) = E_   ext{elec} + E_  ext{ZPE} +          \\sum_i^     ext{harm DOF} \frac{\\epsilon_i}{e^{\\epsilon_i / k_       ext{B} T} - 1 }</p> <p>S = k_      ext{B} \\sum_i^  ext{harm DOF}     \\left[ \frac{\\epsilon_i}{k_      ext{B}T\\left(e^{\\epsilon_i/k_   ext{B}T}-1 ight)} -          \\ln \\left( 1 - e^{-\\epsilon_i/k_    ext{B}T}  ight) ight]            </p> <p>i.e.  U(T)=Eelec+EZPE+\u2211iharm DOF \u03f5i e\u03f5i/kBT\u22121</p> <p>S=kB \u2211iharm DOF[\u03f5i kBT(e \u03f5i/kBT\u22121)\u2212ln(1\u2212e\u2212\u03f5i/kBT)]</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.__init__","title":"<code>__init__(E_dft=None, E_zpe=None, vib_freq=None, temp=None)</code>","text":"<p>Returns:</p> <ul> <li> <code>    see respecitve methods in the class</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.get_zpe","title":"<code>get_zpe(ignore=False)</code>","text":"<p>Returns the zero-point vibrational energy eV.</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.get_E_vib","title":"<code>get_E_vib(l_ignore=False, set_zero=None)</code>","text":"<p>find the  in internal energy part due to vibrations from 0K to a given temperature in eV. All DOF are considered within the harmonic  approximation</p> <p>if l_ignore is true then internal energy contribution is set to zero set_zero also does the same thing as l_ignore, but in set_zero first inter. energy is calculated and then set to zero!</p> <p>Output the vibration contribution to internal energy:</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.get_S_vib","title":"<code>get_S_vib()</code>","text":"<p>get vibrational entropy in eV/K (3N DOF) given in eV </p> <p>output is entropy and entropy energy in eV/K  and ev/k, respectively.</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.get_internal_energy","title":"<code>get_internal_energy()</code>","text":"<p>find internal energy in eV at a given T in the harmonic approximation taking all DOF (3N) at a given temperature (K).</p> Notes <p>E(T) = U(T) = Eelec+EZPE+\u2211iharm DOF \u03f5i e\u03f5i/kBT\u22121</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHarmonic.get_Helmholtz_free_energy","title":"<code>get_Helmholtz_free_energy()</code>","text":"<p>calculate the Helmholtz free energy </p> Notes <p>G(T ) = H(T) \u2212 TS (T)        #  + E_DFT   # P depenedence negligble; PV term may be...</p> <p>F(T) = U(T)\u2212TS(T) -- Helmholtz free energy</p> <p>assuming PV term to be negligible, we have G(T) equal to F(T)</p> <p>If we assumes that the pV term in H=U+pV is negligible, then the  Helmholtz free energy can be used to approximate the Gibbs free energy, as G=F+pV.</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoHindredRotVib","title":"<code>ThermoHindredRotVib</code>","text":"<p>Hinder vibrational and rotation oscillator thermodynamics</p>"},{"location":"reference/esta/general/thermo/#esta.general.thermo.ThermoLattice","title":"<code>ThermoLattice</code>","text":"<p>Atomic lattice thermodynamics</p>"},{"location":"reference/esta/general/thermo2/","title":"esta.general.thermo2","text":""},{"location":"reference/esta/general/thermo2/#esta.general.thermo2","title":"<code>esta.general.thermo2</code>","text":"<p>this is thermo class for calculating the energy contribution coming from  the translational, rotational , vibrational and electronic degrees of freedom  towards entropy, internal energy, andspecific heat </p> <p>In Nutshell: we need three components</p> <p>enthalpy component H = E + PV</p> <p>entropy components  S </p> <p>free energy components  G = H -TS = E + PV - TS</p> <p>Model under which the thermodynamical quantities can be calculed:</p> <ol> <li> <p>Ideal gas approximation</p> </li> <li> <p>Harmonic approx</p> </li> <li> <p>Hindered rotor and vibrator</p> </li> <li> <p>crystalline materials case</p> </li> </ol> Notes <p>For More information related to theory, see the following: </p> <p>see gaussian thermo pdf file, </p> <p>or chapter 10: essential of compuational chemisty, </p> <p>or html file in the present folder</p> <p>or 'A Note on Thermochemistry' by openmopac manual</p> <p>or Introduction to computational chemistry by Jensen chapter 14.5</p> <p>author: sk, email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn","title":"<code>ThermoDyn</code>","text":"<p>thermodyn class to find energies (eV or other units) for  entropy, internal energy, and specific heat with respect to translational, rotational, vibrational, and electronic degrees of freedom</p> <p>Note theat all energies are in eV  or SI units</p> <p>for theory: see gaussian thermo pdf file, or chapter 10: essential of compuational  chemisty, or html file in the present folder</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn.__init__","title":"<code>__init__(E_dft=None, vib_freq=None, E_zpe=None, S_vib=None, E_vib=None, temp=None, type_molecule=None, spin=None, symbols=None, pos=None, symmetry_number=None, pressure=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>E_dft</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>dft energy =  electronic energy = E_ele  in eV</p> </li> <li> <code>vib_freq</code>               (<code>array</code>, default:                   <code>None</code> )           \u2013            <p>array of vibrational freq in eV</p> </li> <li> <code>E_zpe</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>zero point energy in eV</p> </li> <li> <code>S_vib</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>vibrational entropy in eV/K</p> </li> <li> <code>E_vib</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>internal (thermal) energy  energy contribution due to vibrational  motion in eV -- note when multipying exp factors etc... sk</p> </li> <li> <code>temp</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>temp in Kelvin</p> </li> <li> <code>type_molecule</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>linear or non-linear</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>it returns various terms present in the free energy and free energy</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn.get_zpe","title":"<code>get_zpe()</code>","text":"<p>get quantum mechanical zpe energy in eV</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn.get_S_vib","title":"<code>get_S_vib()</code>","text":"<p>get S_vib, vibrational entropy in eV/K</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn.get_E_vib","title":"<code>get_E_vib()</code>","text":"<p>get vibration contribution to internal energy: </p> <p>it contains vibtaration heat capacity contains 3N\u22126 degrees of freedom for nonlinear molecules  and 3N\u22125 degrees of freedom for linear molecules (where N is the number of atoms)</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoDyn.get_moment_inertia","title":"<code>get_moment_inertia()</code>","text":"<p>get moment of inertia of the molecule or other possible system</p> <p>formula: see A note on thermochemistry or else where!!</p> Notes <p>Taken from A note on thermochemisty:</p> <p>IA = \u03a3imi(RAi)2, where i runs over all atoms in the system, mi  is the mass of the atom in amu, and RAi is the distance from the  axis of rotation, A, to atom i in \u00c5ngstroms.</p> <p>The axes of rotation are calculated as follows: </p> <p>First, a 3 by 3 matrix, t,  is constructed, with the elements of t being:</p> <p>t1,1 =  Y2 +  Z2 = \u03a3imi(yi2 + zi2) t1,2 =  -X.Y = -\u03a3imixiyi t2,2 =  X2 +  Z2 = \u03a3imi(xi2 + zi2) t1,3 =  -X.Z = -\u03a3imixizi t2,3 =  -Y.Z = -\u03a3imiyizi t3,3 =  X2 +  Y2 = \u03a3imi(xi2 + yi2)</p> <p>where mi is the mass of the atom in amu, and xi, yi,  and zi, are the Cartesian coordinates of the atoms, in \u00c5ngstroms. Then t is diagonalized. The resulting eigenvalues, (amu \u00c5ngstrom2), are  divided by N.A2, where N=Avogardo's number and A = number of \u00c5ngstroms in a  centimeter, to give the moments of inertia in g.cm2.  Because a useful unit  is 10-40.g.cm2, the moments of inertia are multiplied by 1040 before being printed. The eigenvectors associated with the eigenvalues are the axes of rotation, A, B, and C. </p> <p>Useful conversion factors  1 g cm2  = 1.660540x10-40  (amu \u00c5ngstrom2) Rotational constants in cm-1:  A = hN1016/(8\u03c02c)/(amu \u00c5ngstrom2) A (in MHz) = 5.053791x105/(amu \u00c5ngstrom2)  A (in cm-1) =  5.053791x105/c(amu \u00c5ngstrom2)  = 16.85763/(amu \u00c5ngstrom2)  </p> <p>Parameters:</p> <ul> <li> <code>coordinates</code>               (<code>array</code>)           \u2013            <p>cartesian coordinates of rank 2;  [:,:]</p> </li> <li> <code>symbols</code>               (<code>list</code>)           \u2013            <p>list of atomic symbols (need to calculate the Molecular mass or total mass)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>vector</code> (              <code>array</code> )          \u2013            <p>moment of inertia about axis of rotation A, B, and C; </p> </li> <li> <code>principle axis : array</code>           \u2013            <p>array of rank2, principle axis of rotations, A, B, and C  about which moment of inertia is calculated</p> </li> </ul>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoIdealGas","title":"<code>ThermoIdealGas</code>","text":"<p>               Bases: <code>ThermoDyn</code></p> <p>calculate thermodynamic quantities within the ideal gas approximation</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoIdealGas.get_enthalpy","title":"<code>get_enthalpy()</code>","text":"<p>calculate enthapy (H) for ideal gas; H (P,T) = H (T); pressure dependence is not there</p> Notes <p>H(P,T) = E + PV = E_electronic (E_DFT) + E_zpe + integrate over T (specific heat capacity  at const P)</p> <p>H(T) = Eelec + EZPE + \u222b C_P dT; integral from 0\u2192T</p> <p>Cp = kB + CV,trans + CV,rot + CV,vib + CV,elec       </p> <p>\u222bCV,vib dT = \u2211  \u03f5i/exp ( \u03f5i/kBT\u22121) ; for linear mol = 3N-5 and 3N-6 nonlinear vibrations</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoIdealGas.get_entropy","title":"<code>get_entropy()</code>","text":"<p>calculate entropy S(T,P) = S(T,P_0) \u2212 kB ln P/P_0</p> Notes <p>S =  S_trans + S_rot + S_elec + S_vib \u2212 kB ln (P/P_o)</p> <p>1 Pa = 1 N / m2</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoIdealGas.get_Gibbs_free_energy","title":"<code>get_Gibbs_free_energy()</code>","text":"<p>calculate the free energy G at a given temp and pressue</p> Notes <p>(T,P ) = H(T) \u2212 TS (T,P)  + E_DFT</p> <p>E_DFT is energy from DFT calculation ror some other nonDFT calculations</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic","title":"<code>ThermoHarmonic</code>","text":"<p>Harmonic thermodynamics</p> NOTE: <p>Harmonic limit: taken from ASE website:  The conversion of electronic structure calculation information into  thermodynamic properties is less established for adsorbates. However,  the simplest approach often taken is to treat all 3N degrees of freedom of the adsorbate harmonically since the adsorbate often  has no real translational or rotational degrees of freedom. </p> <p>U(T) = E_   ext{elec} + E_  ext{ZPE} +          \\sum_i^     ext{harm DOF} \frac{\\epsilon_i}{e^{\\epsilon_i / k_       ext{B} T} - 1 }</p> <p>S = k_      ext{B} \\sum_i^  ext{harm DOF}     \\left[ \frac{\\epsilon_i}{k_      ext{B}T\\left(e^{\\epsilon_i/k_   ext{B}T}-1 ight)} -          \\ln \\left( 1 - e^{-\\epsilon_i/k_    ext{B}T}  ight) ight]            </p> <p>i.e.  U(T)=Eelec+EZPE+\u2211iharm DOF \u03f5i e\u03f5i/kBT\u22121</p> <p>S=kB \u2211iharm DOF[\u03f5i kBT(e \u03f5i/kBT\u22121)\u2212ln(1\u2212e\u2212\u03f5i/kBT)]</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.__init__","title":"<code>__init__(E_dft=None, vib_freq=None, temp=None)</code>","text":"<p>Returns:</p> <ul> <li> <code>    see respecitve methods in the class</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.get_zpe","title":"<code>get_zpe()</code>","text":"<p>Returns the zero-point vibrational energy eV.</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.get_E_vib","title":"<code>get_E_vib(set_zero=None)</code>","text":"<p>find the  in internal energy part due to vibrations from 0K to a given temperature in eV. All DOF are considered within the harmonic  approximation</p> <p>Output the vibration contribution to internal energy:</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.get_S_vib","title":"<code>get_S_vib()</code>","text":"<p>get vibrational entropy in eV/K (3N DOF) given in eV </p> <p>output is entropy and entropy energy in eV/K  and ev/k, respectively.</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.get_internal_energy","title":"<code>get_internal_energy()</code>","text":"<p>find internal energy in eV at a given T in the harmonic approximation taking all DOF (3N) at a given temperature (K).</p> Notes <p>E(T) = U(T) = Eelec+EZPE+\u2211iharm DOF \u03f5i e\u03f5i/kBT\u22121</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHarmonic.get_Helmholtz_free_energy","title":"<code>get_Helmholtz_free_energy()</code>","text":"<p>calculate the Helmholtz free energy </p> Notes <p>G(T ) = H(T) \u2212 TS (T)        #  + E_DFT   # P depenedence negligble; PV term may be...</p> <p>F(T) = U(T)\u2212TS(T) -- Helmholtz free energy</p> <p>assuming PV term to be negligible, we have G(T) equal to F(T)</p> <p>If we assumes that the pV term in H=U+pV is negligible, then the  Helmholtz free energy can be used to approximate the Gibbs free energy, as G=F+pV.</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoHindredRotVib","title":"<code>ThermoHindredRotVib</code>","text":"<p>Hinder vibrational and rotation oscillator thermodynamics</p>"},{"location":"reference/esta/general/thermo2/#esta.general.thermo2.ThermoLattice","title":"<code>ThermoLattice</code>","text":"<p>Atomic lattice thermodynamics</p>"},{"location":"reference/esta/general/toaxsf/","title":"esta.general.toaxsf","text":""},{"location":"reference/esta/general/toaxsf/#esta.general.toaxsf","title":"<code>esta.general.toaxsf</code>","text":""},{"location":"reference/esta/general/toaxsf/#esta.general.toaxsf.get_axsf","title":"<code>get_axsf(xyz_path, poscar_file=None, axsf_name=None)</code>","text":"<p>get axsf path/trajectory from xyz path data</p>"},{"location":"reference/esta/general/unique_array/","title":"esta.general.unique_array","text":""},{"location":"reference/esta/general/unique_array/#esta.general.unique_array","title":"<code>esta.general.unique_array</code>","text":""},{"location":"reference/esta/general/unique_array/#esta.general.unique_array.get_unique_array","title":"<code>get_unique_array(array_data)</code>","text":"<p>get unique array elements with indices in an array</p>"},{"location":"reference/esta/general/unique_id/","title":"esta.general.unique_id","text":""},{"location":"reference/esta/general/unique_id/#esta.general.unique_id","title":"<code>esta.general.unique_id</code>","text":""},{"location":"reference/esta/general/use_pbc_ASE/","title":"esta.general.use_pbc_ASE","text":""},{"location":"reference/esta/general/use_pbc_ASE/#esta.general.use_pbc_ASE","title":"<code>esta.general.use_pbc_ASE</code>","text":""},{"location":"reference/esta/general/use_pbc_ASE/#esta.general.use_pbc_ASE.general_find_mic","title":"<code>general_find_mic(v, cell, pbc=True)</code>","text":"<p>Finds the minimum-image representation of vector(s) v. Using the Minkowski reduction the algorithm is relatively slow but safe for any cell.</p>"},{"location":"reference/esta/general/vacuum_level/","title":"esta.general.vacuum_level","text":""},{"location":"reference/esta/general/vacuum_level/#esta.general.vacuum_level","title":"<code>esta.general.vacuum_level</code>","text":""},{"location":"reference/esta/general/vacuum_level/#esta.general.vacuum_level.vacuum_location","title":"<code>vacuum_location(posfile, vacuum_dir)</code>","text":"<p>find the middle of the vacuum in a poscar file  along a direction</p> <p>posfile is POSCAR  vacuum_dir is 'x','y' or 'z'</p>"},{"location":"reference/esta/general/xsf/","title":"esta.general.xsf","text":""},{"location":"reference/esta/general/xsf/#esta.general.xsf","title":"<code>esta.general.xsf</code>","text":""},{"location":"reference/esta/general/xsf2cube/","title":"esta.general.xsf2cube","text":""},{"location":"reference/esta/general/xsf2cube/#esta.general.xsf2cube","title":"<code>esta.general.xsf2cube</code>","text":""},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/","title":"esta.general.xtb_calculator_for_EStA_21012025_v2","text":""},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2","title":"<code>esta.general.xtb_calculator_for_EStA_21012025_v2</code>","text":"<p>!!-----------------------------------------------------------------------------!! !   interface to xTB code and extracting energy, position, gradient,  !   and hessian (possibly) to EStA software</p> <p>!   author : skumar !   email: sonukumar.physics@gmail.com !!-----------------------------------------------------------------------------!!</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.XTB","title":"<code>XTB</code>","text":"<p>XTB class to         - read xyz file  #extract xyz file from the xxx_INP4GEN.rrm file         - read INPUT for              -- reading the spin/charge values  #needed to create *.xcontrol file from GRRM18 xxx.com file             -- reading the task E, EG, or EGH (Energy, gradient, and hessian)  #to perform by reading the *_INP4GEN.rrm file generated by GRRM17         - create *.xcontrol file from xyz and INPUT (basically *xyz is read automatically ..confirm it??)         - finally read energy, gradient, and/or hessian from xtb output</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.XTB.get_xtb_xcontrol","title":"<code>get_xtb_xcontrol()</code>","text":"<p>get xt.xcontrol file by reading the  - charge and multiplicity  - other contraints from xyz object</p> <p>Note: to get no of un-paired electrons (Ue) from multiplicity (M)=2S+1     Ue = 0 (2*S) for M=1, S=0 (no unpaired elctrons)     Ue = 1 (2*S) for M=2, S=\u00bd (one unpaired elctrons)     Ue = 2 (2*S) for M=3, S=1 (two  unpaired elctrons)     ===&gt; Ue = M-1</p> <p>the fixed atoms are provided from the external xyz-object aka aadhaar object and atoms positions/symbols also. the charge and spin are Hard coded: charge = 0 , and unpaired electon (xtb need Ue not spin) = 0</p> Note <pre><code>xt.xcontrol example:\n$chrg 0\n$spin 0\n$fix\natoms: 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\natoms: 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67\n$end\n</code></pre>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.XTB.get_task","title":"<code>get_task()</code>","text":"<p>TASK: ENERGY, GRADIENT, and HESSIAN GUESS: READ FROM test_MO2GEN.rrm NACTIVEATOM / NATOM: 3 / 3 NFROZENATOM: 0</p> <p>more to implement such as hookian potential to fix the atoms during the  reaction etc..!!</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.execute_xtb_xx","title":"<code>execute_xtb_xx(xcontrol_file_prefix, coord_file_prefix, task)</code>","text":"<p>execute xtb program package given following inputs</p> <p>Parameters:</p> <ul> <li> <code>xcontrol_file_prefix</code>           \u2013            </li> <li> <code>coord_file_prefix</code>           \u2013            </li> <li> <code>task</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>generate output files from the xtb excution</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.ext_interface_xx","title":"<code>ext_interface_xx(xyz_obj, xyz_filename=None)</code>","text":"<p>interface to  external program package for performing bfgs relaxation etc calculations</p> <p>INPUT is name of input file containing charge, spin-multiplicity, and taks (E,EG, and EGH)</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v2/#esta.general.xtb_calculator_for_EStA_21012025_v2.execution_manager","title":"<code>execution_manager(opt_dirname, xyz_filename, fix_atmlist=None)</code>","text":"<p>manage execution of xtb code and related files</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/","title":"esta.general.xtb_calculator_for_EStA_21012025_v3","text":""},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3","title":"<code>esta.general.xtb_calculator_for_EStA_21012025_v3</code>","text":"<p>!!-----------------------------------------------------------------------------!! !   interface to xTB code and extracting energy, position, gradient,  !   and hessian (possibly) to EStA software</p> <p>!   author : skumar !   email: sonukumar.physics@gmail.com !!-----------------------------------------------------------------------------!!</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.XTB","title":"<code>XTB</code>","text":"<p>XTB class to         - read xyz file  #extract xyz file from the xxx_INP4GEN.rrm file         - read INPUT for              -- reading the spin/charge values  #needed to create *.xcontrol file from GRRM18 xxx.com file             -- reading the task E, EG, or EGH (Energy, gradient, and hessian)  #to perform by reading the *_INP4GEN.rrm file generated by GRRM17         - create *.xcontrol file from xyz and INPUT (basically *xyz is read automatically ..confirm it??)         - finally read energy, gradient, and/or hessian from xtb output</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.XTB.get_xtb_xcontrol","title":"<code>get_xtb_xcontrol()</code>","text":"<p>get xt.xcontrol file by reading the  - charge and multiplicity  - other contraints from xyz object</p> <p>Note: to get no of un-paired electrons (Ue) from multiplicity (M)=2S+1     Ue = 0 (2*S) for M=1, S=0 (no unpaired elctrons)     Ue = 1 (2*S) for M=2, S=\u00bd (one unpaired elctrons)     Ue = 2 (2*S) for M=3, S=1 (two  unpaired elctrons)     ===&gt; Ue = M-1</p> <p>the fixed atoms are provided from the external xyz-object aka aadhaar object and atoms positions/symbols also. the charge and spin are Hard coded: charge = 0 , and unpaired electon (xtb need Ue not spin) = 0</p> Note <pre><code>xt.xcontrol example:\n$chrg 0\n$spin 0\n$fix\natoms: 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\natoms: 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67\n$end\n</code></pre>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.XTB.get_task","title":"<code>get_task()</code>","text":"<p>TASK: ENERGY, GRADIENT, and HESSIAN GUESS: READ FROM test_MO2GEN.rrm NACTIVEATOM / NATOM: 3 / 3 NFROZENATOM: 0</p> <p>more to implement such as hookian potential to fix the atoms during the  reaction etc..!!</p>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.execute_xtb_xx","title":"<code>execute_xtb_xx(xcontrol_file_prefix, coord_file_prefix, task)</code>","text":"<p>execute xtb program package given following inputs</p> <p>Parameters:</p> <ul> <li> <code>xcontrol_file_prefix</code>           \u2013            </li> <li> <code>coord_file_prefix</code>           \u2013            </li> <li> <code>task</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>generate output files from the xtb excution</code>           \u2013            </li> </ul>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.ext_interface_xx","title":"<code>ext_interface_xx(xyz_obj, xyz_filename=None)</code>","text":"<p>interface to  external program package for performing bfgs relaxation etc calculations</p> <p>INPUT is name of input file containing charge, spin-multiplicity, and taks (E,EG, and EGH)</p> <p>Interface to external code, here xtb,  to carry out 4 things:</p> <ol> <li> <p>create input file for the external code (here xtb code); the input file  entries varies depending on the request from GRRM.out file indicated in  xxx_INP4GEN.rrm</p> </li> <li> <p>excecute the xtb code</p> </li> </ol>"},{"location":"reference/esta/general/xtb_calculator_for_EStA_21012025_v3/#esta.general.xtb_calculator_for_EStA_21012025_v3.execution_manager","title":"<code>execution_manager(opt_dirname, xyz_filename, fix_atmlist=None)</code>","text":"<p>manage execution of xtb code and related files</p>"},{"location":"reference/esta/general/xyz/","title":"esta.general.xyz","text":""},{"location":"reference/esta/general/xyz/#esta.general.xyz","title":"<code>esta.general.xyz</code>","text":"<p>Xyz class to handle data related to xyz file/files</p>"},{"location":"reference/esta/general/xyz/#esta.general.xyz.Xyz","title":"<code>Xyz</code>","text":"<p>Xyz class to read and write files containing data for one or more  atomic structures in xyz format</p>"},{"location":"reference/esta/general/xyz/#esta.general.xyz.Xyz.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/esta/general/xyz/#esta.general.xyz.Xyz.read_xyz","title":"<code>read_xyz(filename)</code>","text":"Parameters <p>filename : string     name of xyz file containing all xyz atomic      positions and atomic lables</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>array of shape (no_of_strs, natoms, 3)</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels containing all atomic symbols</p> </li> </ul>"},{"location":"reference/esta/general/xyz/#esta.general.xyz.Xyz.read_xyz_all","title":"<code>read_xyz_all(filename)</code>","text":"<p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>name of xyz file containing all xyz atomic  positions and atomic lables</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>array of of shape (no_of_strs, natoms, 3)</p> </li> <li> <code>label</code> (              <code>list</code> )          \u2013            <p>list of atomic labels containing all atomic symbols</p> </li> </ul>"},{"location":"reference/esta/general/xyz_grouped/","title":"esta.general.xyz_grouped","text":""},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped","title":"<code>esta.general.xyz_grouped</code>","text":""},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo","title":"<code>RWpwo</code>","text":"<p>Class to read and write data file for the atomic structures</p> <ul> <li>read cell parmeters and/or atomic positions</li> <li>write this data in xyz, poscar, and qe-str format</li> </ul>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_atm_positions","title":"<code>get_atm_positions()</code>","text":"<p>find atom positions with labels ...</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_cell_parameters","title":"<code>get_cell_parameters()</code>","text":"<p>return:     cell vectors in angstrom or bohr</p> <p>what is does:</p> <p>for 'rlx' calculations:     search:       \"lattice parameter (alat)\"       \"crystal axes: (cart. coord. in units of alat)\"                    </p> <p>for 'vc-relax' calculations:     search:     'CELL_PARAMETERS (angstrom)' ...</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_energies_and_kpt","title":"<code>get_energies_and_kpt()</code>","text":"<p>get the band energies at k point by reading the scf calculation  out file</p> <p>NOTE: Need verbosity ='high' in the scf input file to print the  band energies</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>IMPORTANT: ordeing same elements together: not done yet .. to be done..            .. so for the time being open the file with Avogadro and save again                as xyz file</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_xyz_grouped_file","title":"<code>get_xyz_grouped_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>NOTE: similar atoms are grouped together</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_element_label","title":"<code>get_element_label(input_atomic_number)</code>","text":"<p>using mendeleev for it : big database of elemental properties</p> <pre><code>In [22]: from mendeleev import element \nIn [21]: for i in [5,6,7,8]: \n...:     element(i) \n...:     print (element(i).symbol) \n...:                                                                                                                            \nB\nC\nN\nO\n</code></pre>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwo.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwi","title":"<code>RWpwi</code>","text":"<p>class to read the pw input file and create poscar file</p> <p>return:     generate poscar file after reading the pw input file</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwi.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwi.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwi.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their\n</code></pre>"},{"location":"reference/esta/general/xyz_grouped/#esta.general.xyz_grouped.RWpwi.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/general/xyz_images/","title":"esta.general.xyz_images","text":""},{"location":"reference/esta/general/xyz_images/#esta.general.xyz_images","title":"<code>esta.general.xyz_images</code>","text":"<p>Generate atomic configurations between initial and final atomic positions</p>"},{"location":"reference/esta/general/xyz_images/#esta.general.xyz_images.get_atomic_configurations","title":"<code>get_atomic_configurations(N, atompositions, atompositions2)</code>","text":"<p>generate points between a set of two points in N-D space</p> input: <pre><code>N: no. of images between these positions\natompositions: atomic array for initial position \natompositions2: atomic array for final position\n</code></pre> output: <pre><code>configurations: array for all images generated bet initial and final pts\ntotal_no_of_images: integer for total no. of images to be generated between initial and \n                    final positions\n</code></pre> <p>Note: configuration are returned in FOTRAN order ... to use in C or python, use transpose operation..!!</p>"},{"location":"reference/esta/general/xyz_images/#esta.general.xyz_images.get_atomic_configurations_nldist","title":"<code>get_atomic_configurations_nldist(N, atompositions, atompositions2, constr_atomlist)</code>","text":"<p>generate points between a set of two points in N-D space with a non-linear distance between images pts ..ongoing!!</p> input: <pre><code>N: no. of images between these positions\natompositions: atomic array for initial position \natompositions2: atomic array for final position\nconstr_atomlist: index of atoms to have nonlinearity , numbering from 1\n</code></pre> output: <pre><code>configurations: array for all images generated bet initial and final pts\ntotal_no_of_images: integer for total no. of images to be generated between initial and \n                    final positions\n</code></pre> <p>Note: configuration are returned in FOTRAN order ... to use in C or python, use transpose operation..!!</p>"},{"location":"reference/esta/general/xyz_images/#esta.general.xyz_images.get_atomic_configurations_xyz","title":"<code>get_atomic_configurations_xyz(N, atompositions, atompositions2)</code>","text":"<p>generate points between a set of two points in N-D space. Herer, the initial position in atompositions and final positions in  atompositions2, and  Nwill give no. of images between these positions</p> <p>.. note::     this is a better version of get_atomic_configurations</p>"},{"location":"reference/esta/general/xyz_images/#esta.general.xyz_images.get_xyz_images","title":"<code>get_xyz_images(N, file_xyzi, file_xyzf, lsave_xyz=False)</code>","text":"<p>get xyz strs between inititial and final positions; specifically coordinate and symbols information is output.</p>"},{"location":"reference/esta/general/xyz_sanity/","title":"esta.general.xyz_sanity","text":""},{"location":"reference/esta/general/xyz_sanity/#esta.general.xyz_sanity","title":"<code>esta.general.xyz_sanity</code>","text":""},{"location":"reference/esta/general/xyz_sanity/#esta.general.xyz_sanity.xyz_sanity_check","title":"<code>xyz_sanity_check(filename, distance_threshold=None)</code>","text":"<p>sanity check for the xyz files .. do the same for poscar file as well TODO</p>"},{"location":"reference/esta/geometry__ASE_tosee/","title":"esta.geometry__ASE_tosee","text":""},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee","title":"<code>esta.geometry__ASE_tosee</code>","text":"<p>Utility tools for atoms/geometry manipulations.    - convenient creation of slabs and interfaces of different orientations.    - detection of duplicate atoms / atoms within cutoff radius</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.translate_pretty","title":"<code>translate_pretty(fractional, pbc)</code>","text":"<p>Translates atoms such that fractional positions are minimized.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.wrap_positions","title":"<code>wrap_positions(positions, cell, pbc=True, center=(0.5, 0.5, 0.5), pretty_translation=False, eps=1e-07)</code>","text":"<p>Wrap positions to unit cell.</p> <p>Returns positions changed by a multiple of the unit cell vectors to fit inside the space spanned by these vectors.  See also the :meth:<code>ase.Atoms.wrap</code> method.</p> <p>Parameters:</p> <p>positions: float ndarray of shape (n, 3)     Positions of the atoms cell: float ndarray of shape (3, 3)     Unit cell vectors. pbc: one or 3 bool     For each axis in the unit cell decides whether the positions     will be moved along this axis. center: three float     The positons in fractional coordinates that the new positions     will be nearest possible to. pretty_translation: bool     Translates atoms such that fractional coordinates are minimized. eps: float     Small number to prevent slightly negative coordinates from being     wrapped.</p> <p>Example:</p> <p>from ase.geometry import wrap_positions wrap_positions([[-0.1, 1.01, -0.5]], ...                [[1, 0, 0], [0, 1, 0], [0, 0, 4]], ...                pbc=[1, 1, 0]) array([[ 0.9 ,  0.01, -0.5 ]])</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_layers","title":"<code>get_layers(atoms, miller, tolerance=0.001)</code>","text":"<p>Returns two arrays describing which layer each atom belongs to and the distance between the layers and origo.</p> <p>Parameters:</p> <p>miller: 3 integers     The Miller indices of the planes. Actually, any direction     in reciprocal space works, so if a and b are two float     vectors spanning an atomic plane, you can get all layers     parallel to this with miller=np.cross(a,b). tolerance: float     The maximum distance in Angstrom along the plane normal for     counting two atoms as belonging to the same plane.</p> <p>Returns:</p> <p>tags: array of integres     Array of layer indices for each atom. levels: array of floats     Array of distances in Angstrom from each layer to origo.</p> <p>Example:</p> <p>import numpy as np from ase.spacegroup import crystal atoms = crystal('Al', [(0,0,0)], spacegroup=225, cellpar=4.05) np.round(atoms.positions, decimals=5) array([[ 0.   ,  0.   ,  0.   ],        [ 0.   ,  2.025,  2.025],        [ 2.025,  0.   ,  2.025],        [ 2.025,  2.025,  0.   ]]) get_layers(atoms, (0,0,1))  # doctest: +ELLIPSIS (array([0, 1, 1, 0]...), array([ 0.   ,  2.025]))</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.naive_find_mic","title":"<code>naive_find_mic(v, cell)</code>","text":"<p>Finds the minimum-image representation of vector(s) v. Safe to use for (pbc.all() and (norm(v_mic) &lt; 0.5 * min(cell.lengths()))). Can otherwise fail for non-orthorhombic cells. Described in: W. Smith, \"The Minimum Image Convention in Non-Cubic MD Cells\", 1989, http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.57.1696.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.general_find_mic","title":"<code>general_find_mic(v, cell, pbc=True)</code>","text":"<p>Finds the minimum-image representation of vector(s) v. Using the Minkowski reduction the algorithm is relatively slow but safe for any cell.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.find_mic","title":"<code>find_mic(v, cell, pbc=True)</code>","text":"<p>Finds the minimum-image representation of vector(s) v using either one of two find mic algorithms depending on the given cell, v and pbc.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.conditional_find_mic","title":"<code>conditional_find_mic(vectors, cell, pbc)</code>","text":"<p>Return list of vector arrays and corresponding list of vector lengths for a given list of vector arrays. The minimum image convention is applied if cell and pbc are set. Can be used like a simple version of get_distances.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_angles","title":"<code>get_angles(v0, v1, cell=None, pbc=None)</code>","text":"<p>Get angles formed by two lists of vectors.</p> <p>Calculate angle in degrees between vectors v0 and v1</p> <p>Set a cell and pbc to enable minimum image convention, otherwise angles are taken as-is.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_angles_derivatives","title":"<code>get_angles_derivatives(v0, v1, cell=None, pbc=None)</code>","text":"<p>Get derivatives of angles formed by two lists of vectors (v0, v1) w.r.t. Cartesian coordinates in degrees.</p> <p>Set a cell and pbc to enable minimum image convention, otherwise derivatives of angles are taken as-is.</p> <p>There is a singularity in the derivatives for sin(angle) -&gt; 0 for which a ZeroDivisionError is raised.</p> <p>Derivative output format: [[dx_a0, dy_a0, dz_a0], [...], [..., dz_a2].</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_dihedrals","title":"<code>get_dihedrals(v0, v1, v2, cell=None, pbc=None)</code>","text":"<p>Get dihedral angles formed by three lists of vectors.</p> <p>Calculate dihedral angle (in degrees) between the vectors a0-&gt;a1, a1-&gt;a2 and a2-&gt;a3, written as v0, v1 and v2.</p> <p>Set a cell and pbc to enable minimum image convention, otherwise angles are taken as-is.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_dihedrals_derivatives","title":"<code>get_dihedrals_derivatives(v0, v1, v2, cell=None, pbc=None)</code>","text":"<p>Get derivatives of dihedrals formed by three lists of vectors (v0, v1, v2) w.r.t Cartesian coordinates in degrees.</p> <p>Set a cell and pbc to enable minimum image convention, otherwise dihedrals are taken as-is.</p> <p>Derivative output format: [[dx_a0, dy_a0, dz_a0], ..., [..., dz_a3]].</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_distances","title":"<code>get_distances(p1, p2=None, cell=None, pbc=None)</code>","text":"<p>Return distance matrix of every position in p1 with every position in p2</p> <p>If p2 is not set, it is assumed that distances between all positions in p1 are desired. p2 will be set to p1 in this case.</p> <p>Use set cell and pbc to use the minimum image convention.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_distances_derivatives","title":"<code>get_distances_derivatives(v0, cell=None, pbc=None)</code>","text":"<p>Get derivatives of distances for all vectors in v0 w.r.t. Cartesian coordinates in Angstrom.</p> <p>Set cell and pbc to use the minimum image convention.</p> <p>There is a singularity for distances -&gt; 0 for which a ZeroDivisionError is raised. Derivative output format: [[dx_a0, dy_a0, dz_a0], [dx_a1, dy_a1, dz_a1]].</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.get_duplicate_atoms","title":"<code>get_duplicate_atoms(atoms, cutoff=0.1, delete=False)</code>","text":"<p>Get list of duplicate atoms and delete them if requested.</p> <p>Identify all atoms which lie within the cutoff radius of each other. Delete one set of them if delete == True.</p>"},{"location":"reference/esta/geometry__ASE_tosee/#esta.geometry__ASE_tosee.permute_axes","title":"<code>permute_axes(atoms, permutation)</code>","text":"<p>Permute axes of unit cell and atom positions. Considers only cell and atomic positions. Other vector quantities such as momenta are not modified.</p>"},{"location":"reference/esta/get_dihedral/","title":"esta.get_dihedral","text":""},{"location":"reference/esta/get_dihedral/#esta.get_dihedral","title":"<code>esta.get_dihedral</code>","text":""},{"location":"reference/esta/get_docx/","title":"esta.get_docx","text":""},{"location":"reference/esta/get_docx/#esta.get_docx","title":"<code>esta.get_docx</code>","text":""},{"location":"reference/esta/get_docx/#esta.get_docx.to_docx","title":"<code>to_docx(lines, filename)</code>","text":"<p>write to docx file the data line in a single line</p>"},{"location":"reference/esta/grrmBag/LUPINP/","title":"esta.grrmBag.LUPINP","text":""},{"location":"reference/esta/grrmBag/LUPINP/#esta.grrmBag.LUPINP","title":"<code>esta.grrmBag.LUPINP</code>","text":"<p>get xxx_LUPINP.log file from pos and label variables data</p>"},{"location":"reference/esta/grrmBag/LUPINP/#esta.grrmBag.LUPINP.get_LUPINP","title":"<code>get_LUPINP(atm_pos, label, name_outfile=None)</code>","text":"<pre><code>get xxx_LUPINP.log file from pos and label variables data\n\ninput:\n        atm_pos: array of shape (no_of_atomic_strs, natoms, 3 )\n        label: list of shape (no_of_atomic_sts, natoms)\n        name_outfile: prefic of name of the output file, optional\n\noutput: \n        output \"name_outfile\"+'_LUPINP.log' file to be used as an initial path \n                for the LUP calculation\n</code></pre> <p>---exampe of XXX_LUPINP.log file:                    ------------</p>"},{"location":"reference/esta/grrmBag/LUPINP/#esta.grrmBag.LUPINP.get_LUPINP--node-0","title":"NODE 0:","text":"<p>O          5.490527361273         -7.301039647118         -6.111826190422 H          5.733518415093         -6.371725434573         -5.886303868739 H          5.483149357281         -6.641347567148         -3.750888719682</p>"},{"location":"reference/esta/grrmBag/LUPINP/#esta.grrmBag.LUPINP.get_LUPINP--node-1","title":"NODE 1:","text":"<p>O          5.539350619528         -7.324436803847         -6.035948874142 H          5.785226928656         -6.401397049756         -5.821165568507 H          5.502797674893         -6.666317168224         -3.712799145260</p>"},{"location":"reference/esta/grrmBag/","title":"esta.grrmBag","text":""},{"location":"reference/esta/grrmBag/#esta.grrmBag","title":"<code>esta.grrmBag</code>","text":""},{"location":"reference/esta/grrmBag/a/","title":"esta.grrmBag.a","text":""},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a","title":"<code>esta.grrmBag.a</code>","text":""},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a.get_irc_path","title":"<code>get_irc_path(filename, path_direction=False)</code>","text":"<p>read log file or any other file containing IRC path information:</p> input: <pre><code>string; filename\nstring;optinal, path_direction can be forward or reversed\n            default is forward direction\n</code></pre> output: <pre><code>plot the path in png file named filename.png\n</code></pre> <p>Reading starts from  following ..............      Energy profile along IRC      Length (A amu\u00bd)       Energy (Hartree)      -61.2536469474         -140.1040646722</p> <pre><code> ..\n ..\n ..\n 30.6359900582         -140.0788979553\n 30.8934801390         -140.0788985106\n\n\n Reverse\n Length (A amu1/2)       Energy (Hartree)\n -30.8934801390         -140.0788985106\n -30.6359900582         -140.0788979553\n ..\n ..\n 60.7900934845         -140.1040632542\n 61.2536469474         -140.1040646722\n</code></pre>"},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a.get_EQ_IRC","title":"<code>get_EQ_IRC(filename, natoms=None)</code>","text":"<p>get the eq structures from the IRC calculations </p> input: <pre><code>    filename: str, name of the IRC log file\n</code></pre> output: <pre><code>   position: array of shape (2, natoms, 3) ; 2 for two EQ strs \n   label: list of atomic symbols of shape (2, natoms); 2 for eq strs\n</code></pre>"},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a.get_EQ_TS_IRC","title":"<code>get_EQ_TS_IRC(filename, natoms=None)</code>","text":"<p>get the EQ and TS structures from the IRC calculations </p> input: <pre><code>    filename: str, name of the IRC log file\n</code></pre> output: <pre><code>   position: array of shape (3, natoms, 3) ; 3 for two EQ and 1 TS strs \n   label: list of atomic symbols of shape (3, natoms); 3 for 2 eq strs and 1 TS strs\n</code></pre>"},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a.get_natoms_IRC","title":"<code>get_natoms_IRC(filename) -&gt; int</code>","text":"<p>get no. of atoms present in a strs in IRC log file</p>"},{"location":"reference/esta/grrmBag/a/#esta.grrmBag.a.get_free_energy","title":"<code>get_free_energy(filename)</code>","text":"<p>get free energy of all Geometry strs in Hartree from grrm log file  of IRC calculations</p> <p>.. Check following matches::    Thermochemistry at  298.150 K,    1.000 Atm    Thermochemistry (use all positive eigenvalues) at  298.15 K,    1.00 Atm    Thermochemistry (after the above replacements)</p>"},{"location":"reference/esta/grrmBag/com2xyz/","title":"esta.grrmBag.com2xyz","text":""},{"location":"reference/esta/grrmBag/com2xyz/#esta.grrmBag.com2xyz","title":"<code>esta.grrmBag.com2xyz</code>","text":"<p>get xyz file from *com file of the GRRM or gaussian input file</p>"},{"location":"reference/esta/grrmBag/com2xyz/#esta.grrmBag.com2xyz.get_coord","title":"<code>get_coord(filename)</code>","text":"<p>get coord and atomic labesls from com file of gaussian or GRRM17 </p> input: <pre><code>input filename\n</code></pre> output: <pre><code>scalar; no of atoms\nlist;  for atomic labels\narray; for atomic positions\n</code></pre>"},{"location":"reference/esta/grrmBag/com2xyz/#esta.grrmBag.com2xyz.get_coord_grrm_kin","title":"<code>get_coord_grrm_kin(filename)</code>","text":"<p>get coord and atomic labesls from com file of  GRRM17 com file  with kinetic options</p> input: <pre><code>input filename\n</code></pre> output: <pre><code>scalar; no of atoms\nlist;  for atomic labels\narray; for atomic positions\n</code></pre>"},{"location":"reference/esta/grrmBag/com2xyz/#esta.grrmBag.com2xyz.get_xyz_file","title":"<code>get_xyz_file(filename, filetype=None)</code>","text":"<p>get xyz file from com file</p> input: <pre><code>  label: string list or string array\n  pos: array of shape (natoms, 3)\n  infile: input file name\n</code></pre> otuput: <pre><code> xyz file in the present dir; name of file derived from input file\n</code></pre>"},{"location":"reference/esta/grrmBag/get_IRC_path/","title":"esta.grrmBag.get_IRC_path","text":""},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path","title":"<code>esta.grrmBag.get_IRC_path</code>","text":""},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_irc_path","title":"<code>get_irc_path(filename, path_direction=False)</code>","text":"<p>read log file or any other file containing IRC path information:</p> <p>Parameters:</p> <ul> <li> <code>filename</code>           \u2013            </li> <li> <code>path_direction</code>           \u2013            <p>path_direction can be forward or reversed; default is forward direction</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>plot the path in png file named filename.png</code>           \u2013            </li> <li> <code>.. note:</code>           \u2013            <p>Reading starts from  following ..............     Energy profile along IRC     Length (A amu\u00bd)       Energy (Hartree)     -61.2536469474         -140.1040646722</p> <pre><code>..\n..\n..\n30.6359900582         -140.0788979553\n30.8934801390         -140.0788985106\n\n\nReverse\nLength (A amu1/2)       Energy (Hartree)\n-30.8934801390         -140.0788985106\n-30.6359900582         -140.0788979553\n..\n..\n60.7900934845         -140.1040632542\n61.2536469474         -140.1040646722\n</code></pre> </li> </ul>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_EQ_IRC","title":"<code>get_EQ_IRC(filename, natoms=None)</code>","text":"<p>get the eq structures from the IRC calculations </p> input: <pre><code>    filename: str, name of the IRC log file\n</code></pre> output: <pre><code>   position: array of shape (2, natoms, 3) ; 2 for two EQ strs \n   label: list of atomic symbols of shape (2, natoms); 2 for eq strs\n</code></pre>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_EQ_TS_IRC","title":"<code>get_EQ_TS_IRC(filename, natoms=None)</code>","text":"<p>get the EQ and TS structures from the IRC calculations </p> input <p>filename: str     name of the IRC log file natoms: integer, optional     no. of atoms in the xyz str</p> output <p>position: array      array of shape (3, natoms, 3) ; 3 for two EQ and 1 TS strs  label: list      list of atomic symbols of shape (3, natoms); 3 for 2 eq strs and 1 TS strs</p>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_natoms_IRC","title":"<code>get_natoms_IRC(filename) -&gt; int</code>","text":"<p>get no. of atoms present in a strs in IRC log file</p>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_free_energy","title":"<code>get_free_energy(filename)</code>","text":"<p>get free energy of all Geometry strs in Hartree from grrm log file  of IRC calculations</p> <p>.. Check following matches::    Thermochemistry at  298.150 K,    1.000 Atm    Thermochemistry (use all positive eigenvalues) at  298.15 K,    1.00 Atm    Thermochemistry (after the above replacements)</p>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_enthalpy","title":"<code>get_enthalpy(filename)</code>","text":"<p>get Enthalpie from grrm saddle/saddle+irc log files in Hartree from grrm log file  of IRC calculations</p> <p>..note:     Check following matches::     Thermochemistry at  298.150 K,    1.000 Atm     Thermochemistry (use all positive eigenvalues) at  298.15 K,    1.00 Atm     Thermochemistry (after the above replacements)</p> <pre><code>Enthalpie(0K) = -4972.234296259576\nEnthalpie     = -4972.155864233614\n\nThermochemistry (use all positive eigenvalues) at  298.15 K,    1.00 Atm\nThermochemistry (after the above replacements) at  298.15 K,    1.00 Atm\n\nfree_energy[j] = float( lines[i+14].split()[-1] )\nelec_energy[j] = float( lines[i+1].split()[-1] )\nenthalpy[j] = float( lines[i+8].split()[-1] )\n</code></pre>"},{"location":"reference/esta/grrmBag/get_IRC_path/#esta.grrmBag.get_IRC_path.get_energy","title":"<code>get_energy(filename)</code>","text":"<p>get free energy, electronic, and enthalpies of all Geometry strs in Hartree from grrm log file      of IRC calculations</p> <p>..note:     Check following matches::     Thermochemistry at  298.150 K,    1.000 Atm     Thermochemistry (use all positive eigenvalues) at  298.15 K,    1.00 Atm     Thermochemistry (after the above replacements)</p>"},{"location":"reference/esta/grrmBag/get_LUP/","title":"esta.grrmBag.get_LUP","text":""},{"location":"reference/esta/grrmBag/get_LUP/#esta.grrmBag.get_LUP","title":"<code>esta.grrmBag.get_LUP</code>","text":""},{"location":"reference/esta/grrmBag/get_LUP/#esta.grrmBag.get_LUP.get_lup_inp","title":"<code>get_lup_inp(filename)</code>","text":"<p>read XXX_LUPINP.log file for getting the Path (xyz strs)</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>filename, name of xxx_LUPINP.log file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>position_all</code> (              <code>array</code> )          \u2013            <p>array of atomic positions  </p> </li> <li> <code>atom_symbol</code> (              <code>string</code> )          \u2013            <p>strings representing atomic symbols</p> </li> </ul>"},{"location":"reference/esta/grrmBag/get_LUP/#esta.grrmBag.get_LUP.get_lup_out","title":"<code>get_lup_out(filename)</code>","text":"<p>read XXX_LUPIOUTt.log file for getting the Path (xyz strs)</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>filename, name of xxx_LUPINP.log file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>position_all</code> (              <code>array</code> )          \u2013            <p>array of atomic positions  </p> </li> <li> <code>atom_symbol</code> (              <code>string</code> )          \u2013            <p>strings representing atomic symbols</p> </li> </ul>"},{"location":"reference/esta/grrmBag/get_LUPINP/","title":"esta.grrmBag.get_LUPINP","text":""},{"location":"reference/esta/grrmBag/get_LUPINP/#esta.grrmBag.get_LUPINP","title":"<code>esta.grrmBag.get_LUPINP</code>","text":""},{"location":"reference/esta/grrmBag/get_LUPINP/#esta.grrmBag.get_LUPINP.get_lup_inp","title":"<code>get_lup_inp(filename, lenergy=None)</code>","text":"<p>read XXX_LUPINP.log/ or xxx_LUPOUTt.log or similar log files for getting the Path (xyz strs) and energy information</p> Parameters <p>filename : string     filename, name of xxx_LUPINP.log file</p> <p>lenergy : logical, optional     lenergy, whether energy to be extracted from the input filename</p> <p>Returns:</p> <ul> <li> <code>create xyz file containing all xyz strs with energy information in the comment if lenergy is true.</code>           \u2013            </li> </ul>"},{"location":"reference/esta/grrmBag/get_LUP_profile_advv/","title":"esta.grrmBag.get_LUP_profile_advv","text":""},{"location":"reference/esta/grrmBag/get_LUP_profile_advv/#esta.grrmBag.get_LUP_profile_advv","title":"<code>esta.grrmBag.get_LUP_profile_advv</code>","text":""},{"location":"reference/esta/grrmBag/get_LUP_profile_advv/#esta.grrmBag.get_LUP_profile_advv.get_lup_profile","title":"<code>get_lup_profile(filename, natoms)</code>","text":"<p>extract the LUP path </p> <ul> <li> <p>from LUP calculation following the DS-AFIR run of GRRM ...leading to generation of xxx.log file</p> </li> <li> <p>finally plot the LUP profile</p> </li> </ul>"},{"location":"reference/esta/grrmBag/get_LUP_profile_advv/#esta.grrmBag.get_LUP_profile_advv.get_lup_profile_new","title":"<code>get_lup_profile_new(filename, natoms)</code>","text":"<p>extract the LUP path information. Basically from LUP calculation using GRRM 2023 (GRRM17/20 may also work fine): excess *_jLUP.rrm file or file containing Profile data and information of approximate EQ and TS strs</p>"},{"location":"reference/esta/grrmBag/get_LUP_profile_advv/#esta.grrmBag.get_LUP_profile_advv.get_lup_profile2","title":"<code>get_lup_profile2(filename)</code>","text":"<p>extract the LUP path </p> <ul> <li>from - from xxx__LUPOUTt.log file</li> </ul>"},{"location":"reference/esta/grrmBag/get_nTS_nEQ_nPT/","title":"esta.grrmBag.get_nTS_nEQ_nPT","text":""},{"location":"reference/esta/grrmBag/get_nTS_nEQ_nPT/#esta.grrmBag.get_nTS_nEQ_nPT","title":"<code>esta.grrmBag.get_nTS_nEQ_nPT</code>","text":"<p>get number of EQ, TS, and PT structures from logs of GRRM output</p>"},{"location":"reference/esta/grrmBag/get_xyz_grrm_IRC_step_advv/","title":"esta.grrmBag.get_xyz_grrm_IRC_step_advv","text":""},{"location":"reference/esta/grrmBag/get_xyz_grrm_IRC_step_advv/#esta.grrmBag.get_xyz_grrm_IRC_step_advv","title":"<code>esta.grrmBag.get_xyz_grrm_IRC_step_advv</code>","text":""},{"location":"reference/esta/grrmBag/get_xyz_grrm_IRC_step_advv/#esta.grrmBag.get_xyz_grrm_IRC_step_advv.get_xyz_IRC_steps","title":"<code>get_xyz_IRC_steps(file_saddleIRC)</code>","text":"<p>given the IRC path data obtained from saddle+IRC calculations,  find the IRC path in a file</p> <p>Parameters:</p> <ul> <li> <code>file_saddleIRC</code>           \u2013            <p>name of the file obtained from grrm SADDLE+IRC calculations</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>IRC path for forwards and backward path connecting transition states</code>           \u2013            </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm/","title":"esta.grrmBag.input_grrm","text":""},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm","title":"<code>esta.grrmBag.input_grrm</code>","text":""},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom","title":"<code>GenerateCom</code>","text":""},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\nno of atoms: scalar\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom.read_xyz2","title":"<code>read_xyz2(xyz2file)</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\nno of atoms: scalar\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom.flags_grrm","title":"<code>flags_grrm(**kwargs)</code>","text":"<p>other options in GRRM code for calculation types e.g:</p> <p>Options sublink=/home/kumarsonu/bin/link_excode_allv3.1_.py Add Interaction Fragm.1=56,57,58,1 Fragm.2=59-62 1 2 Gamma=200.0 END NOFC KeepIntFiles DownDC=12</p>"},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom.write_com","title":"<code>write_com(**kwargs)</code>","text":"input: <pre><code>atomic postions\natomic labels\nno of atoms\n</code></pre> output: <pre><code>com file containing info of atomic structure\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm/#esta.grrmBag.input_grrm.GenerateCom.write_com_2xyz","title":"<code>write_com_2xyz(xyz2file, **kwargs)</code>","text":"input: <pre><code>atomic postions\natomic labels\nno of atoms\n_________________ --&gt; all of these variable read form 1xyz file ..by \n                        calling self.read_xyz()\n\nstr: xyz file name ---2nd xyz filename correspinding to product of rxn\n</code></pre> output: <pre><code>com file containing info of atomic structure info of two atomic systems\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm_advv/","title":"esta.grrmBag.input_grrm_advv","text":""},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv","title":"<code>esta.grrmBag.input_grrm_advv</code>","text":""},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for different type of  calculations for GRRM using: - non-supported  - orca  - gaussian </p> Notes <p>Different types of calculation are carried out by the  </p> <p>GRRM software given below:</p> <pre><code>    calculaiton type                          .... status of Implementation\n</code></pre> <p>=============================================================================== 1)     - Normal mode analysis (FREQ)     - Minimum point optimization (MIN)          ......DONE     - Saddle-point optimization (SADDLE)     - IRC following (IRC)     - LUP path optimization (LUP)               .... DONE</p> <pre><code>-- to do \nCrossing point (MECI or MESX) optimization ....  will not be done\nCrossing point (MECI or MESX) estimation   ....  will not be done\nExternal atoms (microiterations)\nFrozen atoms                               .... DONE\n</code></pre> <p>2)</p> <pre><code>MIN-AFIR calculations                      ...  DONE\nAFIR calculations                          ...  DONE\nDS-AFIR calculations                       ...  DONE\n\nRefinement calculations                    ..... TODO\n</code></pre> <p>author: skumar</p> <p>email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.read_xyz2","title":"<code>read_xyz2(xyz2file)</code>","text":"<p>Returns:</p> <ul> <li> <code>    atomic positions: array: rank 2 array of shape (natoms, 3)</code>           \u2013            <p>atomic labels: list/array of strings: rank 1 array of atomic labels no of atoms: scalar</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.flags_grrm","title":"<code>flags_grrm(**kwargs)</code>","text":"<p>options in GRRM code for calculation types</p> <p>.. note::           Options     sublink=/home/kumarsonu/bin/link_excode_allv3.1_.py     Add Interaction     Fragm.1=56,57,58,1     Fragm.2=59-62     1 2     Gamma=200.0     END     NOFC     KeepIntFiles     DownDC=12</p>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.write_com","title":"<code>write_com(interface=None, basis=None, solvent=None, log_filename=None, Frozen_dict=None, lflags_file=False, **kwargs)</code>","text":"<p>Parameters:</p> <ul> <li> <code>interface</code>           \u2013            <p>name of the interface name</p> </li> <li> <code>please</code>           \u2013            </li> <li> <code>atomic</code>           \u2013            </li> <li> <code>atomic</code>           \u2013            </li> <li> <code>no</code>           \u2013            </li> <li> <code>kwargs</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>input com GRRM file containing info of atomic structure as well </code>           \u2013            <p>as other GRRM parameteres</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.write_com_2xyz","title":"<code>write_com_2xyz(xyz2file, interface=None, **kwargs)</code>","text":"<p>xyz files of products read from command line arguments ....mainly used  for creating DS-AFIR input file ...</p> <p>Returns:</p> <ul> <li> <code>    com file containing info of atomic structure info of two atomic systems</code>           \u2013            </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.write_inp","title":"<code>write_inp(xyzfile, charge, multiplicity, ncores=None, memory=None, interface=None, **kwargs)</code>","text":"<p>generate input file for ORCA like below:</p> <p>Parameters:</p> <ul> <li> <code>prefix</code>           \u2013            <p>name of inp file with .inp extension</p> </li> <li> <code>charge</code>           \u2013            <p>chare on ths system</p> </li> <li> <code>multiplicity</code>           \u2013            <p>spin multiplicity (2S+1); for a single electron: S =\u00bd</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>file</code> (              <code>string</code> )          \u2013            <p>inp file for orca containg charge and multiplicity options</p> </li> </ul> Notes <pre><code>! XTB2 NoUseSym @job\n\n* xyz  0 1\n@geometry\n*\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for: - saddle calculations (see general folder for the implementation) - EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</p> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advv/#esta.grrmBag.input_grrm_advv.GenerateCom.freeze_notfreeze_atoms","title":"<code>freeze_notfreeze_atoms(fix_atm_list=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>xyzfile</code>               (<code>name of the xyz file containing xyz coords, and symbols</code>)           \u2013            </li> <li> <code>fix_atm_list</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/","title":"esta.grrmBag.input_grrm_advvv","text":""},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv","title":"<code>esta.grrmBag.input_grrm_advvv</code>","text":""},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom","title":"<code>GenerateCom</code>","text":"<p>python class to generate input files (*.com file) for different type of  calculations for GRRM using: - non-supported  - orca  - gaussian </p> Notes <p>Different types of calculation are carried out by the  </p> <p>GRRM software given below:</p> <pre><code>    calculaiton type                          .... status of Implementation\n</code></pre> <p>=============================================================================== 1)     - Normal mode analysis (FREQ)     - Minimum point optimization (MIN)          ......DONE     - Saddle-point optimization (SADDLE)     - IRC following (IRC)     - LUP path optimization (LUP)               .... DONE</p> <pre><code>-- to do \nCrossing point (MECI or MESX) optimization ....  will not be done\nCrossing point (MECI or MESX) estimation   ....  will not be done\nExternal atoms (microiterations)\nFrozen atoms                               .... DONE\n</code></pre> <p>2)</p> <pre><code>MIN-AFIR calculations                      ...  DONE\nAFIR calculations                          ...  DONE\nDS-AFIR calculations                       ...  DONE\n\nRefinement calculations                    ..... TODO\n</code></pre> <p>author: skumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.read_xyz2","title":"<code>read_xyz2(xyz2file)</code>","text":"<p>Returns:</p> <ul> <li> <code>    atomic positions: array: rank 2 array of shape (natoms, 3)</code>           \u2013            <p>atomic labels: list/array of strings: rank 1 array of atomic labels no of atoms: scalar</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.flags_grrm","title":"<code>flags_grrm(**kwargs)</code>","text":"<p>options in GRRM code for calculation types</p> <p>.. note::           Options     sublink=/home/kumarsonu/bin/link_excode_allv3.1_.py     Add Interaction     Fragm.1=56,57,58,1     Fragm.2=59-62     1 2     Gamma=200.0     END     NOFC     KeepIntFiles     DownDC=12</p>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.write_com","title":"<code>write_com(interface=None, basis=None, solvent=None, log_filename=None, Frozen_dict=None, lflags_file=False, gamma=None, **kwargs)</code>","text":"<p>Parameters:</p> <ul> <li> <code>interface</code>           \u2013            <p>name of the interface name</p> </li> <li> <code>please</code>           \u2013            </li> <li> <code>atomic</code>           \u2013            </li> <li> <code>atomic</code>           \u2013            </li> <li> <code>no</code>           \u2013            </li> <li> <code>kwargs</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>input com GRRM file containing info of atomic structure as well </code>           \u2013            <p>as other GRRM parameteres</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.write_com_2xyz","title":"<code>write_com_2xyz(xyz2file, interface=None, **kwargs)</code>","text":"<p>xyz files of products read from command line arguments ....mainly used  for creating DS-AFIR input file ...</p> <p>Returns:</p> <ul> <li> <code>    com file containing info of atomic structure info of two atomic systems</code>           \u2013            </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.write_inp","title":"<code>write_inp(xyzfile, charge, multiplicity, ncores=None, memory=None, log_filename=None, interface=None, gamma=None, **kwargs0)</code>","text":"<p>generate input file for ORCA like below:</p> <p>Parameters:</p> <ul> <li> <code>prefix</code>           \u2013            <p>name of inp file with .inp extension</p> </li> <li> <code>charge</code>           \u2013            <p>chare on ths system</p> </li> <li> <code>multiplicity</code>           \u2013            <p>spin multiplicity (2S+1); for a single electron: S =\u00bd</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>file</code> (              <code>string</code> )          \u2013            <p>inp file for orca containg charge and multiplicity options</p> </li> </ul> Notes <pre><code>! XTB2 NoUseSym @job\n\n* xyz  0 1\n@geometry\n*\n</code></pre>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.write_input_oniom","title":"<code>write_input_oniom()</code>","text":"<p>get input file for the oniom-msm method by suzuki etal. (ICReDD) for: - saddle calculations (see general folder for the implementation) - EQ/TS sampling calculations (this may not be possible as I tried setting up the calculation, but failed!!)</p> <ul> <li>ReStruct calculation ..</li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.freeze_notfreeze_atoms","title":"<code>freeze_notfreeze_atoms(fix_atm_list=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>xyzfile</code>               (<code>name of the xyz file containing xyz coords, and symbols</code>)           \u2013            </li> <li> <code>fix_atm_list</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> </ul>"},{"location":"reference/esta/grrmBag/input_grrm_advvv/#esta.grrmBag.input_grrm_advvv.GenerateCom.freeze_notfreeze_atoms_","title":"<code>freeze_notfreeze_atoms_(fix_atm_list=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>xyzfile</code>               (<code>name of the xyz file containing xyz coords, and symbols</code>)           \u2013            </li> <li> <code>fix_atm_list</code>           \u2013            <p>all atom ranging from i-m are taken including the last index m.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg fixed atomic_positins, atomic_symbols, and atom index</p> </li> <li> <code>not_frozen_tuple</code> (              <code>tuple</code> )          \u2013            <p>tuple containg not fixed atomic_positins, atomic_symbols, and atom index</p> </li> </ul>"},{"location":"reference/esta/grrmBag/output_grrm/","title":"esta.grrmBag.output_grrm","text":""},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm","title":"<code>esta.grrmBag.output_grrm</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_all_atomic_positions_from_EQ_list","title":"<code>get_all_atomic_positions_from_EQ_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_EQ_list.log\" file of GRRM17</p> <p>input: EQlist.log fiel from grrm output: all atomic positions, atomic_label for 1 str only..confirm it .. better provide labels of all          all atomic strs ..TO confirm..sk!!</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_all_xyz_in_a_file_adv","title":"<code>get_all_xyz_in_a_file_adv(comment=None, energy_refine=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels. output xyz are printed in the increasing order of their energies (by default energy is orderd)</p>"},{"location":"reference/esta/grrmBag/output_grrm/#esta.grrmBag.output_grrm.grrm.get_energy","title":"<code>get_energy(ordering=None, energy_refine=None)</code>","text":"<p>get Energy from *_EQ_list.log file of all EQ structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/","title":"esta.grrmBag.output_grrm_EQ","text":""},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ","title":"<code>esta.grrmBag.output_grrm_EQ</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 EQ_list/PT_list/TS_list.log file</p> <p>author: sonu kumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_all_atomic_positions_from_PT_list","title":"<code>get_all_atomic_positions_from_PT_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_PT_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_all_atomic_positions_from_EQ_list","title":"<code>get_all_atomic_positions_from_EQ_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_PT_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_all_atomic_positions_from_TS_list","title":"<code>get_all_atomic_positions_from_TS_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_PT_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_EQ/#esta.grrmBag.output_grrm_EQ.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_PT_list.log file of all PT structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/","title":"esta.grrmBag.output_grrm_ITR_adv","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv","title":"<code>esta.grrmBag.output_grrm_ITR_adv</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 *.log file  with MIN calculation or any *log file containing iterated structures.</p> <p>This file is part of the esta program.</p> <p>Author: Sonu Kumar email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv/#esta.grrmBag.output_grrm_ITR_adv.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/","title":"esta.grrmBag.output_grrm_ITR_adv1","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1","title":"<code>esta.grrmBag.output_grrm_ITR_adv1</code>","text":"<p>grrm class to process the GRRM Ilog file. Basically process the log file containg ITR keywords (used for min,  opt etc in GRRM)</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm","title":"<code>grrm</code>","text":"<p>extract the xyz files and energies from the log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> returns: <pre><code>outfile : write data in xyz file specified by name `outfile`\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv1/#esta.grrmBag.output_grrm_ITR_adv1.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/","title":"esta.grrmBag.output_grrm_ITR_adv2","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2","title":"<code>esta.grrmBag.output_grrm_ITR_adv2</code>","text":"<p>grrm class to process the GRRM Ilog file. Basically process the log file containg ITR keywords (used for min,  opt etc in GRRM)</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm","title":"<code>grrm</code>","text":"<p>extract the xyz files and energies from the log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> returns: <pre><code>outfile : write data in xyz file specified by name `outfile`\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv2/#esta.grrmBag.output_grrm_ITR_adv2.grrm.get_bare_energy","title":"<code>get_bare_energy()</code>","text":"<p>get Bare Energy from log file of MIN-AFIR calculations</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/","title":"esta.grrmBag.output_grrm_ITR_adv3","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3","title":"<code>esta.grrmBag.output_grrm_ITR_adv3</code>","text":"<p>grrm class to process the GRRM log file. Basically process the log file containg ITR keywords (used for min, opt etc in GRRM)</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm","title":"<code>grrm</code>","text":"<p>extract the xyz files and energies from the log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> returns: <pre><code>outfile : write data in xyz file specified by name `outfile`\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None, min_afir=None, reverse=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv3/#esta.grrmBag.output_grrm_ITR_adv3.grrm.get_bare_energy","title":"<code>get_bare_energy()</code>","text":"<p>get Bare Energy from log file of MIN-AFIR calculations</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/","title":"esta.grrmBag.output_grrm_ITR_adv4","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4","title":"<code>esta.grrmBag.output_grrm_ITR_adv4</code>","text":"<p>grrm class to process the GRRM log file. Basically process the log file containg ITR keywords (used for min, opt etc in GRRM)</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm","title":"<code>grrm</code>","text":"<p>extract the xyz files and energies from the log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> returns: <pre><code>outfile : write data in xyz file specified by name `outfile`\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None, min_afir=None, reverse=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv4/#esta.grrmBag.output_grrm_ITR_adv4.grrm.get_bare_energy","title":"<code>get_bare_energy()</code>","text":"<p>get Bare Energy from log file of MIN-AFIR calculations</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/","title":"esta.grrmBag.output_grrm_ITR_adv5","text":""},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5","title":"<code>esta.grrmBag.output_grrm_ITR_adv5</code>","text":"<p>grrm class to process the GRRM log file. Basically process the log file containg ITR keywords (used for min, opt etc in GRRM)</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm","title":"<code>grrm</code>","text":"<p>extract the xyz files and energies from the log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of ITR list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_all_atomic_positions_from_ITR_list","title":"<code>get_all_atomic_positions_from_ITR_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_ITR_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> returns: <pre><code>outfile : write data in xyz file specified by name `outfile`\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None, min_afir=None, reverse=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_ITR_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_ITR_adv5/#esta.grrmBag.output_grrm_ITR_adv5.grrm.get_bare_energy","title":"<code>get_bare_energy(outfile_prefix=None)</code>","text":"<p>get Bare Energy from log file of MIN-AFIR calculations</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/","title":"esta.grrmBag.output_grrm_PT","text":""},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT","title":"<code>esta.grrmBag.output_grrm_PT</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 PT.log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of PT list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_all_atomic_positions_from_PT_list","title":"<code>get_all_atomic_positions_from_PT_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_PT_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_PT/#esta.grrmBag.output_grrm_PT.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_PT_list.log file of all PT structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/","title":"esta.grrmBag.output_grrm_RxnMap6","text":""},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6","title":"<code>esta.grrmBag.output_grrm_RxnMap6</code>","text":""},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_atomic_positions","title":"<code>get_atomic_positions(logfile_name)</code>","text":"<p>not called in case of TS list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_all_atomic_positions","title":"<code>get_all_atomic_positions(logfile_name)</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_TS_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_xyz_file","title":"<code>get_xyz_file(logfile_name)</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file(logfile_name)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_TS_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_energy_general","title":"<code>get_energy_general(com_file_name, which_state='EQ')</code>","text":"<p>get Energy of all TS/PT/EQ states from comfile_TS/PT/EQ _list.log file</p> input: <pre><code>str: com file name with .com extension\nstr: choose which states energies to get; EQ/TS/PT\n</code></pre> output: <pre><code>list: energies list of EQ/TS/PT structures\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_connection","title":"<code>get_connection(logfile_name)</code>","text":"<p>find which TS stats is connected to which EQ states</p> input: <p>str: filename </p> output: <pre><code>dictionary of TS and connections: {'TS': TS_list, 'Connection': connection}\n</code></pre> <p>e.g:</p> <p>search the following is *TS_list.log file:</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_connection--geometry-of-ts-0-symmetry-c1","title":"Geometry of TS 0, SYMMETRY = C1","text":"<p>CONNECTION : 4 - 5</p>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_map","title":"<code>get_map(ts, ts_connection, file_name, layout_is='neato')</code>","text":"input: <pre><code>  list: eq_id\n  list: connection\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_RxnMap6/#esta.grrmBag.output_grrm_RxnMap6.grrm.get_map2","title":"<code>get_map2(ts, ts_connection)</code>","text":"input: <pre><code>  list: eq_id\n  list: connection\n</code></pre>"},{"location":"reference/esta/grrmBag/output_grrm_TS/","title":"esta.grrmBag.output_grrm_TS","text":""},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS","title":"<code>esta.grrmBag.output_grrm_TS</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 TS.log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>not called in case of TS list.log ..........</p> <p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_all_atomic_positions_from_TS_list","title":"<code>get_all_atomic_positions_from_TS_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_TS_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in a single xyz file specified by name <code>outfile</code>                  here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/grrmBag/output_grrm_TS/#esta.grrmBag.output_grrm_TS.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_TS_list.log file of all TS structures</p>"},{"location":"reference/esta/grrmBag/output_grrm_init/","title":"esta.grrmBag.output_grrm_init","text":""},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init","title":"<code>esta.grrmBag.output_grrm_init</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm.get_all_atomic_positions_from_EQ_list","title":"<code>get_all_atomic_positions_from_EQ_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_EQ_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/output_grrm_init/#esta.grrmBag.output_grrm_init.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_EQ_list.log file of all EQ structures</p>"},{"location":"reference/esta/grrmBag/plot_strs_energy/","title":"esta.grrmBag.plot_strs_energy","text":""},{"location":"reference/esta/grrmBag/plot_strs_energy/#esta.grrmBag.plot_strs_energy","title":"<code>esta.grrmBag.plot_strs_energy</code>","text":""},{"location":"reference/esta/grrmBag/plot_strs_energy/#esta.grrmBag.plot_strs_energy.process_data","title":"<code>process_data(eqlist_file=None)</code>","text":"<ul> <li>process data0.dat and EQlist.dat files for plotting </li> <li>generate plot of str vs energy in the <code>e.pdf</code></li> </ul>"},{"location":"reference/esta/grrmBag/reenergy_grrm/","title":"esta.grrmBag.reenergy_grrm","text":""},{"location":"reference/esta/grrmBag/reenergy_grrm/#esta.grrmBag.reenergy_grrm","title":"<code>esta.grrmBag.reenergy_grrm</code>","text":"<p>read the ReEnergy *EQ_list.log file and extract the energy</p>"},{"location":"reference/esta/grrmBag/reenergy_grrm/#esta.grrmBag.reenergy_grrm.get_energy","title":"<code>get_energy(filename)</code>","text":"parameters: <p>filename: str     name of the the *EQ_list.log file </p> returns: <p>energy: real array of rank 1     recalculated energy at different basis/functional level probably</p>"},{"location":"reference/esta/grrmBag/search_structure2/","title":"esta.grrmBag.search_structure2","text":""},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2","title":"<code>esta.grrmBag.search_structure2</code>","text":"<p>to get all the possible atomic structures with some constrainds from  a list of xyz strs </p> <p>author: skumar email: sonukumar.physics@gmail.com/sonukumar.icredd.hokudai.ac.jp date: July 2020 place: QCL, ICReDD, Japan</p>"},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2.struct","title":"<code>struct</code>","text":"<p>struct class for getting the possible strs with some contraints on  atoms locations</p>"},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2.struct.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic \nlabels no of atoms: scalar\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2.struct.get_str","title":"<code>get_str(xyzfile_obj, xyz_file, atoms_list, threshold=None, atoms_list_unwanted=None, threshold_unwanted=None, **kwarg)</code>","text":"<p>get xyz files with constrains mentioned .....</p> input: <pre><code>xyzobj: xyz data object\natoms_list: a list of atleast 2 atoms; e.g. [1,10], or [[1,4], [6,8]]\nx lfind: \nthreshold: list of scalars depending on list of atoms, scalars are\n           distance between atoms in angstrom; if one value given then \n           all atoms pairs have same threshold\n\natoms_list_unwanted: same as atoms_list, but these are not wanted in search sts\nthreshold_unwanted:  same as threshold, but atoms with these distances or more\n                     are needed in the final xyz str\n***kwarg: other keyword arguments\n</code></pre> output: <pre><code>only xyz files with specific constrains\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2.strInfo","title":"<code>strInfo</code>","text":"<p>class to just print the str information etc ; it takes as input information of strs from struct class.</p>"},{"location":"reference/esta/grrmBag/search_structure2/#esta.grrmBag.search_structure2.strInfo.get_str_info","title":"<code>get_str_info(filenames, atoms_info, dist_criteria, atoms_info_unwanted=None, dist_criteria_unwanted=None)</code>","text":"<p>get information of all possible atomic strs with  input constraints</p> input: <pre><code>filenames: list of all xyz files\natoms_info: list of  index of pair of atoms  (atoms numbering starting from \n            1; like the vesta reads and assigns the atom numbers)\ndist_criteria: list of distances for each pair of atoms\n</code></pre> <ul> <li>atoms_info_unwanted:  strs with following dist criteria are not needed </li> <li>dist_criteria_unwanted: strs with this critea are not needed                             ((unwanted means dist = or &gt; is needed )</li> </ul> output: <pre><code>3 output files named:\n1) \"data.dat\"    :  all strs with distances between atom pairs \n2) \"dat0.dat\"    :  contain possible  xyz str with given distance constrains\n3) \"str_id_info\" :  contained id of xyz files; can be used to view the atomic \n                    strs using vesta or other visualization tool\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure2_mod/","title":"esta.grrmBag.search_structure2_mod","text":""},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod","title":"<code>esta.grrmBag.search_structure2_mod</code>","text":"<p>to get all the possible atomic structures with some constrainds from  a list of xyz strs </p> <p>author: skumar email: sonukumar.physics@gmail.com/sonukumar.icredd.hokudai.ac.jp date: July 2020 place: QCL, ICReDD, Japan</p>"},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod.struct","title":"<code>struct</code>","text":"<p>struct class for getting the possible strs with some contraints on  atoms locations</p>"},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod.struct.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic \nlabels no of atoms: scalar\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod.struct.get_str","title":"<code>get_str(xyzfile_obj, xyz_file, atoms_list, threshold=None, atoms_list_unwanted=None, threshold_unwanted=None, **kwarg)</code>","text":"<p>get xyz files with constrains mentioned .....</p> input: <pre><code>xyzobj: xyz data object\natoms_list: a list of atleast 2 atoms; e.g. [1,10], or [[1,4], [6,8]]\nx lfind: \nthreshold: list of scalars depending on list of atoms, scalars are\n           distance between atoms in angstrom; if one value given then \n           all atoms pairs have same threshold\n\natoms_list_unwanted: same as atoms_list, but these are not wanted in search sts\nthreshold_unwanted:  same as threshold, but atoms with these distances or more\n                     are needed in the final xyz str\n***kwarg: other keyword arguments\n</code></pre> output: <pre><code>only xyz files with specific constrains\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod.strInfo","title":"<code>strInfo</code>","text":"<p>class to just print the str information etc ; it takes as input information of strs from struct class.</p>"},{"location":"reference/esta/grrmBag/search_structure2_mod/#esta.grrmBag.search_structure2_mod.strInfo.get_str_info","title":"<code>get_str_info(filenames, atoms_info, dist_criteria, atoms_info_unwanted=None, dist_criteria_unwanted=None)</code>","text":"<p>get information of all possible atomic strs with  input constraints</p> input: <pre><code>filenames: list of all xyz files\natoms_info: list of  index of pair of atoms  (atoms numbering starting from \n            1; like the vesta reads and assigns the atom numbers)\ndist_criteria: list of distances for each pair of atoms\n</code></pre> <ul> <li>atoms_info_unwanted:  strs with following dist criteria are not needed </li> <li>dist_criteria_unwanted: strs with this critea are not needed                             ((unwanted means dist = or &gt; is needed )</li> </ul> output: <pre><code>3 output files named:\n1) \"data.dat\"    :  all strs with distances between atom pairs \n2) \"dat0.dat\"    :  contain possible  xyz str with given distance constrains\n3) \"str_id_info\" :  contained id of xyz files; can be used to view the atomic \n                    strs using vesta or other visualization tool\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure3/","title":"esta.grrmBag.search_structure3","text":""},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3","title":"<code>esta.grrmBag.search_structure3</code>","text":"<p>to get all the possible atomic structures with some constrainds from  a list of xyz strs </p> <p>author: skumar email: sonukumar.physics@gmail.com/sonukumar.icredd.hokudai.ac.jp date: July 2020 place: QCL, ICReDD, Japan</p>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.struct","title":"<code>struct</code>","text":"<p>struct class for getting the possible strs with some contraints on  atoms locations</p>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.struct.read_xyz","title":"<code>read_xyz(xyzfile)</code>","text":"input: <pre><code>filename, str, filename xyz file name\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic \nlabels no of atoms: scalar\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.struct.get_str","title":"<code>get_str(xyzfile_obj, xyz_file, atoms_list, threshold=None, atoms_list_unwanted=None, threshold_unwanted=None, **kwarg)</code>","text":"<p>get xyz files with constrains mentioned .....</p> input: <pre><code>xyzobj: xyz data object\natoms_list: a list of atleast 2 atoms; e.g. [1,10], or [[1,4], [6,8]]\nx lfind: \nthreshold: list of scalars depending on list of atoms, scalars are\n           distance between atoms in angstrom; if one value given then \n           all atoms pairs have same threshold\n\natoms_list_unwanted: same as atoms_list, but these are not wanted in search sts\nthreshold_unwanted:  same as threshold, but atoms with these distances or more\n                     are needed in the final xyz str\n***kwarg: other keyword arguments\n</code></pre> output: <pre><code>only xyz files with specific constrains\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.strInfo","title":"<code>strInfo</code>","text":"<p>class to just print the str information etc. Iit takes as input information of strs from struct class.</p>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.strInfo.get_str_info","title":"<code>get_str_info(filenames, atoms_info, dist_criteria, atoms_info_unwanted=None, dist_criteria_unwanted=None)</code>","text":"<p>get information of all possible atomic strs with  input constraints</p> input: <pre><code>filenames: list of all xyz files\natoms_info: list of  index of pair of atoms  (atoms numbering starting from \n            1; like the vesta reads and assigns the atom numbers)\ndist_criteria: list of distances for each pair of atoms\n</code></pre> <ul> <li>atoms_info_unwanted:  strs with following dist criteria are not needed </li> <li>dist_criteria_unwanted: strs with this critea are not needed                             ((unwanted means dist = or &gt; is needed )</li> </ul> output: <pre><code>3 output files named:\n1) \"data.dat\"    :  all strs with distances between atom pairs \n2) \"dat0.dat\"    :  contain possible  xyz str with given distance constrains\n3) \"str_id_info\" :  contained id of xyz files; can be used to view the atomic \n                    strs using vesta or other visualization tool\n</code></pre>"},{"location":"reference/esta/grrmBag/search_structure3/#esta.grrmBag.search_structure3.strInfo.get_str_info1","title":"<code>get_str_info1(filename, atoms_info, dist_criteria, atoms_info_unwanted=None, dist_criteria_unwanted=None)</code>","text":"<p>get information of all possible atomic strs with  input constraints</p> <p>Parameters:</p> <ul> <li> <code>filename</code>           \u2013            <p>file containing all the xyz files</p> </li> <li> <code>atoms_info</code>           \u2013            <p>list of  index of pair of atoms  (atoms numbering starting from  1; like the vesta reads and assigns the atom numbers)</p> </li> <li> <code>dist_criteria</code>           \u2013            <p>list of distances for each pair of atoms</p> </li> <li> <code>atoms_info_unwanted</code>           \u2013            <p>strs with following dist criteria are not needed</p> </li> <li> <code>dist_criteria_unwanted</code>           \u2013            <p>strs with this critea are not needed ((unwanted means dist = or &gt; is needed )</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>3 output files:</code>           \u2013            <p>data.dat    :  all strs with distances between atom pairs  dat0.dat    :  contain possible  xyz str with given distance constrains str_id_info :  contained id of xyz files; can be used to view the atomic                      strs using vesta or other visualization tool</p> </li> </ul>"},{"location":"reference/esta/grrmBag/to_location/","title":"esta.grrmBag.to_location","text":""},{"location":"reference/esta/grrmBag/to_location/#esta.grrmBag.to_location","title":"<code>esta.grrmBag.to_location</code>","text":"<p>mv all data files of spectic extensions to newly created directory</p>"},{"location":"reference/esta/grrmBag/to_location/#esta.grrmBag.to_location.move_to_location","title":"<code>move_to_location(file_ext, loc)</code>","text":"input: <pre><code>str: file_ex , eg. xyz \nstr: loc, e.g. 'xyz_TS'\n</code></pre> output: <pre><code>move all files with file_ext to loc\n</code></pre> <p>mv filenames = *xyz to another location (loc);</p>"},{"location":"reference/esta/grrmBag/to_location_adv/","title":"esta.grrmBag.to_location_adv","text":""},{"location":"reference/esta/grrmBag/to_location_adv/#esta.grrmBag.to_location_adv","title":"<code>esta.grrmBag.to_location_adv</code>","text":"<p>mv all data files of spectic extensions to newly created directory</p>"},{"location":"reference/esta/grrmBag/to_location_adv/#esta.grrmBag.to_location_adv.move_to_location","title":"<code>move_to_location(file_prefix, file_ext, loc)</code>","text":"input: <pre><code>str: file_predix wihtout ext\nstr: file_ext , eg. xyz \nstr: loc, e.g. 'xyz_TS'\n</code></pre> output: <pre><code>move all files with file_ext to loc\n</code></pre> <p>mv filenames = *xyz to another location (loc);</p>"},{"location":"reference/esta/grrmBag/write_xyz/","title":"esta.grrmBag.write_xyz","text":""},{"location":"reference/esta/grrmBag/write_xyz/#esta.grrmBag.write_xyz","title":"<code>esta.grrmBag.write_xyz</code>","text":""},{"location":"reference/esta/grrmBag/write_xyz/#esta.grrmBag.write_xyz.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(pos, label, energy=None, prefix_ofile=None, comment=None, reverse=None)</code>","text":"<p>get all xyz files in a single file ...</p> <p>Parameters:</p> <ul> <li> <code>pos</code>               (<code>rank 2 array </code>)           \u2013            <p>arry of atomic positions, shape(natoms, 3)</p> </li> <li> <code>label</code>               (<code>list of strings </code>)           \u2013            <p>list of string containing atomic symbols</p> </li> <li> <code>energy</code>               (<code>array</code>, default:                   <code>None</code> )           \u2013            <p>array of energies of all atomic strs</p> </li> <li> <code>prefix_ofile</code>               (<code>(optional) string </code>, default:                   <code>None</code> )           \u2013            <p>string for prefixing the name of the output file</p> </li> <li> <code>comment</code>               (<code>(optional) logical </code>, default:                   <code>None</code> )           \u2013            <p>logical (True/False) for adding commnet in commnet line of the xyz file</p> </li> <li> <code>reverse</code>               (<code>(optional) logical</code>, default:                   <code>None</code> )           \u2013            <p>logical for printing the path in reverse order</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>outfile</code> (              <code>str</code> )          \u2013            <p>write data in a single xyz file specified by name <code>outfile</code> here outfile  =  prefix+\"\"+'all'+'.xyz'</p> </li> </ul>"},{"location":"reference/esta/grrmBag/write_xyz/#esta.grrmBag.write_xyz.get_all_xyz_file","title":"<code>get_all_xyz_file(pos, label, prefix_ofile=None, comment=None)</code>","text":"<p>get all xyz file given atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>prefix_ofile</code></p>"},{"location":"reference/esta/grrmBag/x/","title":"esta.grrmBag.x","text":""},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x","title":"<code>esta.grrmBag.x</code>","text":"<p>grrm class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm","title":"<code>grrm</code>","text":"<p>gauss class to extract the xyz file/files from the GRRM17 log file</p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm.get_atomic_positions","title":"<code>get_atomic_positions()</code>","text":"<p>get atomic positiions and atomic labels from  *_P[0-nproc].log  file of GRRM17</p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm.get_all_atomic_positions_from_EQ_list","title":"<code>get_all_atomic_positions_from_EQ_list()</code>","text":"<p>get xyz files: atomic positions and atomic labels from \"*_EQ_list.log\" file of GRRM17</p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/grrmBag/x/#esta.grrmBag.x.grrm.get_energy","title":"<code>get_energy()</code>","text":"<p>get Energy from *_EQ_list.log file of all EQ structures</p>"},{"location":"reference/esta/innout/","title":"esta.innout","text":""},{"location":"reference/esta/innout/#esta.innout","title":"<code>esta.innout</code>","text":""},{"location":"reference/esta/innout/get_docx/","title":"esta.innout.get_docx","text":""},{"location":"reference/esta/innout/get_docx/#esta.innout.get_docx","title":"<code>esta.innout.get_docx</code>","text":""},{"location":"reference/esta/innout/get_docx/#esta.innout.get_docx.to_docx","title":"<code>to_docx(lines, filename)</code>","text":"<p>write to docx file the data line in a single line</p> <p>TODO: not able to write whole file in docx ....... </p> <p>---- aim .. append mulitple lines to docx file ... Append karna hai dear sk ji!!</p>"},{"location":"reference/esta/interval2Range/","title":"esta.interval2Range","text":""},{"location":"reference/esta/interval2Range/#esta.interval2Range","title":"<code>esta.interval2Range</code>","text":""},{"location":"reference/esta/interval2Range/#esta.interval2Range.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings(in earlier versons..now integers))</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/interval2Range_adv/","title":"esta.interval2Range_adv","text":""},{"location":"reference/esta/interval2Range_adv/#esta.interval2Range_adv","title":"<code>esta.interval2Range_adv</code>","text":""},{"location":"reference/esta/interval2Range_adv/#esta.interval2Range_adv.get_range","title":"<code>get_range(list_of_intervals)</code>","text":"<p>get range of integers from intervals (note: earlier versions, output  was in the form of strings).</p> Parameters: <pre><code>list of intervals: e.g. [1,'2-4','6-10','12'] \nnote that elements of list are strings. BUT, list of integers also possible; eg. [1,2,3,4].\n</code></pre> Returns: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/interval2Range_adv/#esta.interval2Range_adv.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings(in earlier versons..now integers))</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/interval2Range_adv/#esta.interval2Range_adv.get_intv","title":"<code>get_intv(list_of_range)</code>","text":"<p>get intervals from the list of ranges </p> Parameters: <pre><code>range of intervals: e.g. [1, 2, 3, 4,    6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre> Returns: <pre><code>list of ranges: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings.\n</code></pre>"},{"location":"reference/esta/kspace/","title":"esta.kspace","text":""},{"location":"reference/esta/kspace/#esta.kspace","title":"<code>esta.kspace</code>","text":""},{"location":"reference/esta/kspace/kgrid/","title":"esta.kspace.kgrid","text":""},{"location":"reference/esta/kspace/kgrid/#esta.kspace.kgrid","title":"<code>esta.kspace.kgrid</code>","text":""},{"location":"reference/esta/kspace/kgrid/#esta.kspace.kgrid.gen_kgrid","title":"<code>gen_kgrid(grid)</code>","text":"<p>generate kpt grid in kspace</p> input: <pre><code>grid: list of 3 integers\n</code></pre> ouptut: <pre><code>filename: creates kpt_whole-zone.dat, according to vasp format\n</code></pre>"},{"location":"reference/esta/kspace/kgrid/#esta.kspace.kgrid.get_kgrid","title":"<code>get_kgrid(grid, style=None)</code>","text":"input: <pre><code>grid: list of 3 integers\n</code></pre> ouptut: <pre><code>kgrid: array of shape defined by the input indices present in grid\n    e.g. grid = [3,32,12] =&gt; kpt grid of dimensions (3, 32, 12) along \n    the 3 axis of the reciprocal space lattice\n</code></pre>"},{"location":"reference/esta/kspace/kpath/","title":"esta.kspace.kpath","text":""},{"location":"reference/esta/kspace/kpath/#esta.kspace.kpath","title":"<code>esta.kspace.kpath</code>","text":""},{"location":"reference/esta/lib_xyz/","title":"esta.lib_xyz","text":""},{"location":"reference/esta/lib_xyz/#esta.lib_xyz","title":"<code>esta.lib_xyz</code>","text":""},{"location":"reference/esta/lib_xyz/load_data/","title":"esta.lib_xyz.load_data","text":""},{"location":"reference/esta/lib_xyz/load_data/#esta.lib_xyz.load_data","title":"<code>esta.lib_xyz.load_data</code>","text":""},{"location":"reference/esta/lib_xyz/load_data_/","title":"esta.lib_xyz.load_data_","text":""},{"location":"reference/esta/lib_xyz/load_data_/#esta.lib_xyz.load_data_","title":"<code>esta.lib_xyz.load_data_</code>","text":""},{"location":"reference/esta/lib_xyz/load_data_/#esta.lib_xyz.load_data_.xyz","title":"<code>xyz(xyz_file)</code>","text":"<p>xyz_file name without extension .xyz</p>"},{"location":"reference/esta/lib_xyz/load_data_/#esta.lib_xyz.load_data_.list_xyz","title":"<code>list_xyz()</code>","text":"<p>shows a list of xyz data strs present in the current dir.</p>"},{"location":"reference/esta/list_of_dict_to_xlsx_csv/","title":"esta.list_of_dict_to_xlsx_csv","text":""},{"location":"reference/esta/list_of_dict_to_xlsx_csv/#esta.list_of_dict_to_xlsx_csv","title":"<code>esta.list_of_dict_to_xlsx_csv</code>","text":""},{"location":"reference/esta/list_of_dict_to_xlsx_csv/#esta.list_of_dict_to_xlsx_csv.get_xlsx_csv_file","title":"<code>get_xlsx_csv_file(data_list, outfile=None)</code>","text":"<p>save data in xlsx and scv file from the input list of dictionaries  containing data for each gaussian input file/ or similar files</p> <p>Returns:</p> <ul> <li> <code>    save data in the xlsx or csv format in file output.xlsx or output.csv</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <p>the input is list of dictionaries of equal number of eneteris</p> </li> </ul>"},{"location":"reference/esta/log/","title":"esta.log","text":""},{"location":"reference/esta/log/#esta.log","title":"<code>esta.log</code>","text":""},{"location":"reference/esta/log/#esta.log.log_header","title":"<code>log_header(level=logging.INFO)</code>","text":"<p>print a header containing information about esta to the log.</p>"},{"location":"reference/esta/log/#esta.log.log_footer","title":"<code>log_footer(level=logging.INFO)</code>","text":"<p>print a foote information  to the log.</p>"},{"location":"reference/esta/measure/","title":"esta.measure","text":""},{"location":"reference/esta/measure/#esta.measure","title":"<code>esta.measure</code>","text":""},{"location":"reference/esta/measure/atomic_units/","title":"esta.measure.atomic_units","text":""},{"location":"reference/esta/measure/atomic_units/#esta.measure.atomic_units","title":"<code>esta.measure.atomic_units</code>","text":"<p>In electronic structure calculations, we generally employ \u201catomic units\u201d (a.u.): here  three basic units are the fundamental constants i.e. electronic charge,  electron mass, and hbar (reduced Planck's constatn).</p> <p>Here we do the conversion between atomic units (Hartree) and SI units,  as well as conversion between Ryd atomic units and SI units.</p> <p>Generally atomic units (au) means Hartree units, atomic  Rydberg units (aru) means  Rydberg units, and natural units means natural units.</p> <p>Right now conversion between atomic units and Si units supported. </p> <p>For details see: From: http://physics.nist.gov/constants Also see the pdf file in zot. for details.</p> <p>.. note::</p> <p>AU or au: Atomic units: </p> <p>h_bar = me = e = 1   (The units in the electron's world.) </p> <p>ARU or aru: Atomic Rydberg Units:</p> <p>Atomic Rydberg units (ARU) defined by: h_bar = 2me = e^2/2 = 1 (and 4*pi*epsiom = 1)</p> <p>So the unit for angular momentum is h_bar, the unit for mass is 2m and the unit for charge is e/\u221a2 ... CTM sk!!</p> <p>#--------------------------------------------------------------    1 Hartree = 2 Ryd</p> <p>! mass_e in au_ryd = 2 * mass_e in au-hartree unit, BUT energy in au_ryd = \u00bd * energy in au-hartree unit </p> <p>=&gt; mass in au-ryd is double than au-hartree</p> <p>=&gt; energy in au-ryd is half than in au-hartree    #--------------------------------------------------------------</p> <pre><code>#=============================================================\nAll Q-E codes use atomic Rydberg units\n\n# i.e. energy in Ry, lengths in Bohr radii\n(or \\hbar=1, e^2=2, electron mass m=1/2) =&gt; charge on e=sqrt(2); mass of e = 1/2 in rau\n\n# with the exception of CP that uses atomic Hartree units\n\ni.e. energy in Ha, lengths in Bohr radii\n(or \\hbar=1, e=1, electron mass m=1)\n#=============================================================\n</code></pre> <p>.. tip::    How it works: </p> <p>This module converts SI units to atomic units i.e. Hartree units (SI to Ryd is on the same line)!!</p> <p>e.g. how to convert 0.529 angstrom to au units?</p> <p>In [7]: import esta.measure.atomic_units as atu</p> <p>In [8]: 0.529e-10 * atu.length2au </p> <p>Out[8]: 0.9996651248084494</p> <p>In [8]: atu.ao2au *.529e-10</p> <p>Out[8]: 0.9996651248084494</p> <p>e.g. convert 82nN force to au units:</p> <p>In [16]: 82e-9 * atu.force2au </p> <p>Out[16]: 0.9953000213791756</p> <p>author: skumar </p> <p>email : sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/measure/conversion_factors/","title":"esta.measure.conversion_factors","text":""},{"location":"reference/esta/measure/conversion_factors/#esta.measure.conversion_factors","title":"<code>esta.measure.conversion_factors</code>","text":"<ol> <li>library to get conversion factor to convert quantities from once to another</li> <li>get commanly use physical constants in physical and chemical sciences </li> </ol> <p>NOTE: ii ---&gt; means \u2192 inverse NOTE: har2kjmolii \u2192 hartree conversion factor to  kj mol^-1 (factor = 2625.49963948) NOTE: dynecmii2evAng2 \u2192 dyne cm^-1 to eV Ang^-2 ,.... might change to dynecmii_to_eVAngii2</p> <p>WARNING:  use scipy version &gt;=1.4.1         otherwise you get inaccurate constants after 6-7 decimal          places </p> <pre><code>      # with scipy version 1.1.0\n      #bohr radius= 5.2917721067e-11 m ; less accurate\n      #fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and\n      # as a result atoms pos and cell param are wrong after 6 dec     # places\n      #In scipy version 1.4.1\n      #bohr radiun = 5.29177210903e-11 m; is same as given \n      # in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0\n      #Numerical value     5.291 772 109 03 x 10-11 m \n      #fac = 0.529177210903\n      # so take bohr2ang = 0.529177210903 if using lower version than required\n</code></pre> <p>Author: S. Kumar,  email:  sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/mlBag/","title":"esta.mlBag","text":""},{"location":"reference/esta/mlBag/#esta.mlBag","title":"<code>esta.mlBag</code>","text":""},{"location":"reference/esta/neighbor/","title":"esta.neighbor","text":""},{"location":"reference/esta/neighbor/#esta.neighbor","title":"<code>esta.neighbor</code>","text":""},{"location":"reference/esta/neighbor/#esta.neighbor.neighbor","title":"<code>neighbor(xyzfile, atomIndex=None, cutoff=None)</code>","text":"<p>find neigbours of atoms in xyz file. </p> Parameters: <p>xyzfile: str     name of the xyzfile atomlist: list (optional)     list of atm indices whose nearest neighbors are to be found     (numbering start from 1). Default is all atoms from xyz file cutoff: float (optional)     cutoff distance within which atoms are considered to be bonded or tagged     as nearest neighbors. Default value is 2 unit in atomic coordinate units   </p> Return: <p>nn_id: list      list of list containing nearest neighbors of each atom present in atomIndex or all atoms     (atom indexing starting from 1) dd: list      list of list containing distances of ref atom with its neighbors nn_num: list     list of integers for number of nearest neighbors </p> <p>..note:: </p> <pre><code>d(1,1..n1) = array of n1 values\nd(2,1..n2) = array of  n2 values\n....\nd(n,1..n_n) = array of n_n values\n\nd is array of distances of ith atom from its n_i neighbors. May be \nyou can cast this array in following implementation\n</code></pre>"},{"location":"reference/esta/neighbor/#esta.neighbor.neighbor2","title":"<code>neighbor2(xyzpt, atomIndex=None, cutoff=None)</code>","text":"<p>find neigbours of all or selected atoms in xyzpt array. </p> Parameters: <p>xyzpt: array of rank 2     name of the xyzfile atomlist: list (optional)     list of atm indices whose nearest neighbors are to be found     (numbering start from 1). Default is all atoms from xyz file cutoff: float (optional)     cutoff distance within which atoms are considered to be bonded or tagged     as nearest neighbors. Default value is 2 unit in atomic coordinate units   </p> Return: <p>nn_id: list      list of list containing nearest neighbors of each atom present in atomIndex or all atoms     (atom indexing starting from 1) dd: list      list of list containing distances of ref atom with its neighbors nn_num: list     list of integers for number of nearest neighbors </p> <p>..note:: </p> <pre><code>d(1,1..n1) = array of n1 values\nd(2,1..n2) = array of  n2 values\n....\nd(n,1..n_n) = array of n_n values\n\nd is array of distances of ith atom from its n_i neighbors. May be \nyou can cast this array in following implementation\n</code></pre>"},{"location":"reference/esta/orcaBag/","title":"esta.orcaBag","text":""},{"location":"reference/esta/orcaBag/#esta.orcaBag","title":"<code>esta.orcaBag</code>","text":""},{"location":"reference/esta/orcaBag/input_orca/","title":"esta.orcaBag.input_orca","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca","title":"<code>esta.orcaBag.input_orca</code>","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp","title":"<code>GenerateInp</code>","text":"<p>python class to generate input files (*.inp file) for orca calculations for orca 5 or higher see the manual or tutorial:  https://www.orcasoftware.de/tutorials_orca/</p>"},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---scf-calculaton-","title":"-------SCF calculaton-----------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-def2-svp-hf-def2-svp-def2j-rijdx-energy-or-sp","title":"!B3LYP DEF2-SVP                       # !HF DEF2-SVP DEF2/J RIJDX   # ENERGY or SP","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyz-0-1","title":"* xyz 0 1","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--o-356626-177639-000000","title":"O         -3.56626        1.77639        0.00000","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--h-259626-177639-000000","title":"H         -2.59626        1.77639        0.00000","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--h-388959-136040-081444","title":"H         -3.88959        1.36040       -0.81444","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--_1","title":"*","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---or-scf-opt-and-freq-calculations-with-and-without-solvent-effect","title":"-OR-- SCF OPT and FREQ calculations with and without solvent effect","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-d4-def2-svp-opt-freq-cpcmtoluene","title":"!B3LYP D4 DEF2-SVP OPT FREQ CPCM(TOLUENE)","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyzfile-0-1-4cn_reactantxyz","title":"* XYZFILE 0 1 4CN_reactant.xyz","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---","title":"--------------------------------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---exmaple-inp-orca-file-opt-","title":"--------exmaple *inp orca file--OPT--------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--pal-nprocs-20","title":"%pal nprocs 20","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--end","title":"end","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--bp86-d3zero-def2-svp-def2j-rijcosx-nousesym-opt-tightopt-d3-or-d4","title":"! BP86 D3ZERO def2-SVP def2/J RIJCOSX NoUseSym OPT     # !TIGHTOPT   D3 or D4","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--scf-maxiter-500-end","title":"%scf maxiter 500 end","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyz-2-2","title":"* xyz  2 2","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--c-1704532480776-2390489113313-1208188472705","title":"C          1.704532480776          2.390489113313         -1.208188472705","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--o-1065818947882-3427987054904-0993677976126","title":"O          1.065818947882          3.427987054904         -0.993677976126","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--n","title":"N ...","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--_2","title":"..","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--_3","title":"*","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---end-example-","title":"---------end example ---------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---freq-","title":"#------------------FREQ-------------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-def2-svp-opt-freq","title":"!B3LYP DEF2-SVP OPT FREQ","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyz-0-1_1","title":"* XYZ 0 1","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--c-081589-051571-002512","title":"C         -0.81589       -0.51571       -0.02512","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--c-030690-049327-006114","title":"C          0.30690        0.49327       -0.06114","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--h-042809-156","title":"H         -0.42809       -1.56","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_1","title":"---","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--_4","title":"*","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_2","title":"#------------------------------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---solvent-","title":"---------solvent ----------------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--cpcmsolvent","title":"!CPCM(solvent)","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_3","title":"----------------------------------","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--if-other-solvent-not-present","title":"if other solvent not present","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--cpcm-epsilon-804","title":"%CPCM       EPSILON      80.4","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--refrac-133","title":"REFRAC       1.33","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--end_1","title":"END","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--with-smd-","title":"with SMD----","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--cpcm-smd-true","title":"%CPCM SMD TRUE","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--smdsolvent-solvent","title":"SMDSOLVENT \"SOLVENT\"","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--end_2","title":"END","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_4","title":"----------------------------------","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--single-point-calculations-using-solvent","title":"single point calculations using solvent..............","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--bp86-def2-svp-cpcmwater","title":"!BP86 DEF2-SVP CPCM(WATER)","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyzfile-0-1-aspirinxyz","title":"* XYZFILE 0 1 aspirin.xyz","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_5","title":"----------------------------------------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---neb-calculations-","title":"---------------NEB calculations -----------------------------!","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---first-do-opt-of-reactant-and-product","title":"--first do opt of reactant and product....","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-def2-svp-opt-d4","title":"!B3LYP DEF2-SVP OPT D4","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---then-neb-calculations","title":"---then NEB calculations.....","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-def2-svp-d4-neb-ts-freq","title":"!B3LYP DEF2-SVP D4 NEB-TS FREQ","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--neb-neb_end_xyzfile-productxyz-end","title":"%NEB NEB_END_XYZFILE \"product.xyz\" END","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyzfile-0-1-reactantxyz","title":"* XYZfile 0 1 reactant.xyz","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--or-with-ts-guess","title":"OR  with TS guess","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--b3lyp-def2-svp-d4-neb-ts-freq_1","title":"!B3LYP DEF2-SVP D4 NEB-TS FREQ","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--neb-neb_end_xyzfile-productxyz","title":"%NEB NEB_END_XYZFILE \"product.xyz\"","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--neb_ts_xyzfile-guesstsxyz","title":"NEB_TS_XYZFILE \"guessTS.xyz\"","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--end_3","title":"END","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp--xyzfile-0-1-reactantxyz_1","title":"* XYZfile 0 1 reactant.xyz","text":""},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp---_6","title":"------------------------------------------------------------","text":"<p>author: skumar</p>"},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp.__init__","title":"<code>__init__(xyzfile, charge, multiplicity, cal_type)</code>","text":"<p>class to generate input files (*.inp file) for orca5 calculations</p>"},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp.read_xyz","title":"<code>read_xyz()</code>","text":"Parameters <p>filename : str     xyz file name</p> Returns <p>atomic positions : array     rank 2 array of shape (natoms, 3) atomic labels : list/array of strings     rank 1 array of atomic labels strings : string     string mentioning the units of coordinates</p>"},{"location":"reference/esta/orcaBag/input_orca/#esta.orcaBag.input_orca.GenerateInp.write_inp","title":"<code>write_inp(functional=None, basis=None, dispersion=None, solvent=None, nproc=None, memory=None, **extra_tags)</code>","text":"<p>Parameters:</p> <ul> <li> <code>functional</code>           \u2013            <p>information for the functional</p> </li> <li> <code>basis</code>           \u2013            <p>information for the basis</p> </li> <li> <code>dispersion</code>           \u2013            <p>dispersion interactions</p> </li> <li> <code>solvent</code>           \u2013            <p>solvent for the reaction</p> </li> <li> <code>nproc</code>           \u2013            <p>no. of processors</p> </li> <li> <code>memory</code>           \u2013            <p>memory for the calculations, e.g. 3000 in MB? check it?</p> </li> <li> <code>extra_tags</code>           \u2013            <p>a dictionary containing orca related parameters, e.g. nosymm etc.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>input</code> (              <code>*inp orca  file containing info of atomic structure as well </code> )          \u2013            <p>as other parameters</p> </li> <li> <code>..note ::</code>           \u2013            <p>! BP86 D3ZERO def2-SVP def2/J RIJCOSX NoUseSym OPT     # !TIGHTOPT   D3 or D4 %maxcore 4000 %pal nprocs 20     end %scf maxiter 500 end * xyz  2 2 C          1.704532480776          2.390489113313         -1.208188472705</p> </li> </ul>"},{"location":"reference/esta/orcaBag/output_orca/","title":"esta.orcaBag.output_orca","text":""},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca","title":"<code>esta.orcaBag.output_orca</code>","text":"<p>orca class to handle for the orca5 log file</p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca","title":"<code>orca</code>","text":"<p>gauss class for the  orca5 output file</p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_all_atomic_positions","title":"<code>get_all_atomic_positions()</code>","text":"<p>get all atomic positions from the log file of orca</p> <p>..important::     all the atomic positions are stored in pos_all array</p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get a single xyz file from atomic positions and atomic labels input.</p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_all_xyz_file","title":"<code>get_all_xyz_file()</code>","text":"<p>get all xyz file by reading the atomic positions and atomic numbers: </p> <p>.. note::     outfile: write data in xyz file specified by name <code>outfile</code></p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(comment=None)</code>","text":"<p>get all xyz file by reading the atomic positions and atomic labels: </p> <p>.. note::     outfile: write data in a single xyz file specified by name <code>outfile</code>;      here outfile  =  prefix+\"\"+'all'+'.xyz'</p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_single_point_energy","title":"<code>get_single_point_energy()</code>","text":"<p>extract energies from the orca log file</p> <p>.. note::      get the energies from the orca log file</p> <pre><code>for example: see below\n\n        *****************************************************\n        *                     SUCCESS                       *\n        *           SCF CONVERGED AFTER  48 CYCLES          *\n        *****************************************************\n</code></pre> <p>Total Energy       :        -4491.78479971 Eh         -122227.67834 eV Last Energy change         ...   -8.1855e-12  Tolerance :   1.0000e-08 Last Orbital Gradient      ...    9.1721e-07  Tolerance :   1.0000e-05 Last Orbital Rotation      ...    1.8358e-05</p> <p>.... ....</p> <p>Expectation value of      :     0.782865 Ideal value S*(S+1) for S=0.5   :     0.750000 Deviation                       :     0.032865 <p>-------------------------   --------------------</p> FINAL SINGLE POINT ENERGY     -4492.008627452366"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_forces","title":"<code>get_forces()</code>","text":"<p>TODO ......FOR ORCA ....</p> <p>this is taken from gaussian ....  TODO for orca ...</p> <p>find the forces on all atoms along with max force, and min of all forces on atoms</p> <p>parameters:          self.filename: str          name of the gaussian log file</p>"},{"location":"reference/esta/orcaBag/output_orca/#esta.orcaBag.output_orca.orca.get_homo_lumo","title":"<code>get_homo_lumo()</code>","text":"<p>get homo, lumo, and band gaps in hartree (default) from log file of the gaussian, check whether  spin polairsed system or not?</p>"},{"location":"reference/esta/pbc/","title":"esta.pbc","text":""},{"location":"reference/esta/pbc/#esta.pbc","title":"<code>esta.pbc</code>","text":""},{"location":"reference/esta/pbc/#esta.pbc.do_pbc","title":"<code>do_pbc(a, b, pbc=[False, False, False])</code>","text":"<p>bring the xrystal coordinates with in the  unit celll  using method of minimum image convention ...TESTING NEEDED..for oblique lattices..!!</p> <p>a,b: corrdinate in xccrystal basis pbc: periodic along direct lattice axis vectors</p>"},{"location":"reference/esta/ped/","title":"esta.ped","text":""},{"location":"reference/esta/ped/#esta.ped","title":"<code>esta.ped</code>","text":""},{"location":"reference/esta/ped/afir/","title":"esta.ped.afir","text":""},{"location":"reference/esta/ped/afir/#esta.ped.afir","title":"<code>esta.ped.afir</code>","text":"<p>AFIR approach implementation for basic chemical reactions: move atoms closer or away from each other to simulate the  chemical reaction</p> <p>Following examples will be explored to understand the AFIR method: 1. take example of H2+H -&gt; H + H2 system and try to move the atoms 2. O2 dissociation on atomic surfaces  3. H2O splitting on atomic surface such as metal surfaces</p> <p>implementation : see the notes. .... set of procedures to be followed ...</p> <p>Read CG algorithm and implement as a toy model, relax h2O molcules (test against scipy implementatino) read BFGS algorith and implement as  a toy model, and relax H2O molecule --  (test the implementation against the ASE implementation and Scipy implementation)</p> <ol> <li>energy of initial str</li> <li>energy of moved str with force and without force</li> </ol>"},{"location":"reference/esta/ped/afir/#esta.ped.afir.dpe","title":"<code>dpe(xyz)</code>","text":"<p>dpe for the object xyz</p> <p>dpe = c * sum (d_ij * gamma_ij)/ sum (gamma_ij)</p> <p>where c =  N/ ( 2^(-\u2159) - ( 1 + sqrt (1 + (N/eps) ) ^(-\u2159))  * R0) R0 = 3.8164 Ang, and eps = 1.0061 kJmol-1; ith atom belongs to system i(S_i), and jth atom belongs to system j (S_j)</p> <p>Parameters:</p> <ul> <li> <code>xyz</code>               (<code>obj</code>)           \u2013            <p>xyz object containing information of coordinates and atomic symbols</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dp_energy</code> (              <code>scalar</code> )          \u2013            <p>distorted potential energy </p> </li> <li> <code>note</code> (              <code> </code> )          \u2013            </li> <li> <code>see</code> (              <code>https://stackoverflow.com/questions/11480106/python-pass-object-as-argument</code> )          \u2013            </li> <li> <code>Update</code> (              <code>The OP is trying to pass an object instance at class definition time (or so I</code> )          \u2013            </li> <li> <code>think after seeing his comment).  The answer below is not applicable.</code>           \u2013            </li> <li> <code>Is this what you are trying to achieve?</code>           \u2013            </li> <li> <code>class Car:</code>           \u2013            <p>def init(self, driver):     self.driver = driver</p> </li> <li> <code>class Driver:</code>           \u2013            <p>pass</p> </li> <li> <code>driver = Driver()</code>           \u2013            </li> <li> <code>car = Car(driver)</code>           \u2013            </li> </ul>"},{"location":"reference/esta/ped/dpe/","title":"esta.ped.dpe","text":""},{"location":"reference/esta/ped/dpe/#esta.ped.dpe","title":"<code>esta.ped.dpe</code>","text":"<p>computer the distorted potential energy function (DPE) or PED (potential energy distortion  function) for a given atomic configuration</p>"},{"location":"reference/esta/ped/dpe/#esta.ped.dpe.dpe","title":"<code>dpe(xyz)</code>","text":"<p>dpe for the object xyz</p> <p>dpe = c * sum (d_ij * gamma_ij)/ sum (gamma_ij)</p> <p>where c =  N/ ( 2^(-\u2159) - ( 1 + sqrt (1 + (N/eps) ) ^(-\u2159))  * R0) R0 = 3.8164 Ang, and eps = 1.0061 kJmol-1; ith atom belongs to system i(S_i), and jth atom belongs to system j (S_j)</p> <p>see: https://stackoverflow.com/questions/11480106/python-pass-object-as-argument</p> <p>Update: The OP is trying to pass an object instance at class definition time (or so I think after seeing his comment). The answer below is not applicable.</p> <p>Is this what you are trying to achieve?</p> <p>class Car:     def init(self, driver):         self.driver = driver</p> <p>class Driver:     pass</p> <p>driver = Driver() car = Car(driver)</p> <p>Parameters:</p> <ul> <li> <code>xyz</code>               (<code>obj</code>)           \u2013            <p>xyz object containing information of coordinates and atomic symbols</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dp_energy</code> (              <code>scalar</code> )          \u2013            <p>distorted potential energy</p> </li> </ul>"},{"location":"reference/esta/phonon/","title":"esta.phonon","text":""},{"location":"reference/esta/phonon/#esta.phonon","title":"<code>esta.phonon</code>","text":""},{"location":"reference/esta/phonon/atm_displacements/","title":"esta.phonon.atm_displacements","text":""},{"location":"reference/esta/phonon/atm_displacements/#esta.phonon.atm_displacements","title":"<code>esta.phonon.atm_displacements</code>","text":""},{"location":"reference/esta/phonon/atm_displacements/#esta.phonon.atm_displacements.gen_disp","title":"<code>gen_disp(posfile, qe_part_file)</code>","text":"<p>generate set of displacement of atoms in +ve and - directions by delta_x = 0.04 Ang   (this parameter may be varied according to need and physical requirements )</p> <p>input:     poscar file; string output:     set of files named:         positions_01_0 and like that         fist integer is atom index; \u2192 0, 1, 2 ... N-1 (N=no of atoms)         second intege is positon index; i.e. x , y, and z \u2192 0,1,2         last integer is for -ve and +disp \u2192 0,1         [0/1] at the end means displacement along +ve and -ve directions respectively</p>"},{"location":"reference/esta/phonon/atm_displacements_selective/","title":"esta.phonon.atm_displacements_selective","text":""},{"location":"reference/esta/phonon/atm_displacements_selective/#esta.phonon.atm_displacements_selective","title":"<code>esta.phonon.atm_displacements_selective</code>","text":""},{"location":"reference/esta/phonon/atm_displacements_selective/#esta.phonon.atm_displacements_selective.gen_disp","title":"<code>gen_disp(posfile, qe_part_file, disp_value=None)</code>","text":"<p>generate set of displacement of atoms in +ve and - directions by delta_x = 0.04 Ang   (this parameter may be varied according to need and physical requirements )</p> <p>input:     poscar file; string     qe_part_file: part of qe part witout atomic postions part (ATOMIC_POSITIONS (angstrom) tag present)     disp_value: scalar for atm displacement in Ang.</p> <p>output:     set of files named:         positions_01_0 and like that         fist integer is atom index; \u2192 0, 1, 2 ... N-1 (N=no of atoms)         second intege is positon index; i.e. x , y, and z \u2192 0,1,2         last integer is for -ve and +disp \u2192 0,1         [0/1] at the end means displacement along +ve and -ve directions respectively</p> <p>NOTE:     both atomic position outputs: qe and poscar are implemented</p>"},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp/","title":"esta.phonon.atm_displacements_selective_general_disp","text":""},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp/#esta.phonon.atm_displacements_selective_general_disp","title":"<code>esta.phonon.atm_displacements_selective_general_disp</code>","text":""},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp/#esta.phonon.atm_displacements_selective_general_disp.gen_disp","title":"<code>gen_disp(posfile, qe_part_file, val_displacement)</code>","text":"<p>generate set of displacement of atoms in +ve and - directions by val_displacement (e.g.  earlier it was delta_x = 0.04 Ang; this parameter may be varied according to need  and physical requirements )</p> <p>input:     poscar file; string output:     set of files named:         positions_01_0 and like that         fist integer is atom index; \u2192 0, 1, 2 ... N-1 (N=no of atoms)         second intege is positon index; i.e. x , y, and z \u2192 0,1,2         last integer is for -ve and +disp \u2192 0,1         [0/1] at the end means displacement along +ve and -ve directions respectively</p> <p>NOTE:   both atomic position outputs: qe and poscar are implemented NOTE:   Generally val_displacement should be 0.04 ang for bulk materials         for surface or surface species involved during chemical reactions, it to          be 0.02 angstrom.</p> <p>.. note::      displacement for atoms to find the hessian matrix should be 0.0075 Ang      (see Accessing Numerical Energy Hessians with Graph Neural Network Potentials and      Their Application in Heterogeneous Catalysis): For each direction, two displacements      of 0.0075 \u02daA were performed. The electronic convergence criterion was met if the      change in energy between iterations was less than 1 \u00d7 10\u22126 eV . </p> <pre><code> : Sept, 2019\n</code></pre> <p>email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp_adv/","title":"esta.phonon.atm_displacements_selective_general_disp_adv","text":""},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp_adv/#esta.phonon.atm_displacements_selective_general_disp_adv","title":"<code>esta.phonon.atm_displacements_selective_general_disp_adv</code>","text":""},{"location":"reference/esta/phonon/atm_displacements_selective_general_disp_adv/#esta.phonon.atm_displacements_selective_general_disp_adv.gen_disp","title":"<code>gen_disp(posfile, qe_part_file, val_displacement)</code>","text":"<p>generate set of displacement of atoms in +ve and - directions by val_displacement (e.g.  earlier it was delta_x = 0.04 Ang; this parameter may be varied according to need  and physical requirements )</p> <p>input:     poscar file; string output:     set of files named:         positions_01_0 and like that         fist integer is atom index; \u2192 0, 1, 2 ... N-1 (N=no of atoms)         second intege is positon index; i.e. x , y, and z \u2192 0,1,2         last integer is for -ve and +disp \u2192 0,1         [0/1] at the end means displacement along +ve and -ve directions respectively</p> <p>NOTE:   both atomic position outputs: qe and poscar are implemented NOTE:   Generally val_displacement should be 0.04 ang for bulk materials         for surface or surface species involved during chemical reactions, it to          be 0.02 angstrom.</p> <p>.. note::      displacement for atoms to find the hessian matrix should be 0.0075 Ang      (see Accessing Numerical Energy Hessians with Graph Neural Network Potentials and      Their Application in Heterogeneous Catalysis): For each direction, two displacements      of 0.0075 \u02daA were performed. The electronic convergence criterion was met if the      change in energy between iterations was less than 1 \u00d7 10\u22126 eV . </p> <pre><code> : Sept, 2019\n</code></pre> <p>email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/","title":"esta.phonon.fc_and_freq_selected_atoms","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms","title":"<code>esta.phonon.fc_and_freq_selected_atoms</code>","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.reshape_dyn","title":"<code>reshape_dyn(dynmatrix, atommove)</code>","text":"<p>reshape dynamical matrix</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms/#esta.phonon.fc_and_freq_selected_atoms.get_eigen_","title":"<code>get_eigen_(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/","title":"esta.phonon.fc_and_freq_selected_atoms_02112024","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024","title":"<code>esta.phonon.fc_and_freq_selected_atoms_02112024</code>","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p> Returns: <p>fc0: array      forces for -ve (id=0)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p> Returns: <p>fc1: array      forces for +ve (id=1)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_forceconstant_matrix","title":"<code>get_forceconstant_matrix(atommove, forces, deltax, sign_deltax='plus')</code>","text":"<p>sign_deltax has impact on the values of force-constant: values are reflection of each other therefore choose plus or minus after checking the magnitude of force-constant matrix  **after checking: plus MUST be the default value    **</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja) </p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2   ??? ia and ja .. no need to change; on;y atom indices???     ONLY ATOMS INDICES MUST BE FLIPPED ... CHECK FOR THE 1 MOLECULE CASE .. GOOD*** 02102024</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.reshape_dyn","title":"<code>reshape_dyn(dynmatrix, atommove)</code>","text":"<p>reshape dynamical matrix</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre> <p>..note: the eigen vector from the diagonalization oof the  Dynamical matrix          is different from the eigen displacement.          eigen-displacement of atm k (real displacement of atoms)=   eign vector / sqrt(mass of atm k)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_02112024/#esta.phonon.fc_and_freq_selected_atoms_02112024.get_eigen_","title":"<code>get_eigen_(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre> <p>..note: the eigen vector from the diagonalization oof the  Dynamical matrix          is different from the eigen displacement.          eigen-displacement of atm k (real displacement of atoms)=   eign vector / sqrt(mass of atm k)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/","title":"esta.phonon.fc_and_freq_selected_atoms_05112024","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024","title":"<code>esta.phonon.fc_and_freq_selected_atoms_05112024</code>","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p> Returns: <p>fc0: array      forces for -ve (id=0)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p> Returns: <p>fc1: array      forces for +ve (id=1)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_forceconstant_matrix","title":"<code>get_forceconstant_matrix(atommove, forces, deltax, sign_deltax='plus')</code>","text":"<p>sign_deltax has impact on the values of force-constant: values are reflection of each other therefore choose plus or minus after checking the magnitude of force-constant matrix  **after checking: plus MUST be the default value    **</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2   ??? ia and ja .. no need to change; on;y atom indices??? BIG FINDING**     ONLY ATOMS INDICES MUST BE FLIPPED ... CHECK FOR THE 1 MOLECULE CASE .. GOOD*** 02102024</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.reshape_dyn","title":"<code>reshape_dyn(dynmatrix, atommove)</code>","text":"<p>reshape dynamical matrix</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_05112024/#esta.phonon.fc_and_freq_selected_atoms_05112024.get_eigen_","title":"<code>get_eigen_(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/","title":"esta.phonon.fc_and_freq_selected_atoms_06112024","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024","title":"<code>esta.phonon.fc_and_freq_selected_atoms_06112024</code>","text":""},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p> Returns: <p>fc0: array      forces for -ve (id=0)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p> Returns: <p>fc1: array      forces for +ve (id=1)  direction</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_forceconstant_matrix","title":"<code>get_forceconstant_matrix(atommove, forces, deltax, sign_deltax='plus')</code>","text":"<p>sign_deltax has impact on the values of force-constant: values are reflection of each other therefore choose plus or minus after checking the magnitude of force-constant matrix  **after checking: plus MUST be the default value    **</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2   ??? ia and ja .. no need to change; on;y atom indices??? BIG FINDING**     ONLY ATOMS INDICES MUST BE FLIPPED ... CHECK FOR THE 1 MOLECULE CASE .. GOOD*** 02102024</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.reshape_dyn","title":"<code>reshape_dyn(dynmatrix, atommove)</code>","text":"<p>reshape dynamical matrix</p>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/fc_and_freq_selected_atoms_06112024/#esta.phonon.fc_and_freq_selected_atoms_06112024.get_eigen_","title":"<code>get_eigen_(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/","title":"esta.phonon.force_constant_and_frequencies_selective_subspace_","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_","title":"<code>esta.phonon.force_constant_and_frequencies_selective_subspace_</code>","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_/#esta.phonon.force_constant_and_frequencies_selective_subspace_.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/","title":"esta.phonon.force_constant_and_frequencies_selective_subspace_general","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general","title":"<code>esta.phonon.force_constant_and_frequencies_selective_subspace_general</code>","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general/#esta.phonon.force_constant_and_frequencies_selective_subspace_general.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/","title":"esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv","title":"<code>esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv</code>","text":""},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_forces_central","title":"<code>get_forces_central(force_c0, force_c1)</code>","text":"<p>Note: difference of force4 +ve disp and force4 -ve disp, and  then divide to get the average</p> <p>sum of forces cannot be taken because that way you are cancelling the  forces bcz one force is almost equal but negative of other</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p> <p>WARNING: asr is applied only on the part of the force constant matrix          defined by the list of moving atoms .. is it ok? .. sk!</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.reshape_dyn","title":"<code>reshape_dyn(dynmatrix, atommove)</code>","text":"<p>reshape dynamical matrix</p>"},{"location":"reference/esta/phonon/force_constant_and_frequencies_selective_subspace_general_adv/#esta.phonon.force_constant_and_frequencies_selective_subspace_general_adv.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p> input: <pre><code>array: array of rank 2 of shape (3*natoms, 3*natoms)\n</code></pre> output: <pre><code>array: 1d array of size 3natoms; it is eigen value\narray: 2d array of shape (natoms, 3natoms); it is eigen \n    vector for each eigval\n</code></pre>"},{"location":"reference/esta/phonon/forces/","title":"esta.phonon.forces","text":""},{"location":"reference/esta/phonon/forces/#esta.phonon.forces","title":"<code>esta.phonon.forces</code>","text":""},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_forces_dict","title":"<code>get_forces_dict(natoms)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(natoms)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_forces_minus","title":"<code>get_forces_minus(natoms, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id :0) displacement</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_forces_plus","title":"<code>get_forces_plus(natoms, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id :1) displacement</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, natoms)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : sfor writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_dynamical_matrix","title":"<code>get_dynamical_matrix(natoms, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/forces/#esta.phonon.forces.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p>"},{"location":"reference/esta/phonon/forces_selective/","title":"esta.phonon.forces_selective","text":""},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective","title":"<code>esta.phonon.forces_selective</code>","text":""},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_forces_minus","title":"<code>get_forces_minus(natoms, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id :0) displacement</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_forces_plus","title":"<code>get_forces_plus(natoms, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id :1) displacement</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, natoms)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : sfor writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_dynamical_matrix","title":"<code>get_dynamical_matrix(natoms, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/forces_selective/#esta.phonon.forces_selective.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p>"},{"location":"reference/esta/phonon/normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO/","title":"esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO","text":""},{"location":"reference/esta/phonon/normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO/#esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO","title":"<code>esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO</code>","text":"<p>this code taken from google ...........project out the translation and rotations from mass weighted hessian matrix. </p> <p>READ theroy : gaussian pdf file ...see doc in phonon dir               read TRB block related paper from zotero mac  ...</p> <p>basically find a projection matrix???</p>"},{"location":"reference/esta/phonon/normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO/#esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO.eckart_frame","title":"<code>eckart_frame(geom, masses)</code>","text":"<p>Moves the molecule to the Eckart frame</p> <p>Params:     geom ((natoms,4) np.ndarray) - Contains atom symbol and xyz coordinates     masses ((natoms) np.ndarray) - Atom masses</p> <p>Returns:     COM ((3), np.ndarray) - Molecule center of mess     L ((3), np.ndarray) - Principal moments     O ((3,3), np.ndarray)- Principle axes of inertial tensor     geom2 ((natoms,4 np.ndarray) - Contains new geometry (atom symbol and xyz coordinates)</p>"},{"location":"reference/esta/phonon/normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO/#esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO.vibrational_basis","title":"<code>vibrational_basis(geom, masses)</code>","text":"<p>Compute the vibrational basis in mass-weighted Cartesian coordinates. This is the column-space of the translations and rotations in the Eckart frame.</p> <p>Params:      geom (geometry struct) -      masses (list of float) - masses for the geometry</p> <p>Returns:     B ((3*natom, 3*natom-6) np.ndarray) - orthonormal basis for vibrations.      Mass-weighted cartesians in rows, mass-weighted vibrations in columns.</p>"},{"location":"reference/esta/phonon/normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO/#esta.phonon.normal_mode_analysis__project_out_Trans_n_rotations_EXPLORE_also_read_gaussian_notes_IT_TODO.normal_modes","title":"<code>normal_modes(geom, hess, masses)</code>","text":"<p>Params:     geom ((natoms,4) np.ndarray) - atoms symbols and xyz coordinates     hess ((natoms*3,natoms*3) np.ndarray) - molecule hessian     masses ((natoms) np.ndarray) - masses</p> <p>Returns:     w ((natoms*3 - 6) np.ndarray)  - normal frequencies     Q ((natoms*3, natoms*3 - 6) np.ndarray)  - normal modes</p>"},{"location":"reference/esta/phonon/sum_freq_and_zpe/","title":"esta.phonon.sum_freq_and_zpe","text":""},{"location":"reference/esta/phonon/sum_freq_and_zpe/#esta.phonon.sum_freq_and_zpe","title":"<code>esta.phonon.sum_freq_and_zpe</code>","text":""},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/","title":"esta.phonon.x_error_force_constant_and_frequencies_selective_subspace","text":""},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace","title":"<code>esta.phonon.x_error_force_constant_and_frequencies_selective_subspace</code>","text":""},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_forces_dict","title":"<code>get_forces_dict(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_forces_dict_parta","title":"<code>get_forces_dict_parta(atommove)</code>","text":"<p>get forces fron qe output files with + and - displacements and store them in dictionary with indices indication atoms moving index, atom shift index, and displacemet(+ or -)</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_idatm_iddir_iddispl","title":"<code>get_idatm_iddir_iddispl(atommove)</code>","text":"<p>get a list of 'idatm-iddir-iddispl'     idatm: atom id     iddir : atom move direction index     iddispl: + or - shift of atoms</p> <p>atom_direction_shift ==&gt; id atom, id direction, id shift</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_forces_minus","title":"<code>get_forces_minus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for minus (id=0) displacement</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_forces_plus","title":"<code>get_forces_plus(atommove, forces_dict, atom_direction_shift)</code>","text":"<p>extract forces from forces_dict for plus (id=1) displacement</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_symmetrized_force_constant_matrix","title":"<code>get_symmetrized_force_constant_matrix(fcMatrx, atommove)</code>","text":"<p>symmetrize force constant matrix fc(iat, ia, jat, ja)</p> <p>return      (fc(iat, ia, jat, ja) + fc(jat, ja, iat, ia))/2</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_asr","title":"<code>get_asr(fcMatrix, atommove)</code>","text":"<p>apply accoustic sum rule on the force constant matrix</p> <p>see Xavier gonze PRB paper: </p> <p>XAVIER GONZE AND CHANGYOL LEE PHYSICAL REVIEW B VOLUME 55, NUMBER 16 15 APRIL 1997-I</p> <p>specifically see equations: 44 and 45.. good luck ..read whole paper..sk!!</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.write_forces","title":"<code>write_forces(force_row, ldisp)</code>","text":"<p>may be you need to add ... atoms parameter in the call ..</p> <p>write forces rows to a file  NOTE: only for - and + displacement</p> <p>todo : for writing central diff force constant .. no need of ldisp tag</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_sqrt_mass_array","title":"<code>get_sqrt_mass_array(label)</code>","text":"<p>for given atomic symbols, return correspoinding masses in amu</p>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_dynamical_matrix","title":"<code>get_dynamical_matrix(atommove, sqrt_mass_array, forceconstant)</code>","text":"<p>getting dynamical matrix from force constant matrix at q=0 point</p> <p>NOTE: for q=0 </p> <pre><code>   1. dynmat = fc matric/ sqrt(mass1)/ sqrt(mass2)\n\n   2. dynmat in q space = dynmat in R space; see equation 7 in \n           paper of Ab initio calculation of phonon dispersions in semiconductors\n           prb. Paolo Giannozzi et al. 1991\n</code></pre>"},{"location":"reference/esta/phonon/x_error_force_constant_and_frequencies_selective_subspace/#esta.phonon.x_error_force_constant_and_frequencies_selective_subspace.get_eigen","title":"<code>get_eigen(dynamatical_matrix)</code>","text":"<p>dynamical matrix is hermitian matrix .. try taking it Hermitian matrix instead of general matrix</p>"},{"location":"reference/esta/phonon/yaml_read_band/","title":"esta.phonon.yaml_read_band","text":""},{"location":"reference/esta/phonon/yaml_read_band/#esta.phonon.yaml_read_band","title":"<code>esta.phonon.yaml_read_band</code>","text":"<p>read band.yaml file output from the phonopy code and write the specific  phonon q point freqency in cm^{-1}.</p>"},{"location":"reference/esta/phonon/yaml_read_band/#esta.phonon.yaml_read_band.read_yaml_band","title":"<code>read_yaml_band(filename=None, qpt_index=None, outfile=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the filename containing band data in yaml format, default is band.yaml</p> </li> <li> <code>qpt_index</code>               (<code>integer</code>, default:                   <code>None</code> )           \u2013            <p>qpt index for which frequency data to be read, default is first qpoint.</p> </li> <li> <code>outfie</code>               (<code>str</code>)           \u2013            <p>outfile is name of the output file, default is band_cmii.dat</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of reals</code> )          \u2013            <p>vibration frequencies in cm-1</p> </li> </ul>"},{"location":"reference/esta/phononBag/","title":"esta.phononBag","text":""},{"location":"reference/esta/phononBag/#esta.phononBag","title":"<code>esta.phononBag</code>","text":""},{"location":"reference/esta/phononBag/atom_projected_phDOS/","title":"esta.phononBag.atom_projected_phDOS","text":""},{"location":"reference/esta/phononBag/atom_projected_phDOS/#esta.phononBag.atom_projected_phDOS","title":"<code>esta.phononBag.atom_projected_phDOS</code>","text":"<p>calculate the phonon density of states using the following expression: </p> <p>\begin{align} I_g(\\omega,     extbf{q}) = \\sum_{j} \\sum_{k \\in g}  \big |      extbf{U}^{j}{k} (\\omega_j) e^{ i       extbf{qR}\u0007lpha } \big |^{2} \\delta(\\omega -\\omega_j) \\label{phdos} \\end{align}</p> <p>where, $        extbf{U}^{j}_{k}$ is the phonon eigenvector for atom k in eigen state \\(j\\) having frequency \\(\\omega_j\\).  For zone centre phonons, the exponetial term is unity. This expression can be viewed as a kind of spectral function,  which shows how different atoms contribute to the vibrational patterns of a Raman active modes. </p> <p>Given the freq and eigenvectors, find the phonon density of states for specific group of atoms</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS/#esta.phononBag.atom_projected_phDOS.read_freq_eigenvector_dat","title":"<code>read_freq_eigenvector_dat(filename, natoms)</code>","text":"<p>read freq_eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS/#esta.phononBag.atom_projected_phDOS.get_phdos","title":"<code>get_phdos(freq, evect, sigma=None, atoms_list=None, prefix_ofile=None)</code>","text":"<p>parameters:  freq: array evect: array      array of rank3 - (n,nat,3) n is eigen state index, nat is atom index sigma: scalar (optional)     broadening parameter for delta function atoms_list: list     a list of atoms indices for which phdos is to be calculated (optional).     numbering of atoms starts from 1 prefix_ofile: str (optional)     name of the output file containg freq and integrated phdos</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS/#esta.phononBag.atom_projected_phDOS.plot_data_using_plotly","title":"<code>plot_data_using_plotly()</code>","text":"<p>plot data in *.dat files using plotly</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/","title":"esta.phononBag.atom_projected_phDOS_over_mesh_adv","text":""},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/#esta.phononBag.atom_projected_phDOS_over_mesh_adv","title":"<code>esta.phononBag.atom_projected_phDOS_over_mesh_adv</code>","text":"<p>Given the freq and eigenvectors, find the phonon density of states for specific group of atoms</p> <p>calculate the phonon density of states using the following expression: </p> <p>The Initial formula as suggested Andrey postnikov Prb paper : PHYSICAL REVIEW B 71, 115206 2005; eq 4</p> <p>\begin{align} I_g(\\omega,     extbf{q}) = \\sum_{j} \\sum_{k \\in g}  \big |      extbf{U}^{j}{k} (\\omega_j) e^{ i       extbf{qR}\u0007lpha } \big |^{2} \\delta(\\omega -\\omega_j) \\label{phdos} \\end{align}</p> <p>where, $        extbf{U}^{j}_{k}$ is the phonon eigenvector for atom k in eigen state \\(j\\) having frequency \\(\\omega_j\\).  For zone centre phonons, the exponetial term is unity. This expression can be viewed as a kind of spectral function,  which shows how different atoms contribute to the vibrational patterns of a Raman active modes. </p> <p>The second formula as suggested in ALAMODE website .. remove the exponetial part and sum over qj (qpt and band index)</p> atom projected dos: <p>\\mathrm{PDOS}(\\kappa;\\omega) = \frac{1}{N_{q}}\\sum_{\boldsymbol{q},j}|\boldsymbol{e}(\\kappa;\boldsymbol{q}j)|^{2}\\delta(\\omega - \\omega_{\boldsymbol{q}j}).</p> dos: <p>\\mathrm{DOS}(\\omega) = \frac{1}{N_{q}}\\sum_{\boldsymbol{q},j}\\delta(\\omega - \\omega_{\boldsymbol{q}j}).</p> and 2phonon DOS: <p>\\mathrm{DOS2}(\\omega;\boldsymbol{q};\\pm) = \frac{1}{N_{q}}\\sum_{\boldsymbol{q}{1},\boldsymbol{q} \\delta(\\omega\\pm\\omega_{\boldsymbol{q}}, j_{1}, j_{2}{1}j}}-\\omega_{\boldsymbol{q{2}j}})\\delta_{\boldsymbol{q}\\pm\boldsymbol{q{1},\boldsymbol{q},}+\boldsymbol{G}</p> Atomic participation ratio: <p>APR_{\boldsymbol{q}j,\\kappa} = \frac{|\boldsymbol{e}(\\kappa;\boldsymbol{q}j)|^{2}}{M_{\\kappa}} \\Bigg/ \\left(  N_{\\kappa} \\sum_{\\kappa}^{N_{\\kappa}} \frac{|\boldsymbol{e}(\\kappa;\boldsymbol{q}j)|<sup>{4}}{M_{\\kappa}</sup>  ight)^{\u00bd} Participation ratio (PR) and atomic participation ratio (APR) defined in the following may be useful to analyze the localized nature of the phonon mode qj. see: }https://alamode.readthedocs.io/en/latest/anphondir/formalism_anphon.html#phonon-dos</p> <p>Note use the tetrahedron methodo for BZ integration:  see http://home.ustc.edu.cn/~zqj/posts/LinearTetrahedronMethod/</p> <p>or use libTetraBZ ; install the library in python ... available.. https://pypi.org/project/libtetrabz/ see https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.094515 https://libtetrabz.osdn.jp/python/api.html#partial-density-of-states also see /home/sonu/Downloads/libtetrabz_tutorial.ipynb</p> <p>or : https://github.com/tflovorn/tetra/tree/master/tetra</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/#esta.phononBag.atom_projected_phDOS_over_mesh_adv.get_phdos","title":"<code>get_phdos(freq, evect, sigma=None, atoms_list=None, prefix_ofile=None)</code>","text":"<p>phdos over a single qpt gamma point</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/#esta.phononBag.atom_projected_phDOS_over_mesh_adv.get_phdos_gamma","title":"<code>get_phdos_gamma(freq, evect, sigma=None, atoms_list=None, prefix_ofile=None)</code>","text":"<p>phdos over a single qpt (gamma point)</p> <p>Parameters:</p> <ul> <li> <code>freq</code>           \u2013            </li> <li> <code>evect</code>           \u2013            <p>array of rank3 - (n,nat,3) n is eigen state index, nat is atom index</p> </li> <li> <code>sigma</code>           \u2013            <p>broadening parameter for delta function</p> </li> <li> <code>atoms_list</code>           \u2013            <p>a list of atoms indices for which phdos is to be calculated (optional). numbering of atoms starts from 1</p> </li> <li> <code>prefix_ofile</code>           \u2013            <p>name of the output file containg freq and integrated phdos</p> </li> </ul>"},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/#esta.phononBag.atom_projected_phDOS_over_mesh_adv.get_phdos_mesh","title":"<code>get_phdos_mesh(freq, evect, sigma=None, atoms_list=None, prefix_ofile=None, freq_cutoff=None, lgauss_smear=False)</code>","text":"<p>phdos over a mesh of  qpts</p> <p>Parameters:</p> <ul> <li> <code>freq</code>           \u2013            <p>freq array of shape (nqpts, natoms*3)</p> </li> <li> <code>evect</code>           \u2013            <p>array of rank5 - (qindex, bandindex,nat,3,2) qindex and bandindex form the eigen state index, nat is atom index</p> </li> <li> <code>sigma</code>           \u2013            <p>broadening parameter for delta function</p> </li> <li> <code>atoms_list</code>           \u2013            <p>a list of atoms indices for which phdos is to be calculated (optional). numbering of atoms starts from 1</p> </li> <li> <code>prefix_ofile</code>           \u2013            <p>name of the output file containg freq and integrated phdos</p> </li> <li> <code>freq_cutoff</code>           \u2013            <p>ignore phodos below the freq_cutoff</p> </li> </ul> return <p>data file with name prefix_ofile with .dat containing the phdos</p>"},{"location":"reference/esta/phononBag/atom_projected_phDOS_over_mesh_adv/#esta.phononBag.atom_projected_phDOS_over_mesh_adv.plot_data_using_plotly","title":"<code>plot_data_using_plotly()</code>","text":"<p>plot data in *.dat files using plotly</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/","title":"esta.phononBag.eigen_vector_adv","text":""},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv","title":"<code>esta.phononBag.eigen_vector_adv</code>","text":""},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.read_eigenvector","title":"<code>read_eigenvector(filename, lgamma=None)</code>","text":"<p>read eigen vectors along with freq and natoms for processing from the  band.yaml or mesh.yaml file. </p> <p>To get eigen vectors in the band.yaml file, use option: EIGENVECTORS = .TRUE. in band.conf file or in the command line (see script_thermo for details etc..)</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, band.yaml</p> </li> <li> <code>lgamma</code>           \u2013            <p>only gamma pt or whole BZ q-points</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance --change it</p> </li> <li> <code>eigenvectors</code> (              <code>array of rank 4</code> )          \u2013            <p>phonon eigen states at a given q point with shape (nqpt, nband, natom, 3); nband  = natom*3</p> </li> </ul>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.save_ev","title":"<code>save_ev(filename, natoms=None, units=None)</code>","text":"<p>save freq and eigen vectors in *dat file with real part only; works for gamma point for the  time being.</p> <p>warning: assuming that input freq is in THz units, therefore don't use conversion factor in phonopy processing!!</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.save_ev_gamma","title":"<code>save_ev_gamma(filename, units=None)</code>","text":"<p>save freq and eigen vectors in *dat file with real part only; works for gamma point for the  time being.</p> <p>warning: assuming that input freq is in THz units, therefore don't use conversion factor in phonopy processing!!</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.save_ev_mesh","title":"<code>save_ev_mesh(filename, units=None)</code>","text":"<p>save freq and eigen vectors in *dat file with real and imaginary parts over the  whole Brioullin zone using mesh of NxNxN points (generally less qpts due to use of symmetry)</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.read_freq_eigenvector_dat","title":"<code>read_freq_eigenvector_dat(filename, natoms)</code>","text":"<p>gamma point freq and eigenvectors reading from freq_eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.get_freq_eigenvector_gamma","title":"<code>get_freq_eigenvector_gamma(filename, natoms)</code>","text":"<p>gamma point freq and eigenvectors reading from freq_eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/eigen_vector_adv/#esta.phononBag.eigen_vector_adv.get_freq_eigenvector_mesh","title":"<code>get_freq_eigenvector_mesh(filename, nqpts, natoms)</code>","text":"<p>read freq and eigenvectors from whole Brillouin zone (irreducible Brillouin Zone)  from freq_eign_vector_mesh.dat file in a speedy manner</p> <p>BZ is divided using mesh of qpts</p> <p>Parameters:</p> <ul> <li> <code>filename</code>           \u2013            <p>name of the file containging freq and eigenvectors over a qpt mesh</p> </li> <li> <code>natoms</code>           \u2013            <p>no. of atoms</p> </li> <li> <code>nqpt</code>           \u2013            <p>no of qpts in q-point mesh (all qpts are used, but qpts in IBZ should be  for used for fast calculations)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>real array of rank 2</code> )          \u2013            <p>array of shape (nqpt, natoms*3)</p> </li> <li> <code>evect</code> (              <code>complex array of rank 5</code> )          \u2013            <p>array of shape (nqpt, natoms*3, natoms, 3, 2)</p> </li> </ul>"},{"location":"reference/esta/phononBag/get_dynG/","title":"esta.phononBag.get_dynG","text":""},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG","title":"<code>esta.phononBag.get_dynG</code>","text":""},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG.read_eigenvector","title":"<code>read_eigenvector(filename, lgamma=None)</code>","text":"<p>read eigen vectors along with freq and natoms for processing from the  band.yaml file. </p> <p>To get eigen vectors in the band.yaml file, use option: EIGENVECTORS = .TRUE. in band.conf file or in the command line </p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, band.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance </p> </li> <li> <code>eigenvectors</code> (              <code>array of rank 4</code> )          \u2013            <p>phonon eigen states at a given q point; here q point is the gamma point; in general  it can be any other qpt of the BZ</p> </li> </ul>"},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG.save_ev","title":"<code>save_ev(filename, natoms=None)</code>","text":"<p>save freq and eigen vectors in *dat file with real part only; works for gamma point for the  time being.</p>"},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG.read_eigenvector_dat","title":"<code>read_eigenvector_dat(filename, natoms)</code>","text":"<p>read eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG.read_freq_eigenvector_dat","title":"<code>read_freq_eigenvector_dat(filename, natoms)</code>","text":"<p>read freq_eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/get_dynG/#esta.phononBag.get_dynG.create_dynG","title":"<code>create_dynG(dynG_filename=None, poscar_file=None, epsilon_Born_file=None, freq_ev_file=None)</code>","text":"<p>create file in the with dynG extension ; similar to that of QE package  this file stores poscar data, Born effective charges, freq, and eigenvector </p> <p>once this file is created, it is used by the Fortran program dielconst to calculte the  mode oscilator strengths, static dielectric constant, and finally the infra-red intensity</p> <p>.. note::     poscar_file, epsilon_Born_file and freq_ev_file are MUST: if not present then following files MUST be there:     poscar_file = POSCAR.vasp     epsilon_Born_file = epsilon_e_and_Born.dat     freq_ev_file = freq_and_eign_vector_gamma.dat</p>"},{"location":"reference/esta/phononBag/intensity/","title":"esta.phononBag.intensity","text":""},{"location":"reference/esta/phononBag/intensity/#esta.phononBag.intensity","title":"<code>esta.phononBag.intensity</code>","text":""},{"location":"reference/esta/phononBag/intensity/#esta.phononBag.intensity.get_uniq_freq_n_intensity","title":"<code>get_uniq_freq_n_intensity(freq, intensity, data_save=None)</code>","text":"<p>output unique freqency and the corresponding intensity (intensity for degenerate freq's are summed up)</p> <p>Parameters:</p> <ul> <li> <code>freq</code>           \u2013            <p>frequencies (contain degeneracies)</p> </li> <li> <code>intensity</code>           \u2013            <p>intensities for correspoindign frequencies</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>u</code> (              <code>array</code> )          \u2013            <p>uniques frequencies</p> </li> <li> <code>ival</code> (              <code>array</code> )          \u2013            <p>corresponding intensities (ival for degenerate freqs are summed up)</p> </li> </ul>"},{"location":"reference/esta/phononBag/intensity/#esta.phononBag.intensity.get_freq_intensity_plot_data","title":"<code>get_freq_intensity_plot_data(filename, sigma=None, num_spread=None)</code>","text":"<p>create gaussians around the IR intensity for each value of IR mode and  save the data in separate file or xmgrace file</p>"},{"location":"reference/esta/phononBag/ir_intensity/","title":"esta.phononBag.ir_intensity","text":""},{"location":"reference/esta/phononBag/ir_intensity/#esta.phononBag.ir_intensity","title":"<code>esta.phononBag.ir_intensity</code>","text":""},{"location":"reference/esta/phononBag/ir_intensity/#esta.phononBag.ir_intensity.get_uniq_freq_n_intensity","title":"<code>get_uniq_freq_n_intensity(freq, intensity, data_save=None)</code>","text":"<p>output unique freqency and the corresponding intensity (intensity for degenerate freq's are summed up)</p> <p>Parameters:</p> <ul> <li> <code>freq</code>           \u2013            <p>frequencies (contain degeneracies)</p> </li> <li> <code>intensity</code>           \u2013            <p>intensities for correspoindign frequencies</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>u</code> (              <code>array</code> )          \u2013            <p>uniques frequencies</p> </li> <li> <code>ival</code> (              <code>array</code> )          \u2013            <p>corresponding intensities (ival for degenerate freqs are summed up)</p> </li> </ul>"},{"location":"reference/esta/phononBag/ir_intensity/#esta.phononBag.ir_intensity.get_freq_intensity_plot_data","title":"<code>get_freq_intensity_plot_data(filename, sigma=None, num_spread=None)</code>","text":"<p>create gaussians around the IR intensity for each value of IR mode and  save the data in separate file or xmgrace file</p>"},{"location":"reference/esta/phononBag/phono3py/","title":"esta.phononBag.phono3py","text":""},{"location":"reference/esta/phononBag/phono3py/#esta.phononBag.phono3py","title":"<code>esta.phononBag.phono3py</code>","text":""},{"location":"reference/esta/phononBag/phono3py/get_phono3py_data_n_plot/","title":"esta.phononBag.phono3py.get_phono3py_data_n_plot","text":""},{"location":"reference/esta/phononBag/phono3py/get_phono3py_data_n_plot/#esta.phononBag.phono3py.get_phono3py_data_n_plot","title":"<code>esta.phononBag.phono3py.get_phono3py_data_n_plot</code>","text":"<p>plot data stored in *.hdf5 file from phono3py program.</p> <p>The *hdf5 file is read by the Phono3pyPowerTools and then  related data is extracted and plotted.</p> <p>for details of the phonon related quantities: see below link https://phonopy.github.io/phono3py/hdf5_howto.html</p>"},{"location":"reference/esta/phononBag/phono3py/plot_kappa_multiple_systems/","title":"esta.phononBag.phono3py.plot_kappa_multiple_systems","text":""},{"location":"reference/esta/phononBag/phono3py/plot_kappa_multiple_systems/#esta.phononBag.phono3py.plot_kappa_multiple_systems","title":"<code>esta.phononBag.phono3py.plot_kappa_multiple_systems</code>","text":""},{"location":"reference/esta/phononBag/phono3py/read_kappa/","title":"esta.phononBag.phono3py.read_kappa","text":""},{"location":"reference/esta/phononBag/phono3py/read_kappa/#esta.phononBag.phono3py.read_kappa","title":"<code>esta.phononBag.phono3py.read_kappa</code>","text":""},{"location":"reference/esta/phononBag/phono3py/read_kappa/#esta.phononBag.phono3py.read_kappa.ReadKappaCSV","title":"<code>ReadKappaCSV(file_path)</code>","text":"<p>read kappa lattice from csv file into an array of rank 2</p> <p>the format of csv file is:     # 8 columns: T, k_xx, k_yy, k_zz, k_xz, k_yz, k_xy, k_ave.</p>"},{"location":"reference/esta/phononBag/phonopy/","title":"esta.phononBag.phonopy","text":""},{"location":"reference/esta/phononBag/phonopy/#esta.phononBag.phonopy","title":"<code>esta.phononBag.phonopy</code>","text":""},{"location":"reference/esta/phononBag/phonopy/eigen_vector/","title":"esta.phononBag.phonopy.eigen_vector","text":""},{"location":"reference/esta/phononBag/phonopy/eigen_vector/#esta.phononBag.phonopy.eigen_vector","title":"<code>esta.phononBag.phonopy.eigen_vector</code>","text":""},{"location":"reference/esta/phononBag/phonopy/eigen_vector/#esta.phononBag.phonopy.eigen_vector.read_eigenvector","title":"<code>read_eigenvector(filename, lgamma=None)</code>","text":"<p>read eigen vectors along with freq and natoms for processing from the  band.yaml file. </p> <p>To get eigen vectors in the band.yaml file, use option: EIGENVECTORS = .TRUE. in band.conf file or in the command line </p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, band.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance </p> </li> <li> <code>eigenvectors</code> (              <code>array of rank 4</code> )          \u2013            <p>phonon eigen states at a given q point; here q point is the gamma point; in general  it can be any other qpt of the BZ</p> </li> </ul>"},{"location":"reference/esta/phononBag/phonopy/eigen_vector/#esta.phononBag.phonopy.eigen_vector.save_ev","title":"<code>save_ev(filename, natoms=None)</code>","text":"<p>save freq and eigen vectors in *dat file with real part only; works for gamma point for the  time being.</p>"},{"location":"reference/esta/phononBag/phonopy/eigen_vector/#esta.phononBag.phonopy.eigen_vector.read_eigenvector_dat","title":"<code>read_eigenvector_dat(filename, natoms)</code>","text":"<p>read eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/phonopy/eigen_vector/#esta.phononBag.phonopy.eigen_vector.read_freq_eigenvector_dat","title":"<code>read_freq_eigenvector_dat(filename, natoms)</code>","text":"<p>read freq_eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/phonopy/eigenvector/","title":"esta.phononBag.phonopy.eigenvector","text":""},{"location":"reference/esta/phononBag/phonopy/eigenvector/#esta.phononBag.phonopy.eigenvector","title":"<code>esta.phononBag.phonopy.eigenvector</code>","text":""},{"location":"reference/esta/phononBag/phonopy/eigenvector/#esta.phononBag.phonopy.eigenvector.read_eigenvector","title":"<code>read_eigenvector(filename, lgamma=None)</code>","text":"<p>read eigen vectors along with freq and natoms for processing from the  band.yaml file. </p> <p>To get eigen vectors in the band.yaml file, use option: EIGENVECTORS = .TRUE. in band.conf file or in the command line </p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, band.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance </p> </li> <li> <code>eigenvectors</code> (              <code>array of rank ??</code> )          \u2013            <p>a ..</p> </li> </ul>"},{"location":"reference/esta/phononBag/phonopy/eigenvector/#esta.phononBag.phonopy.eigenvector.save_ev","title":"<code>save_ev(filename, natoms=None)</code>","text":"<p>save eigen vectors in *dat file with real part only; works for gamma point for the  time being</p>"},{"location":"reference/esta/phononBag/phonopy/eigenvector/#esta.phononBag.phonopy.eigenvector.read_eigenvector_dat","title":"<code>read_eigenvector_dat(filename, natoms)</code>","text":"<p>read eign_vector_gamma.dat file in a speedy manner</p>"},{"location":"reference/esta/phononBag/phonopy/get_phonon_disp_with_phdos/","title":"esta.phononBag.phonopy.get_phonon_disp_with_phdos","text":""},{"location":"reference/esta/phononBag/phonopy/get_phonon_disp_with_phdos/#esta.phononBag.phonopy.get_phonon_disp_with_phdos","title":"<code>esta.phononBag.phonopy.get_phonon_disp_with_phdos</code>","text":"<p>phonon dispersion and phonon density of state plot by reading  band.yaml and phonon_dos.dat files for different systems</p>"},{"location":"reference/esta/phononBag/phonopy/gruneisen/","title":"esta.phononBag.phonopy.gruneisen","text":""},{"location":"reference/esta/phononBag/phonopy/gruneisen/#esta.phononBag.phonopy.gruneisen","title":"<code>esta.phononBag.phonopy.gruneisen</code>","text":""},{"location":"reference/esta/phononBag/phonopy/gruneisen/#esta.phononBag.phonopy.gruneisen.read_gruneisen","title":"<code>read_gruneisen(filename)</code>","text":"<p>read gruneisen parameters and corresponding freqs from the  grueneisen.yaml file </p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, gruneisen.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance </p> </li> <li> <code>gruneisen</code> (              <code>scalar</code> )          \u2013            <p>a scalar \u00b1 for vibrational mode/freq of shape (nqpt, nband)</p> </li> </ul>"},{"location":"reference/esta/phononBag/phonopy/phonon_dispersion/","title":"esta.phononBag.phonopy.phonon_dispersion","text":""},{"location":"reference/esta/phononBag/phonopy/phonon_dispersion/#esta.phononBag.phonopy.phonon_dispersion","title":"<code>esta.phononBag.phonopy.phonon_dispersion</code>","text":""},{"location":"reference/esta/phononBag/phonopy/phonon_dispersion/#esta.phononBag.phonopy.phonon_dispersion.read_phonon_disp","title":"<code>read_phonon_disp(filename)</code>","text":"<p>read phonon dispersion data from band.yaml file </p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, band.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>distance</code> (              <code>array</code> )          \u2013            <p>array of qpt distances along high symmetry directions mentioned  in the band.yaml file</p> </li> <li> <code>freq</code> (              <code>array of rank 2</code> )          \u2013            <p>array of freqs of vibration modes of shape (nqpt,nband); nqpt is basically  the qpt distance</p> </li> </ul>"},{"location":"reference/esta/phononBag/phonopy/projected_phonon_dos/","title":"esta.phononBag.phonopy.projected_phonon_dos","text":""},{"location":"reference/esta/phononBag/phonopy/projected_phonon_dos/#esta.phononBag.phonopy.projected_phonon_dos","title":"<code>esta.phononBag.phonopy.projected_phonon_dos</code>","text":""},{"location":"reference/esta/phononBag/phonopy/projected_phonon_dos/#esta.phononBag.phonopy.projected_phonon_dos.read_projected_phonon_dos","title":"<code>read_projected_phonon_dos(filename, atomBlocks=None)</code>","text":"<p>read the projected phonon dos into columns depending on the  atomBlocks</p> <ul> <li>format of the data in projected_dos.dat file:     first column is freq in cm-1 or Thz, remaining colums are the pddos      for individual atoms present in the unit cell</li> </ul>"},{"location":"reference/esta/phononBag/phonopy/read_force_constant/","title":"esta.phononBag.phonopy.read_force_constant","text":""},{"location":"reference/esta/phononBag/phonopy/read_force_constant/#esta.phononBag.phonopy.read_force_constant","title":"<code>esta.phononBag.phonopy.read_force_constant</code>","text":""},{"location":"reference/esta/phononBag/phonopy/read_force_constant/#esta.phononBag.phonopy.read_force_constant.read_force_constant_phonopy","title":"<code>read_force_constant_phonopy(filename)</code>","text":"<p>read force constant from the phonopy.yaml file created using the following command; phonopy --qe --cell ScPtO.scf2phon.in --include-fc  -p band.conf | tee fc_pair_of_atoms.out</p> <p>the band.conf contains the following lines: DIM = 1 1 1 PRIMITIVE_AXIS = AUTO BAND = 0. 0. 0. 0 0 0.1 BAND_POINTS=1 WRITEDM = .TRUE.</p> <p>..note::     the force constant are extraced from the q=0 calculation done using phonopy with      qe as the backend. Should work for all the non-zero qpts as well..not test yet!!</p> <pre><code>the units of the force-constants are ry/au^2, see the phonopy.yaml file for more \ndetails.\n</code></pre> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, phonopy.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>lattice</code> (              <code>array</code> )          \u2013            <p>cell vectors</p> </li> <li> <code>symbol</code> (              <code>list</code> )          \u2013            <p>list of symbols</p> </li> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>masses</code> (              <code>array of scalars</code> )          \u2013            <p>mass of atoms</p> </li> <li> <code>force_constant</code> (              <code>array</code> )          \u2013            <p>force constant between pair of atoms</p> </li> <li> <code>return lattice, symbol, pos, mass_atom, force_constant_tensor_reshape, force_constant_norm</code>           \u2013            </li> </ul>"},{"location":"reference/esta/phononBag/read_force_constant/","title":"esta.phononBag.read_force_constant","text":""},{"location":"reference/esta/phononBag/read_force_constant/#esta.phononBag.read_force_constant","title":"<code>esta.phononBag.read_force_constant</code>","text":""},{"location":"reference/esta/phononBag/read_force_constant/#esta.phononBag.read_force_constant.read_force_constant_phonopy","title":"<code>read_force_constant_phonopy(filename)</code>","text":"<p>read force constant from the phonopy.yaml file created using the following command; phonopy --qe --cell ScPtO.scf2phon.in --include-fc  -p band.conf | tee fc_pair_of_atoms.out</p> <p>the band.conf contains the following lines: DIM = 1 1 1 PRIMITIVE_AXIS = AUTO BAND = 0. 0. 0. 0 0 0.1 BAND_POINTS=1 WRITEDM = .TRUE.</p> <p>.. note::     the force constant are extraced from the q=0 calculation done using phonopy with      qe as the backend. Should work for all the non-zero qpts as well..not test yet!!</p> <pre><code>the units of the force-constants are ry/au^2, see the phonopy.yaml file for more \ndetails.\n</code></pre> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, phonopy.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>lattice</code> (              <code>array</code> )          \u2013            <p>cell vectors</p> </li> <li> <code>symbol</code> (              <code>list</code> )          \u2013            <p>list of symbols</p> </li> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>masses</code> (              <code>array of scalars</code> )          \u2013            <p>mass of atoms</p> </li> <li> <code>force_constant</code> (              <code>array</code> )          \u2013            <p>force constant between pair of atoms</p> </li> <li> <code>return lattice, symbol, pos, mass_atom, force_constant_tensor_reshape, force_constant_norm</code>           \u2013            </li> </ul>"},{"location":"reference/esta/phononBag/read_force_constant_stable/","title":"esta.phononBag.read_force_constant_stable","text":""},{"location":"reference/esta/phononBag/read_force_constant_stable/#esta.phononBag.read_force_constant_stable","title":"<code>esta.phononBag.read_force_constant_stable</code>","text":""},{"location":"reference/esta/phononBag/read_force_constant_stable/#esta.phononBag.read_force_constant_stable.read_force_constant_phonopy","title":"<code>read_force_constant_phonopy(filename, poscar_file=None)</code>","text":"<p>read force constant from the phonopy.yaml file created using the following command; phonopy --qe --cell ScPtO.scf2phon.in --include-fc  -p band.conf | tee fc_pair_of_atoms.out</p> <p>the band.conf contains the following lines: DIM = 1 1 1 PRIMITIVE_AXIS = AUTO BAND = 0. 0. 0. 0 0 0.1 BAND_POINTS=1 WRITEDM = .TRUE.</p> <p>.. note::     the force constant are extraced from the q=0 calculation done using phonopy with      qe as the backend. Should work for all the non-zero qpts as well..not test yet!!</p> <pre><code>the units of the force-constants are ry/au^2, see the phonopy.yaml file for more \ndetails. In output the units are converted to eV/Ang^2.\n</code></pre> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of the filename, phonopy.yaml</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>lattice</code> (              <code>array</code> )          \u2013            <p>cell vectors</p> </li> <li> <code>symbol</code> (              <code>list</code> )          \u2013            <p>list of symbols</p> </li> <li> <code>pos</code> (              <code>array</code> )          \u2013            <p>atomic positions</p> </li> <li> <code>masses</code> (              <code>array of scalars</code> )          \u2013            <p>mass of atoms</p> </li> <li> <code>force_constant (force_constant_tensor_reshape) : array of rank 4</code>           \u2013            <p>force constant all pair of atoms; (atmindx, atmindx, 3,3) note: from this eigen value of fc matrix after digonalisation is obtained for each atom  pair</p> </li> <li> <code>fc_list</code> (              <code>list of dictionaries</code> )          \u2013            <p>list of atomic pair dictionaries </p> </li> <li> <code>return lattice, symbol, pos, mass_atom, force_constant_tensor_reshape, fc_list</code>           \u2013            </li> <li> <code>.. important::</code>           \u2013            <p>to find force constant (scalar) for each atom pair with NN, 2NN, 3NN interactions ; units are eV/Ang^2. to do  this just see the same atomic pair with different atomic distance as present in the  list of fc dictionary or output.csv or output.xlsx file and plot the data.</p> </li> </ul>"},{"location":"reference/esta/phononBag/read_force_constant_stable/#esta.phononBag.read_force_constant_stable.filter_force_constant_atomic_pairs","title":"<code>filter_force_constant_atomic_pairs(fc_list)</code>","text":"<p>given the list of dictionary containing atomic pair force constants along with corresponding  distances, and atomic symbols, extract the unqiue force-constant atomic pairs ...</p>"},{"location":"reference/esta/plot/","title":"esta.plot","text":""},{"location":"reference/esta/plot/#esta.plot","title":"<code>esta.plot</code>","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/","title":"esta.plot.atomic_Distance_Density","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density","title":"<code>esta.plot.atomic_Distance_Density</code>","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density","title":"<code>atom_distance_density</code>","text":"<pre><code>script to calculate the atomic distance density \nfor a specific bond of atoms in the POSCAR file\n\n\nNote:\n</code></pre> <pre><code>A Gaussian distribution function is used for the delta function:\n</code></pre> <pre><code>The probability density for the Gaussian distribution is\n\np(x) = \frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }} e^{ - \frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\nwhere \\mu is the mean and \\sigma the standard deviation. \nThe square of the standard deviation, \\sigma^2, is called the variance.\n\nThe function has its peak at the mean, and its \u201cspread\u201d increases with \nthe standard deviation (the function reaches 0.607 times its maximum \nat x + \\sigma and x - \\sigma [2]). This implies that numpy.random.normal \nis more likely to return samples lying close to the mean, rather than \nthose far away.\n</code></pre> <pre><code>Parameters/Inputs\n</code></pre> <pre><code>x : ?\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>`atomic distance density` array  and distance\narray are returned.\n</code></pre>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density--see-also","title":"See Also","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density---","title":"--------","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density--add-other-related-things-here","title":"add other related things here.","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density--notes","title":"Notes","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density---_1","title":"-----","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density--examples","title":"Examples","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density---_2","title":"--------","text":""},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density.distance_array","title":"<code>distance_array(natom_type, tau_cartesian)</code>","text":"<p>calculate the distance array among different atoms</p>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density.distance_array1","title":"<code>distance_array1(natom_type, atm_type, tau_cartesian)</code>","text":"<p>calculate the distance array among different atoms</p>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density.remove_duplicate","title":"<code>remove_duplicate(list_entries)</code>","text":"<p>remove duplicates ??</p>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density.gaussian_distribution","title":"<code>gaussian_distribution(x0, x, sigma)</code>","text":"<p>generate a gaussian dist for data along 1D axis</p>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.atom_distance_density.dos","title":"<code>dos(array_distribution, sigma, dgrid_min=None, dgrid_max=None, normalise=False)</code>","text":"<p>Now calculation of atomic distance density for given sigma of  gauss distribution</p>"},{"location":"reference/esta/plot/atomic_Distance_Density/#esta.plot.atomic_Distance_Density.get_neighbors","title":"<code>get_neighbors(label, tau_cartesian, n_pts, n_neighbors)</code>","text":"<p>get all neighbors of N points (n_pts= atomic positions) along with distance </p> input: <pre><code>list: label: label of pts/atoms \narray: tau_cartesian, atomic-positions/pts in cartesian coordinates\ninteger: n_pts, no. of pts/atomic-coordinate whose neighbors are \n    to be found\ninteger: n_neighbors, integer for how many eneighbours\n</code></pre> output: <pre><code>arrray: ind, array of indices of neighbors including self \narray: dist, array of distances from neighbors incuding self distance (self \n    distance is zero, as we know)\n</code></pre>"},{"location":"reference/esta/plot/atomic_distance_density_class2/","title":"esta.plot.atomic_distance_density_class2","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2","title":"<code>esta.plot.atomic_distance_density_class2</code>","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density","title":"<code>atom_distance_density</code>","text":"<pre><code>script to calculate the atomic distance density \nfor a specific bond of atoms in the POSCAR file\n</code></pre> <pre><code>A Gaussian distribution function is used for the delta function:\n</code></pre> <pre><code>The probability density for the Gaussian distribution is\n\np(x) = \frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }} e^{ - \frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\nwhere \\mu is the mean and \\sigma the standard deviation. \nThe square of the standard deviation, \\sigma^2, is called the variance.\n\nThe function has its peak at the mean, and its \u201cspread\u201d increases with \nthe standard deviation (the function reaches 0.607 times its maximum \nat x + \\sigma and x - \\sigma [2]). This implies that numpy.random.normal \nis more likely to return samples lying close to the mean, rather than \nthose far away.\n</code></pre> <pre><code>Parameters/Inputs\n</code></pre> <pre><code>x : ?\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>`atomic distance density` array  and distance\narray are returned.\n</code></pre>"},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density--see-also","title":"See Also","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density---","title":"--------","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density--add-other-related-things-here","title":"add other related things here.","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density--notes","title":"Notes","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density---_1","title":"-----","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density--examples","title":"Examples","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density---_2","title":"--------","text":""},{"location":"reference/esta/plot/atomic_distance_density_class2/#esta.plot.atomic_distance_density_class2.atom_distance_density.dos","title":"<code>dos(array_distribution, sigma)</code>","text":"<p>Now calculation of atomic distance density</p>"},{"location":"reference/esta/plot/broken_axis_plot__most_done_only_axis_allignmnet_left/","title":"esta.plot.broken_axis_plot__most_done_only_axis_allignmnet_left","text":""},{"location":"reference/esta/plot/broken_axis_plot__most_done_only_axis_allignmnet_left/#esta.plot.broken_axis_plot__most_done_only_axis_allignmnet_left","title":"<code>esta.plot.broken_axis_plot__most_done_only_axis_allignmnet_left</code>","text":""},{"location":"reference/esta/plot/broken_axis_plot__most_done_only_axis_allignmnet_left/#esta.plot.broken_axis_plot__most_done_only_axis_allignmnet_left.get_broken_axis_plot","title":"<code>get_broken_axis_plot(x, y, y_lim1, y_lim2, y_lim3, y_lim4)</code>","text":"<p>Broken axis example, where the y-axis will have a portion cut out.</p> input: <pre><code>x : x data\ny : y data\ny_lim1 = [0.78,   1] --&gt; range of y aixs for outlier data\ny_lim2 = [0   ,0.22] --&gt; range of y aixs for main part of the data\n\n# for -ve y axis data ...\ny_lim3 = [0.78,   1] --&gt; range of y aixs for outlier data\ny_lim4 = [0   ,0.22] --&gt; range of y aixs for main part of the data\n</code></pre> output: <pre><code>plot : broken axis plot\n</code></pre>"},{"location":"reference/esta/plot/charge_bader/","title":"esta.plot.charge_bader","text":""},{"location":"reference/esta/plot/charge_bader/#esta.plot.charge_bader","title":"<code>esta.plot.charge_bader</code>","text":""},{"location":"reference/esta/plot/charge_bader/#esta.plot.charge_bader.get_ACF_file","title":"<code>get_ACF_file()</code>","text":"<p>method to read ACF.dat file</p>"},{"location":"reference/esta/plot/free_energy_2/","title":"esta.plot.free_energy_2","text":""},{"location":"reference/esta/plot/free_energy_2/#esta.plot.free_energy_2","title":"<code>esta.plot.free_energy_2</code>","text":""},{"location":"reference/esta/plot/free_energy_2/#esta.plot.free_energy_2.GibbsFreeEnergy","title":"<code>GibbsFreeEnergy</code>","text":"<p>               Bases: <code>object</code></p> <p>A class to calculate the Gibbs free enegy  G = E -TS + E_ZPE</p> <p>TODO: </p> <ul> <li>Temp and pressure dependence free energy formula and   its implementation.</li> <li>ZPE calculations</li> </ul>"},{"location":"reference/esta/plot/free_energy_2/#esta.plot.free_energy_2.GibbsFreeEnergy.get_free_energy","title":"<code>get_free_energy()</code>","text":"<p>Units::  Edft : eV             S : eV/K          temp : K</p>"},{"location":"reference/esta/plot/get_plot_potential_energy/","title":"esta.plot.get_plot_potential_energy","text":""},{"location":"reference/esta/plot/get_plot_potential_energy/#esta.plot.get_plot_potential_energy","title":"<code>esta.plot.get_plot_potential_energy</code>","text":""},{"location":"reference/esta/plot/multiplot/","title":"esta.plot.multiplot","text":""},{"location":"reference/esta/plot/multiplot/#esta.plot.multiplot","title":"<code>esta.plot.multiplot</code>","text":"<p>create a class to store the data from all the files  containing the dos/pdos information .. along with the information  of Fermi energy</p>"},{"location":"reference/esta/plot/multiplot/#esta.plot.multiplot.DataStore","title":"<code>DataStore</code>","text":"<p>store data from the dos/pdos *dat files having rows and columns</p>"},{"location":"reference/esta/plot/multiplot/#esta.plot.multiplot.plot_multiplot_in_1column","title":"<code>plot_multiplot_in_1column(data, hspace=None, outfile=None)</code>","text":"<p>multiplot in one column with nrows of data from many files &lt; = 4files .. more  possible</p> <p>Parameters:</p> <ul> <li> <code>data</code>           \u2013            <p>array of rank 4 i.e. data(nsystem, nfiles, rnows, ncols) e.g. (5, 3, 5438, 2)</p> </li> <li> <code>hspace</code>           \u2013            <p>horizontal space between plots</p> </li> </ul> return <p>plot the multiplot data in along multiple rows</p>"},{"location":"reference/esta/plot/plot1d/","title":"esta.plot.plot1d","text":""},{"location":"reference/esta/plot/plot1d/#esta.plot.plot1d","title":"<code>esta.plot.plot1d</code>","text":""},{"location":"reference/esta/plot/plot2D/","title":"esta.plot.plot2D","text":""},{"location":"reference/esta/plot/plot2D/#esta.plot.plot2D","title":"<code>esta.plot.plot2D</code>","text":""},{"location":"reference/esta/plot/plot2D/#esta.plot.plot2D.rosenbrock_2D","title":"<code>rosenbrock_2D(xpos, ypos)</code>","text":"<p>Rosenbrock function in 2D</p>"},{"location":"reference/esta/plot/plot2D/#esta.plot.plot2D.surface_plot","title":"<code>surface_plot(x, y, fxy)</code>","text":"<p>surface plot of a function in 2D</p> <p>input:     x: 1D array     y: 1D array     fxy: 2D array over a 2D grid defined by x and y output:     surface plot      save jpg file</p>"},{"location":"reference/esta/plot/plot2D/#esta.plot.plot2D.contour_plot","title":"<code>contour_plot(x, y, fxy)</code>","text":"<p>input:     x: 1D array     y: 1D array     fxy: 2D array over a 2D grid defined by x and y output:     surface plot      save jpg file</p>"},{"location":"reference/esta/plot/plot_2Ddata_NEB/","title":"esta.plot.plot_2Ddata_NEB","text":""},{"location":"reference/esta/plot/plot_2Ddata_NEB/#esta.plot.plot_2Ddata_NEB","title":"<code>esta.plot.plot_2Ddata_NEB</code>","text":"<p>method to plot the neb energy plots</p>"},{"location":"reference/esta/plot/plot_2Ddata_NEB/#esta.plot.plot_2Ddata_NEB.get_neb_plot","title":"<code>get_neb_plot(energy_list, index)</code>","text":"<p>method to plot the neb energy plots</p> <p>input:      list of energy for images     index for those energy points</p> <p>output:      plot the barrier/energy plots</p>"},{"location":"reference/esta/plot/plot_2Ddata_NEB_adv/","title":"esta.plot.plot_2Ddata_NEB_adv","text":""},{"location":"reference/esta/plot/plot_2Ddata_NEB_adv/#esta.plot.plot_2Ddata_NEB_adv","title":"<code>esta.plot.plot_2Ddata_NEB_adv</code>","text":""},{"location":"reference/esta/plot/plot_2Ddata_NEB_adv/#esta.plot.plot_2Ddata_NEB_adv.get_neb_plot","title":"<code>get_neb_plot(energy_list, index)</code>","text":"<p>method to plot the neb energy plots using spline interpolate or simple  fitting ...</p> <p>input:      list of energy for images     index for those energy points</p> <p>output:      plot the barrier/energy plots</p>"},{"location":"reference/esta/plot/plot_bar_chart_bader/","title":"esta.plot.plot_bar_chart_bader","text":""},{"location":"reference/esta/plot/plot_bar_chart_bader/#esta.plot.plot_bar_chart_bader","title":"<code>esta.plot.plot_bar_chart_bader</code>","text":""},{"location":"reference/esta/plot/plot_free_energy_vs_reaction_coordinate_adv/","title":"esta.plot.plot_free_energy_vs_reaction_coordinate_adv","text":""},{"location":"reference/esta/plot/plot_free_energy_vs_reaction_coordinate_adv/#esta.plot.plot_free_energy_vs_reaction_coordinate_adv","title":"<code>esta.plot.plot_free_energy_vs_reaction_coordinate_adv</code>","text":""},{"location":"reference/esta/plot/plot_free_energy_vs_reaction_coordinate_adv/#esta.plot.plot_free_energy_vs_reaction_coordinate_adv.plot_free_energy","title":"<code>plot_free_energy(data)</code>","text":"<p>argument:         data: NxM array of free energies at different temperatures               N = no of temp values, M number of free energies for a               given temp value.</p> <p>return:         plot the array of free energies as horizontal lines over the y axis</p>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/","title":"esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible","text":""},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible","title":"<code>esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible</code>","text":""},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.get_pdos_files","title":"<code>get_pdos_files(atm_info)</code>","text":"<p>extract files based on the atomic number of atoms</p> input: <pre><code>atm_info: list of integers for atoms whose pdos is needed with all s,p,d...charaters\n</code></pre> output: <pre><code>fileslist: list of all files whose pdos is needed\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings)</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.checkEqual_list","title":"<code>checkEqual_list(lst)</code>","text":"<p>comparing all the elements of list and return logical variable whether they are same or different</p>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.process_colums","title":"<code>process_colums(filelist, lspin=None)</code>","text":"<ul> <li>summing the 2<sup>nd</sup>, and 3<sup>rd</sup> columns of the following multiple files and    create new file with 0<sup>th</sup> column (from one file), 1<sup>st</sup> summed and 2<sup>nd</sup> summed    columns from all files</li> </ul> input: <pre><code>filelist: list of all files whose columns hve to be processed\n</code></pre> output: <pre><code> sum_data_file: file with resultant columns,\n data_array: array[:,:,0:3] data with processed columns\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.get_plots1","title":"<code>get_plots1(filename, fileout, llabel, refenergy=None, lspin=False)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>NOTE:</p> <p>for multiple plots: try following</p> <pre><code>    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True)\n\n    ax1.fill_between(x, 0, y1, facecolor='yellow', alpha=0.5))\n    ax1.set_ylabel('between y1 and 0')\n\n    ax2.fill_between(x, y1, 1)\n    ax2.set_ylabel('between y1 and 1')\n\n    ax3.fill_between(x, y1, y2)\n    ax3.set_ylabel('between y1 and y2')\n    ax3.set_xlabel('x')\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_Natoms_contribution_adv_both_spin_possible/#esta.plot.plot_pdos_Natoms_contribution_adv_both_spin_possible.get_plots","title":"<code>get_plots(fileout, llabel, fil, refenergy=None, lspin=False)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>NOTE:</p> <p>for multiple plots: try following</p> <pre><code>    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True)\n\n    ax1.fill_between(x, 0, y1, facecolor='yellow', alpha=0.5))\n    ax1.set_ylabel('between y1 and 0')\n\n    ax2.fill_between(x, y1, 1)\n    ax2.set_ylabel('between y1 and 1')\n\n    ax3.fill_between(x, y1, y2)\n    ax3.set_ylabel('between y1 and y2')\n    ax3.set_xlabel('x')\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/","title":"esta.plot.plot_pdos_with_atoms_contribution_2plots_qe","text":""},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe","title":"<code>esta.plot.plot_pdos_with_atoms_contribution_2plots_qe</code>","text":""},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.get_pdos_files","title":"<code>get_pdos_files(atm_info)</code>","text":"<p>extract files based on the atomic number of atoms</p> input: <pre><code>atm_info: list of integers for atoms whose pdos is needed with all s,p,d...charaters\n</code></pre> output: <pre><code>fileslist: list of all files whose pdos is needed\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.get_range_int_from_intervals","title":"<code>get_range_int_from_intervals(list_of_intervals)</code>","text":"<p>get range of integers from intervals (in the form of strings)</p> input: <pre><code>list of intervals: e.g. ['1','2-4','6-10'] \nnote that elements of list are strings\n</code></pre> output: <pre><code>range of intervals: e.g. [1, 2, 3, 4, 6, 7, 8, 9, 10]\nnote that elements are integers\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.checkEqual_list","title":"<code>checkEqual_list(lst)</code>","text":"<p>comparing all the elements of list and return logical variable whether they are same or different</p>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.process_colums","title":"<code>process_colums(filelist)</code>","text":"<ul> <li>summing the 2<sup>nd</sup>, and 3<sup>rd</sup> columns of the following multiple files and    create new file with 0<sup>th</sup> column (from one file), 1<sup>st</sup> summed and 2<sup>nd</sup> summed    columns from all files</li> </ul> input: <pre><code>filelist: list of all files whose columns hve to be processed\n</code></pre> output: <pre><code> sum_data_file: file with resultant columns,\n data_array: array[:,:,0:3] data with processed columns\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.get_plots1","title":"<code>get_plots1(filename, fileout, llabel, refenergy=None, lspin=False)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>NOTE:</p> <p>for multiple plots: try following</p> <pre><code>    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True)\n\n    ax1.fill_between(x, 0, y1, facecolor='yellow', alpha=0.5))\n    ax1.set_ylabel('between y1 and 0')\n\n    ax2.fill_between(x, y1, 1)\n    ax2.set_ylabel('between y1 and 1')\n\n    ax3.fill_between(x, y1, y2)\n    ax3.set_ylabel('between y1 and y2')\n    ax3.set_xlabel('x')\n</code></pre>"},{"location":"reference/esta/plot/plot_pdos_with_atoms_contribution_2plots_qe/#esta.plot.plot_pdos_with_atoms_contribution_2plots_qe.get_plots","title":"<code>get_plots(fileout, llabel, fil, refenergy=None, lspin=False)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>NOTE:</p> <p>for multiple plots: try following</p> <pre><code>    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True)\n\n    ax1.fill_between(x, 0, y1, facecolor='yellow', alpha=0.5))\n    ax1.set_ylabel('between y1 and 0')\n\n    ax2.fill_between(x, y1, 1)\n    ax2.set_ylabel('between y1 and 1')\n\n    ax3.fill_between(x, y1, y2)\n    ax3.set_ylabel('between y1 and y2')\n    ax3.set_xlabel('x')\n</code></pre>"},{"location":"reference/esta/plot/plot_xanes_/","title":"esta.plot.plot_xanes_","text":""},{"location":"reference/esta/plot/plot_xanes_/#esta.plot.plot_xanes_","title":"<code>esta.plot.plot_xanes_</code>","text":""},{"location":"reference/esta/plot/plot_xanes_/#esta.plot.plot_xanes_.get_plots","title":"<code>get_plots(filename, fileout, refenergy=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/plotxy/","title":"esta.plot.plotxy","text":""},{"location":"reference/esta/plot/plotxy/#esta.plot.plotxy","title":"<code>esta.plot.plotxy</code>","text":""},{"location":"reference/esta/plot/plotxy/#esta.plot.plotxy.get_plot","title":"<code>get_plot(*args, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>keyword argumets</code>, default:                   <code>()</code> )           \u2013            <p>args contains x, y, marker, linestyle, and color;  marker, linestyle and color are optional</p> </li> <li> <code>markersize</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>size of marker, optional</p> </li> <li> <code>xLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>x label, optional</p> </li> <li> <code>yLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>y label, optional</p> </li> <li> <code>Title</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Title, optional</p> </li> <li> <code>fileout</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>fileout.png file as output</code>           \u2013            </li> </ul>"},{"location":"reference/esta/plot/plotxy/#esta.plot.plotxy.get_plot_multiple","title":"<code>get_plot_multiple(*args, ylimits=None, markersize=None, llegend=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot multiple data in a single plot by making multiple calls to this method</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>keyword argumets</code>, default:                   <code>()</code> )           \u2013            <p>args contains x, y, marker, linestyle, and color;  marker, linestyle, and color are optional and for  single plot only</p> </li> <li> <code>ylimits</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>scalars for min and max y limits, optional, but  better input the limits</p> </li> <li> <code>markersize</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>size of marker, optional</p> </li> <li> <code>llegend</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>a list of labels for the legends, optional</p> </li> <li> <code>xLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>x label, optional</p> </li> <li> <code>yLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>y label, optional</p> </li> <li> <code>Title</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Title, optional</p> </li> <li> <code>fileout</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>fileout.png file as output</code>           \u2013            </li> </ul>"},{"location":"reference/esta/plot/plotxy/#esta.plot.plotxy.get_plot1","title":"<code>get_plot1(*args, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/plotxy0/","title":"esta.plot.plotxy0","text":""},{"location":"reference/esta/plot/plotxy0/#esta.plot.plotxy0","title":"<code>esta.plot.plotxy0</code>","text":""},{"location":"reference/esta/plot/plotxy0/#esta.plot.plotxy0.get_plot","title":"<code>get_plot(x, y, xLabel, yLabel, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/plotxy1/","title":"esta.plot.plotxy1","text":""},{"location":"reference/esta/plot/plotxy1/#esta.plot.plotxy1","title":"<code>esta.plot.plotxy1</code>","text":""},{"location":"reference/esta/plot/plotxy1/#esta.plot.plotxy1.get_plot","title":"<code>get_plot(x, y, marker=None, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/plotxy_adv/","title":"esta.plot.plotxy_adv","text":""},{"location":"reference/esta/plot/plotxy_adv/#esta.plot.plotxy_adv","title":"<code>esta.plot.plotxy_adv</code>","text":""},{"location":"reference/esta/plot/plotxy_adv/#esta.plot.plotxy_adv.get_plot","title":"<code>get_plot(x, y, marker=None, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/plotxy_advv/","title":"esta.plot.plotxy_advv","text":""},{"location":"reference/esta/plot/plotxy_advv/#esta.plot.plotxy_advv","title":"<code>esta.plot.plotxy_advv</code>","text":""},{"location":"reference/esta/plot/plotxy_advv/#esta.plot.plotxy_advv.get_plot","title":"<code>get_plot(*args, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>keyword argumets</code>, default:                   <code>()</code> )           \u2013            <p>args contains x, y, marker, linestyle, and color;  marker, linestyle and color are optional</p> </li> <li> <code>markersize</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>size of marker, optional</p> </li> <li> <code>xLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>x label, optional</p> </li> <li> <code>yLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>y label, optional</p> </li> <li> <code>Title</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Title, optional</p> </li> <li> <code>fileout</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>fileout.png file as output</code>           \u2013            </li> </ul>"},{"location":"reference/esta/plot/plotxy_advv/#esta.plot.plotxy_advv.get_plot_multiple","title":"<code>get_plot_multiple(*args, ylimits=None, markersize=None, llegend=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot multiple data in a single plot by making multiple calls to this method</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>keyword argumets</code>, default:                   <code>()</code> )           \u2013            <p>args contains x, y, marker, linestyle, and color;  marker, linestyle, and color are optional and for  single plot only</p> </li> <li> <code>ylimits</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>scalars for min and max y limits, optional, but  better input the limits</p> </li> <li> <code>markersize</code>               (<code>scalar</code>, default:                   <code>None</code> )           \u2013            <p>size of marker, optional</p> </li> <li> <code>llegend</code>               (<code>list</code>, default:                   <code>None</code> )           \u2013            <p>a list of labels for the legends, optional</p> </li> <li> <code>xLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>x label, optional</p> </li> <li> <code>yLabel</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>y label, optional</p> </li> <li> <code>Title</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Title, optional</p> </li> <li> <code>fileout</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>name of the output file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>fileout.png file as output</code>           \u2013            </li> </ul>"},{"location":"reference/esta/plot/plotxy_advv/#esta.plot.plotxy_advv.get_plot1","title":"<code>get_plot1(*args, markersize=None, xLabel=None, yLabel=None, Title=None, fileout=None)</code>","text":"<p>plot data in the form of single or multiple plots</p>"},{"location":"reference/esta/plot/polar_plot/","title":"esta.plot.polar_plot","text":""},{"location":"reference/esta/plot/polar_plot/#esta.plot.polar_plot","title":"<code>esta.plot.polar_plot</code>","text":""},{"location":"reference/esta/plot/py3dmol_view_smiles_and_xyz_TODO_close/","title":"esta.plot.py3dmol_view_smiles_and_xyz_TODO_close","text":""},{"location":"reference/esta/plot/py3dmol_view_smiles_and_xyz_TODO_close/#esta.plot.py3dmol_view_smiles_and_xyz_TODO_close","title":"<code>esta.plot.py3dmol_view_smiles_and_xyz_TODO_close</code>","text":"<p>see for more information: </p> <p>https://birdlet.github.io/2019/10/02/py3dmol_example/</p> <p>tried on py38; need py3Dmol and rdkit .. om computer!!</p>"},{"location":"reference/esta/plot/py3dmol_view_smiles_and_xyz_TODO_close/#esta.plot.py3dmol_view_smiles_and_xyz_TODO_close.MolTo3DView","title":"<code>MolTo3DView(mol, size=(300, 300), style='stick', surface=False, opacity=0.5)</code>","text":"<p>Draw molecule in 3D</p> Args: <pre><code>mol: rdMol, molecule to show\nsize: tuple(int, int), canvas size\nstyle: str, type of drawing molecule\n       style can be 'line', 'stick', 'sphere', 'carton'\nsurface, bool, display SAS\nopacity, float, opacity of surface, range 0.0-1.0\n</code></pre> Return: <pre><code>viewer: py3Dmol.view, a class for constructing embedded 3Dmol.js views in ipython notebooks.\n</code></pre>"},{"location":"reference/esta/plot/py3dmol_view_smiles_and_xyz_TODO_close/#esta.plot.py3dmol_view_smiles_and_xyz_TODO_close.smi2conf","title":"<code>smi2conf(smiles)</code>","text":"<p>Convert SMILES to rdkit.Mol with 3D coordinates</p>"},{"location":"reference/esta/plot/tex_demo/","title":"esta.plot.tex_demo","text":""},{"location":"reference/esta/plot/tex_demo/#esta.plot.tex_demo","title":"<code>esta.plot.tex_demo</code>","text":"<p>================================== Rendering math equations using TeX ==================================</p> <p>You can use TeX to render all of your Matplotlib text by setting :rc:<code>text.usetex</code> to True.  This requires that you have TeX and the other dependencies described in the :doc:<code>/tutorials/text/usetex</code> tutorial properly installed on your system.  Matplotlib caches processed TeX expressions, so that only the first occurrence of an expression triggers a TeX compilation. Later occurrences reuse the rendered image from the cache and are thus faster.</p> <p>Unicode input is supported, e.g. for the y-axis label in this example.</p>"},{"location":"reference/esta/pointGroup/","title":"esta.pointGroup","text":""},{"location":"reference/esta/pointGroup/#esta.pointGroup","title":"<code>esta.pointGroup</code>","text":""},{"location":"reference/esta/pretty_int/","title":"esta.pretty_int","text":""},{"location":"reference/esta/pretty_int/#esta.pretty_int","title":"<code>esta.pretty_int</code>","text":""},{"location":"reference/esta/pretty_int/#esta.pretty_int.get_pretty_int","title":"<code>get_pretty_int(integers)</code>","text":"<p>get list of range of intergers in pretty format e.g. print 1 to 9999 like 0001 0002 ....0011 ...0123 ..9999</p> <p>only upto 9999 intger is pretified</p>"},{"location":"reference/esta/pretty_int/#esta.pretty_int.get_pretty_int_2","title":"<code>get_pretty_int_2(integers)</code>","text":"<p>get list of range of intergers in pretty format e.g. print 1 to 99999 like 00001 00002 ....00011 ...00123 ..99999</p> <p>only upto 99999 intger is pretified</p>"},{"location":"reference/esta/printlog/","title":"esta.printlog","text":""},{"location":"reference/esta/printlog/#esta.printlog","title":"<code>esta.printlog</code>","text":""},{"location":"reference/esta/printlog/#esta.printlog.initialize_log","title":"<code>initialize_log(verbose=logging.INFO, log_file=None)</code>","text":"<p>Set up a logger for Arkane to use to print output to stdout. The <code>verbose</code> parameter is an integer specifying the amount of log text seen at the console; the levels correspond to those of the :data:<code>logging</code> module.</p>"},{"location":"reference/esta/pymatgenBag/","title":"esta.pymatgenBag","text":""},{"location":"reference/esta/pymatgenBag/#esta.pymatgenBag","title":"<code>esta.pymatgenBag</code>","text":""},{"location":"reference/esta/qeBag/23/","title":"esta.qeBag.23","text":""},{"location":"reference/esta/qeBag/23/#esta.qeBag.23","title":"<code>esta.qeBag.23</code>","text":""},{"location":"reference/esta/qeBag/","title":"esta.qeBag","text":""},{"location":"reference/esta/qeBag/#esta.qeBag","title":"<code>esta.qeBag</code>","text":""},{"location":"reference/esta/qeBag/band_gap_xml/","title":"esta.qeBag.band_gap_xml","text":""},{"location":"reference/esta/qeBag/band_gap_xml/#esta.qeBag.band_gap_xml","title":"<code>esta.qeBag.band_gap_xml</code>","text":""},{"location":"reference/esta/qeBag/band_gap_xml/#esta.qeBag.band_gap_xml.eband_gap","title":"<code>eband_gap(filexml, lband_struct=True)</code>","text":"<p>find the electronic band gap from the xml data file from the qe output</p> <p>Returns:</p> <ul> <li> <code>eband_gap</code> (              <code>scalar</code> )          \u2013            <p>electronic energy band gap </p> </li> <li> <code>vbM_dict</code> (              <code>dict</code> )          \u2013            <p>a dict for valence band maximum data i.e. it contains vbM_dict['vbM'], vbM_dict['vbM_index'], and vbM_dict['kpt_vbM]       </p> </li> <li> <code>cbm_dict</code> (              <code>dict</code> )          \u2013            <p>a dict for conduction band minimum data i.e. it contains cbm_dict['cbm'], cbm_dict['cbm_index'], and cbm_dict['kpt_cbm]</p> </li> </ul>"},{"location":"reference/esta/qeBag/bands_kpts_band_gap/","title":"esta.qeBag.bands_kpts_band_gap","text":""},{"location":"reference/esta/qeBag/bands_kpts_band_gap/#esta.qeBag.bands_kpts_band_gap","title":"<code>esta.qeBag.bands_kpts_band_gap</code>","text":""},{"location":"reference/esta/qeBag/bands_kpts_band_gap/#esta.qeBag.bands_kpts_band_gap.energies_kpts","title":"<code>energies_kpts(filename)</code>","text":"<p>finding: -nbands, band-energies -nkpts, kpt-coordinate  -band gap for spin up channel -band gap for spin down channel -band gap between valence band(of spin up/down) and cond. band (spin up/down) for unpolarised/polarised qe scf.out file</p> <p>NOTE: use verbosity = 'high'  to print the band energies</p> <p>input:      name of scf.out file with verbosity high to be used in qe pw.x      calculation</p> <p>output: see above</p> <p>internal variables:     lspin      lfermi     nelec     nband     efermi     energies     occupations</p> <pre><code>print('no of bands: {}, no of kpts: {}, Fermi level: {}'.format(nband, nkpt, efermi))\nprint('no of elctrons: {}'.format(nelec))\n\nenergies = np.zeros((nkpt, nband, 2)) # 2 for spin polarised calc\noccupations = np.zeros_like(energies)\n\n\ncoord_kpts =[]\n\n\n\nif lspin:\n    return energies, coord_kpts, band_gap_up, band_gap_down, band_gap, lspin, occupations\nelse:\n    return energies, coord_kpts, band_gap_up, None, None, lspin, occupations\n</code></pre> <p>====++++++++++++++++============================================================      MORE to do for fermi energy: </p> <pre><code>    see qexml.f90 in Modules of qe6.2 version:\n    lines:  4152,42       89%\n</code></pre> <p>IF ( two_fermi_energies_ ) THEN  ! sk : fermi energies up down or up/down e eneties.. so on      !      CALL iotk_scan_dat( iunit, \"FERMI_ENERGY_UP\", ef_up_, IERR=ierr )      IF (ierr/=0) RETURN      CALL iotk_scan_dat( iunit, \"FERMI_ENERGY_DOWN\", ef_dw_, IERR=ierr )      IF (ierr/=0) RETURN      CALL iotk_scan_dat( iunit, \"ELECTRONS_UP\", nel_up_, IERR=ierr )      IF (ierr/=0) RETURN      CALL iotk_scan_dat( iunit, \"ELECTRONS_DOWN\", nel_down_, IERR=ierr )      IF (ierr/=0) RETURN      !   ELSE      !      CALL iotk_scan_dat  ( iunit, \"FERMI_ENERGY\", ef_ , FOUND=found )      IF (ierr/=0) RETURN =====++++++++++++++++++++++++=====================================================</p>"},{"location":"reference/esta/qeBag/critic2_qe_input/","title":"esta.qeBag.critic2_qe_input","text":""},{"location":"reference/esta/qeBag/critic2_qe_input/#esta.qeBag.critic2_qe_input","title":"<code>esta.qeBag.critic2_qe_input</code>","text":"<p>create critic2 input for calculation of  bader charge and volumes .. other calculations input can also be added in the future.</p>"},{"location":"reference/esta/qeBag/critic2_qe_input/#esta.qeBag.critic2_qe_input.critic2","title":"<code>critic2</code>","text":"<p>critic2 class</p>"},{"location":"reference/esta/qeBag/gen_qeinput/","title":"esta.qeBag.gen_qeinput","text":""},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput","title":"<code>esta.qeBag.gen_qeinput</code>","text":"<p>generate qe input file using poscar and other input parameters</p> <p>Input:     string, poscar filename      string, pseudo-type info; e.g:          ps_info ='.pbe-kjpaw' or .pbe-rrkjus_ for uspp     string (optional), cell vectors in angstrom or bohr; default is angstrom         set it to bohr for veiwing the qe input file in xcrysden (version:1.5.53) output:     qe input file</p> <p>NOTE:   0. Right now only for PBE functional .. can be used for other functionals</p> <ol> <li>NEEDED pseudo-potential directory; default is in ~ with     location = '/home/sonu/pslibrary.1.0.0/pbe/PSEUDOPOTENTIALS/'</li> </ol> <p>date: Jan, March 2020       Jan, 2021 author: sk, sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.get_N1_N2_N3_in_MP_grid","title":"<code>get_N1_N2_N3_in_MP_grid(posfile=None, location=None, l_metal_insulator=None)</code>","text":"<p>For auto-matic k-grid(taken from vasp manual): </p> <p>N 1 = max(1, l \u2217 | b 1 | + 0.5) N 2 = max(1, l \u2217 | b 2 | + 0.5) N 3 = max(1, l \u2217 | b 3 | + 0.5). Symmetry is used to map equivalent k-points to each other,  which can reduce the total number of k-points significantly.  Usefulvalues for the length (l) vary between 10 (large gap insulators)  and 100 (d-metals).</p> <p>NOTE:     If length of lv1, lv2, lv3 &gt; 2; then taken N1/N2/N3 = 1, acoordingly</p> <p>NOTE: need testing of this method/functions????????</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.get_parameters_pseudo","title":"<code>get_parameters_pseudo(loc, ps_info, atmsymbol, lcopy_pseudo=True)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.delete_pseudo_pot","title":"<code>delete_pseudo_pot(pseudo_list, lremove_pseudo, location)</code>","text":"<p>remove the *UPF files in the current directory if not required</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.get_input_parameters","title":"<code>get_input_parameters(cal_type=None)</code>","text":"<p>read input parameters provided by the user for different calculation types,  such as scf, relax or vc-relax</p>"},{"location":"reference/esta/qeBag/gen_qeinput/#esta.qeBag.gen_qeinput.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell='angstrom', lremove_pseudo=False, cal_type=None, lspin=None)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/","title":"esta.qeBag.gen_qeinput2","text":""},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2","title":"<code>esta.qeBag.gen_qeinput2</code>","text":"<p>generate qe input file using poscar and other input parameters</p> <p>Input:     string, poscar filename      string, pseudo-type info; e.g:          ps_info ='.pbe-kjpaw' or .pbe-rrkjus_ for uspp     string (optional), cell vectors in angstrom or bohr; default is angstrom         set it to bohr for veiwing the qe input file in xcrysden (version:1.5.53) output:     qe input file</p> <p>NOTE:   0. Right now only for PBE functional .. can be used for other functionals</p> <ol> <li> <p>NEEDED pseudo-potential directory; default is in ~ with     location = '/home/sonu/pslibrary.1.0.0/pbe/PSEUDOPOTENTIALS/'</p> </li> <li> <p>also copy the pseudo pots mentioned in the created input file to       its location .. done</p> </li> </ol> <p>date: Jan, March 2020 author: sk, sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.get_N1_N2_N3_in_MP_grid","title":"<code>get_N1_N2_N3_in_MP_grid(l_metal_insulator=None)</code>","text":"<p>For auto-matic k-grid(taken from vasp manual): </p> <p>N 1 = max(1, l \u2217 | b 1 | + 0.5) N 2 = max(1, l \u2217 | b 2 | + 0.5) N 3 = max(1, l \u2217 | b 3 | + 0.5). Symmetry is used to map equivalent k-points to each other,  which can reduce the total number of k-points significantly.  Usefulvalues for the length (l) vary between 10 (large gap insulators)  and 100 (d-metals).</p> <p>NOTE:     If length of lv1, lv2, lv3 &gt; 2; then taken N1/N2/N3 = 1, acoordingly</p> <p>NOTE: need testing of this method/functions????????</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.get_cutoff_wfc_rho","title":"<code>get_cutoff_wfc_rho(loc, ps_info, atmsymbol, lcopy_pseudo=True)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.delete_pseudo_pot","title":"<code>delete_pseudo_pot(pseudo_list, lremove_pseudo, location)</code>","text":"<p>remove the *UPF files in the current directory if not required</p>"},{"location":"reference/esta/qeBag/gen_qeinput2/#esta.qeBag.gen_qeinput2.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell='angstrom', lremove_pseudo=False)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/","title":"esta.qeBag.gen_qeinput_adv","text":""},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv","title":"<code>esta.qeBag.gen_qeinput_adv</code>","text":"<p>generate qe input file using poscar and other input parameters</p> <p>Returns:</p> <ul> <li> <code>    qe input file</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <ol> <li>Right now only for PBE functional .. can be used for other functionals</li> <li>NEEDED pseudo-potential directory; default is in ~ with    location = '/home/sonu/pslibrary.1.0.0/pbe/PSEUDOPOTENTIALS/'</li> </ol> </li> <li> <code>author</code> (              <code>(sk, physics @ com)</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.get_N1_N2_N3_in_MP_grid","title":"<code>get_N1_N2_N3_in_MP_grid(posfile=None, location=None, l_metal_insulator=None)</code>","text":"<p>For auto-matic k-grid(taken from vasp manual): </p> <p>N 1 = max(1, l \u2217 | b 1 | + 0.5) N 2 = max(1, l \u2217 | b 2 | + 0.5) N 3 = max(1, l \u2217 | b 3 | + 0.5). Symmetry is used to map equivalent k-points to each other,  which can reduce the total number of k-points significantly.  Usefulvalues for the length (l) vary between 10 (large gap insulators)  and 100 (d-metals).</p> <p>NOTE:     If length of lv1, lv2, lv3 &gt; 2; then taken N1/N2/N3 = 1, acoordingly</p> <p>NOTE: need testing of this method/functions????????</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.get_parameters_pseudo","title":"<code>get_parameters_pseudo(loc, ps_info, atmsymbol, lcopy_pseudo=False)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information \u2192 changed to functional_name     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.delete_pseudo_pot","title":"<code>delete_pseudo_pot(pseudo_list, lremove_pseudo, location)</code>","text":"<p>remove the *UPF files in the current directory if not required</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.get_input_parameters","title":"<code>get_input_parameters(cal_type=None)</code>","text":"<p>read input parameters provided by the user for different calculation types,  such as scf, relax or vc-relax</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell='angstrom', lcopy_pseudo=False, lremove_pseudo=False, control=False, system=False, electrons=False, ions=False, cal_type=None, lspin=None)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.get_qe_input2","title":"<code>get_qe_input2(posfile, ps_info, qe_parameters, lprint_cell='angstrom', lcopy_pseudo=False, lremove_pseudo=False, control=False, system=False, electrons=False, ions=False, cal_type=None, lspin=None)</code>","text":"<p>generate qe input file using poscar and other input parameters with dictionary input</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv/#esta.qeBag.gen_qeinput_adv.wrapCmntQE","title":"<code>wrapCmntQE(data)</code>","text":"<p>wrap data      with \"\" and , if its is string      with , only, if it is scalar value</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/","title":"esta.qeBag.gen_qeinput_adv0","text":""},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0","title":"<code>esta.qeBag.gen_qeinput_adv0</code>","text":"<p>generate qe input file using poscar and other input parameters</p> <p>Returns:</p> <ul> <li> <code>    qe input file</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <ol> <li>Right now only for PBE functional .. can be used for other functionals</li> <li>NEEDED pseudo-potential directory; default is in ~ with    location = '/home/sonu/pslibrary.1.0.0/pbe/PSEUDOPOTENTIALS/'</li> </ol> </li> <li> <code>author</code> (              <code>(sk, physics @ com)</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.get_N1_N2_N3_in_MP_grid","title":"<code>get_N1_N2_N3_in_MP_grid(posfile=None, location=None, l_metal_insulator=None)</code>","text":"<p>For auto-matic k-grid(taken from vasp manual): </p> <p>N 1 = max(1, l \u2217 | b 1 | + 0.5) N 2 = max(1, l \u2217 | b 2 | + 0.5) N 3 = max(1, l \u2217 | b 3 | + 0.5). Symmetry is used to map equivalent k-points to each other,  which can reduce the total number of k-points significantly.  Usefulvalues for the length (l) vary between 10 (large gap insulators)  and 100 (d-metals).</p> <p>NOTE:     If length of lv1, lv2, lv3 &gt; 2; then taken N1/N2/N3 = 1, acoordingly</p> <p>NOTE: need testing of this method/functions????????</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.get_parameters_pseudo","title":"<code>get_parameters_pseudo(loc, ps_info, atmsymbol, lcopy_pseudo=True)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information \u2192 changed to functional_name     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.delete_pseudo_pot","title":"<code>delete_pseudo_pot(pseudo_list, lremove_pseudo, location)</code>","text":"<p>remove the *UPF files in the current directory if not required</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.get_input_parameters","title":"<code>get_input_parameters(cal_type=None)</code>","text":"<p>read input parameters provided by the user for different calculation types,  such as scf, relax or vc-relax</p>"},{"location":"reference/esta/qeBag/gen_qeinput_adv0/#esta.qeBag.gen_qeinput_adv0.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell='angstrom', lremove_pseudo=False, cal_type=None, lspin=None)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/","title":"esta.qeBag.gen_qeinput_advv","text":""},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv","title":"<code>esta.qeBag.gen_qeinput_advv</code>","text":"<p>generate qe input file using poscar and other input parameters</p> <p>Returns:</p> <ul> <li> <code>    qe input file</code>           \u2013            </li> <li> <code>.. note::</code>           \u2013            <ol> <li>Right now only for PBE functional .. can be used for other functionals</li> <li>NEEDED pseudo-potential directory; default is in ~ with    location = '/home/sonu/pslibrary.1.0.0/pbe/PSEUDOPOTENTIALS/'</li> <li>added GVRB library ver1.5</li> </ol> </li> <li> <code>author</code> (              <code>(sk, physics @ com)</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.min_scalarlist","title":"<code>min_scalarlist(sequence_list)</code>","text":"<p>return the minimum element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.max_scalarlist","title":"<code>max_scalarlist(sequence_list)</code>","text":"<p>return the max element from scalar elements of a list</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_N1_N2_N3_in_MP_grid","title":"<code>get_N1_N2_N3_in_MP_grid(posfile=None, location=None, l_metal_insulator=None)</code>","text":"<p>For auto-matic k-grid(taken from vasp manual): </p> <p>N 1 = max(1, l * | b 1 | + 0.5) N 2 = max(1, l * | b 2 | + 0.5) N 3 = max(1, l * | b 3 | + 0.5). Symmetry is used to map equivalent k-points to each other,  which can reduce the total number of k-points significantly.  Usefulvalues for the length (l) vary between 10 (large gap insulators)  and 100 (d-metals).</p> <p>NOTE:     If length of lv1, lv2, lv3 &gt; 2; then taken N1/N2/N3 = 1, acoordingly</p> <p>NOTE: need more testing of this method</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_parameters_pseudo","title":"<code>get_parameters_pseudo(loc, ps_info, atmsymbol, lcopy_pseudo=False)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information \u2192 changed to functional_name     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_parameters_pseudo_GVRB","title":"<code>get_parameters_pseudo_GVRB(loc, ps_info, atmsymbol, lcopy_pseudo=False)</code>","text":"<p>find  - the min kinetic energy cutoff - the min charge density cutoff by the reading the PP header files</p> <p>input:     string: loc: location of PP files     string: ps_info: PP information \u2192 changed to functional_name     list: atmsymbols: atomic labels     boolen: lcopy_pseudo: whether to copy PP to current dir from PP database</p> <p>output:     scalar: min kinetic enrgy cutoff     scalar: min charge density cutoff</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.delete_pseudo_pot","title":"<code>delete_pseudo_pot(pseudo_list, lremove_pseudo, location=None)</code>","text":"<p>remove the *UPF files in the current directory if not required</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_input_parameters","title":"<code>get_input_parameters(cal_type=None)</code>","text":"<p>read input parameters provided by the user for different calculation types,  such as scf, relax or vc-relax</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_qe_input","title":"<code>get_qe_input(posfile, ps_info, lprint_cell='angstrom', lprint_pos=None, lcopy_pseudo=False, lremove_pseudo=False, control=False, system=False, electrons=False, ions=False, cal_type=None, lspin=None, l_pseudo_GVRB=False)</code>","text":"<p>generate qe input file using poscar and other input parameters</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_qe_input2","title":"<code>get_qe_input2(posfile, ps_info, qe_parameters, lprint_cell='angstrom', lprint_pos='angstrom', lcopy_pseudo=False, lremove_pseudo=False, control=False, system=False, electrons=False, ions=False, cal_type=None, lspin=None)</code>","text":"<p>generate qe input file using poscar and other input parameters with dictionary input </p> <p>..note::     lprint_cell = angstrom or bohr     lprint_pos = angstrom or crystal</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.get_qe_neb_input","title":"<code>get_qe_neb_input(posfile, ps_info, qe_parameters, lprint_cell='angstrom', lcopy_pseudo=False, lremove_pseudo=False, control=False, system=False, electrons=False, ions=False, cal_type=None, lspin=None, **neb_dict)</code>","text":"<p>generate qe NEB input file using poscar and other input parameters with dictionary input</p>"},{"location":"reference/esta/qeBag/gen_qeinput_advv/#esta.qeBag.gen_qeinput_advv.wrapCmntQE","title":"<code>wrapCmntQE(data)</code>","text":"<p>wrap data      with \"\" and , if its is string      with , only, if it is scalar value</p>"},{"location":"reference/esta/qeBag/get_bands_kpts_band_gap_adv3/","title":"esta.qeBag.get_bands_kpts_band_gap_adv3","text":""},{"location":"reference/esta/qeBag/get_bands_kpts_band_gap_adv3/#esta.qeBag.get_bands_kpts_band_gap_adv3","title":"<code>esta.qeBag.get_bands_kpts_band_gap_adv3</code>","text":""},{"location":"reference/esta/qeBag/get_bands_kpts_band_gap_adv3/#esta.qeBag.get_bands_kpts_band_gap_adv3.energies_kpts","title":"<code>energies_kpts(filename, epsilon=None)</code>","text":"<p>finding: -nbands, band-energies -nkpts, kpt-coordinate  -band gap for spin up channel -band gap for spin down channel -band gap between valence band(of spin up/down) and cond. band (spin up/down) for unpolarised/polarised qe scf.out file</p> <p>NOTE: use verbosity = 'high'  to print the band energies</p> parametes: <pre><code>filename: string\n        name of scf.out file with verbosity high to be used in qe pw.x \n        calculation\nepsilon : tolerance for occupation of energy levels from 1 and 0\n        default is 0.05 (=&gt; level with occupation 0.95 is assumed to \n        be fully occupied i.e. occupation is 1; similary level with occupation\n        0.05 is assumed to be completely empty i.e. occupation is 0.)\n</code></pre> output: <pre><code>bandgap: scalar for a given spin/s channels\nband energies\nkpts\n\nbetter see the output:\n\nif lspin:\n    return energies, coord_kpts, band_gap_up, band_gap_down, band_gap, lspin, occupations\nelse:\n    return energies, coord_kpts, band_gap_up, None, None, lspin, occupations\n</code></pre>"},{"location":"reference/esta/qeBag/get_kohn_sham_energy/","title":"esta.qeBag.get_kohn_sham_energy","text":""},{"location":"reference/esta/qeBag/get_kohn_sham_energy/#esta.qeBag.get_kohn_sham_energy","title":"<code>esta.qeBag.get_kohn_sham_energy</code>","text":""},{"location":"reference/esta/qeBag/get_kohn_sham_energy/#esta.qeBag.get_kohn_sham_energy.get_energies","title":"<code>get_energies(band_str_list)</code>","text":"<p>given list of dictionaries containing band structure information; cast this data into energy(nband, kpt), occupation(nband, kpt), and kpt(nkpt,3) and return as  kpt, energies, and occupations</p> <p>Parameters:</p> <ul> <li> <code>band_str_list</code>           \u2013            <p>list containing dictionaries; each dictionary contaions k_point, eigenvalues and occupations as  keys and corresponding data as values</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>kpt</code> (              <code>1d array for each point</code> )          \u2013            <p>kpt pt, k (nkpts, 0:3) (in Fortran : k(0:3, nkpts)), at which energies and occupations are given</p> </li> <li> <code>energies</code> (              <code>2d array for each kpoint </code> )          \u2013            <p>energies, e(nkpts, nbands) for a given kpt; in Fortran : e(nbands, nkpts) should be used for the  array to be contiguous</p> </li> <li> <code>occupations</code> (              <code>1d array for each kpoint</code> )          \u2013            <p>occupations, oc(nkpts, nbands) for a given kpt; in Fortran : oc(nbands, nkpts) should be used for  the array to be contiguous</p> </li> </ul>"},{"location":"reference/esta/qeBag/get_output_qe/","title":"esta.qeBag.get_output_qe","text":""},{"location":"reference/esta/qeBag/get_output_qe/#esta.qeBag.get_output_qe","title":"<code>esta.qeBag.get_output_qe</code>","text":""},{"location":"reference/esta/qeBag/get_output_qe/#esta.qeBag.get_output_qe.qe_warning","title":"<code>qe_warning()</code>","text":"<p>read output file of qe code and find: - no of atoms - forces on each atom; average force on each atom - pressure  - total energy (last one in the file) - Fermi energy (last one) </p> <p>Author: sk, sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/qeBag/get_output_qe/#esta.qeBag.get_output_qe.get_forces","title":"<code>get_forces(infile)</code>","text":"<p>find Forces acting on atoms (cartesian axes, Ry/au): and print forces in eV/Ang</p> <p>force values... ... ... ... ... ...</p>"},{"location":"reference/esta/qeBag/get_postprocessing_input_qe/","title":"esta.qeBag.get_postprocessing_input_qe","text":""},{"location":"reference/esta/qeBag/get_postprocessing_input_qe/#esta.qeBag.get_postprocessing_input_qe","title":"<code>esta.qeBag.get_postprocessing_input_qe</code>","text":""},{"location":"reference/esta/qeBag/get_postprocessing_input_qe/#esta.qeBag.get_postprocessing_input_qe.post_processing_qe","title":"<code>post_processing_qe</code>","text":"<p>create input files for the postprocessing in qe  for programs like pp.x, average.x etc.</p>"},{"location":"reference/esta/qeBag/get_postprocessing_input_qe/#esta.qeBag.get_postprocessing_input_qe.post_processing_qe.get_PP_input","title":"<code>get_PP_input()</code>","text":"<p>create input files for the postprocessing in qe  for programs like pp.x etc</p>"},{"location":"reference/esta/qeBag/get_postprocessing_input_qe/#esta.qeBag.get_postprocessing_input_qe.post_processing_qe.get_average_input","title":"<code>get_average_input()</code>","text":"<p>create input files for the calculating the planer average using average.x in qe. </p> <p>The avearge.x is used to compute planar and macroscopic averages of a quantity (e.g. charge)     in real space on a 3D FFT mesh. The quantity is read from a file .. see avearge.f90 in  qe package [in PP/src/]</p> <p>! taken from: qe DFT package: !      Compute planar and macroscopic averages of a quantity (e.g. charge) !      in real space on a 3D FFT mesh. The quantity is read from a file !      produced by \"pp.x\", or from multiple files as follows: !          Q(i,j,k) = \\sum_n w_n q_n(i,j,k) !      where q_n is the quantity for file n, w_n is a user-supplied weight !      The planar average is defined as !         p(k) = \\sum_{i=1}^{N_1} \\sum_{j=1}^{N_2} Q(i,j,k) / (N_1 N_2) !      along direction 3, and the like for directions 1 and 2; !      N_1, N_2, N_3 are the three dimensions of the 3D FFT. !      Note that if Q is a charge density whose integral is Z_v: !         Z_v = \\int p(z) dV = \\sum_k p(k) \\Omega/N_3 !      where \\Omega is the size of the unit cell (or supercell) !      The planar average is then interpolated on the specified number !      of points supplied in input and written to file \"avg.dat\" !      The macroscopic average is defined as !         m(z) = \\int_z^{z+a} p(z) dz !      where a is the size of the window (supplied in input) ! !      Input variables ! !      nfile        the number of files contaning the desired quantities !                   All files must refer to the same physical system! ! for each file: !      filename     the name of the n-th file !      weight       the weight w_n of the quantity read from n-th file !      . !      . ! end !      npt          the number of points for the final interpolation of !                   the planar and macroscopic averages, as written to file !                   If npt &lt;= N_idir (see below) no interpolation is done, !                   the N_idir FFT points in direction idir are printed. !      idir         1,2 or 3. Planar average is done in the plane orthogonal !                   to direction \"idir\", as defined for the crystal cell !      awin         the size of the window for macroscopic average (a.u.) ! ! Format of output file avg.dat: !    x   p(x)   m(x) ! where !    x = coordinate (a.u) along direction idir !        x runs from 0 to the length of primitive vector idir !  p(x)= planar average, as defined above !  m(x)= macroscopic average, as defined above</p>"},{"location":"reference/esta/qeBag/get_xyz_from_qe_rlxout/","title":"esta.qeBag.get_xyz_from_qe_rlxout","text":""},{"location":"reference/esta/qeBag/get_xyz_from_qe_rlxout/#esta.qeBag.get_xyz_from_qe_rlxout","title":"<code>esta.qeBag.get_xyz_from_qe_rlxout</code>","text":""},{"location":"reference/esta/qeBag/get_xyz_from_qe_rlxout/#esta.qeBag.get_xyz_from_qe_rlxout.get_xyz","title":"<code>get_xyz(filename, optimized=None)</code>","text":"<p>read qe output file to extract xyz file/files</p>"},{"location":"reference/esta/qeBag/get_xyz_from_qe_rlxout/#esta.qeBag.get_xyz_from_qe_rlxout.get_xyz_all","title":"<code>get_xyz_all(filename, comment=None)</code>","text":"<p>read qe output file to extract set of atomic positions into xyz files</p> input: <pre><code>filename: string, name of the qe output relaxation file or vc-relaxation file\n</code></pre> output: <pre><code>symbol: list of strings consisting of atomic labels\nposition: array of all atomic positions with shape (number_of_rlx_cycles, natoms, 3)\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/","title":"esta.qeBag.neb_qe","text":""},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe","title":"<code>esta.qeBag.neb_qe</code>","text":""},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb","title":"<code>neb</code>","text":"<p>python class</p> <p>..note: </p> <p>--to generate supercard along with its contents such as    BEGIN_POSITIONS   ... content of the supercard here ...   END_POSITIONS</p> <p>for details see documentation of neb.x manual   link: https://www.quantum-espresso.org/Doc/INPUT_NEB.html</p> <p>2) -- to store data (atom no, no of images, atomic symbols,      atomic positions) from *axsf data  -- to generate xyz files from *axsf file from xcrysden</p> <p>3)  -- to read pathx files; where x = 0, 1, 2, ....     and then create xyz files .......</p> <p>4) -- read xsf file and store data (atomic number, symbols, atomic positions)  from xsf file -- create poscar file from xsf file.</p> <p>author: skumar email: sonukumar.physics@gmail.com</p> <pre><code>def test():\n    # this is another comment .. will it work or not?\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.__init__","title":"<code>__init__()</code>","text":"<p>xyzfiles are list of xyz files Note: array the files in proper order so as to  have a well defined path fo NEB calculations</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.read_xyz","title":"<code>read_xyz(xyzfiles)</code>","text":"input: <pre><code>filenames: list of str,  filename xyz file names\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.read_axsf","title":"<code>read_axsf(axsf_file)</code>","text":"input: <pre><code>str: *axsf file name\n</code></pre> output: <pre><code>rank 3 array: atomic positions: array: rank 3 array of shape (nimages, natoms, 3)\nlist of strings: atomic labels: list/array of strings: rank 1 array of atomic labels\nscalar: no of images/number of structures\nrank 2 array: cell vectors\nrank 3 array: forces on atoms of shape (nimage, natoms, 3)\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.read_xsf","title":"<code>read_xsf(xsf_file)</code>","text":"input: <pre><code>str: *xsf file name\n</code></pre> output: <pre><code>rank 2 array: atomic positions: array: rank 3 array of shape (natoms, 3)\nlist of strings: atomic labels: list/array of strings: rank 1 array of atomic labels\nrank 2 array: cell vectors\nrank 2 array: forces on atoms of shape (natoms, 3)\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.read_crd","title":"<code>read_crd(crd_file=None)</code>","text":"<p>read the *crd file from qe neb output data  The *crd file is similar to POSITION_CARD in qe_neb input file</p> parameters <p>crd_file: str     name of the crd file</p> <p>Returns:</p> <ul> <li> <code>pos</code> (              <code>rank 3 array</code> )          \u2013            <p>atomic positions: array: rank 3 array of shape (nimages, natoms, 3)</p> </li> <li> <code>symb</code> (              <code>list of strings</code> )          \u2013            <p>atomic labels: list/array of strings: rank 1 array of atomic labels</p> </li> <li> <code>nimage</code> (              <code>scalar</code> )          \u2013            <p>no of images/number of structures</p> </li> <li> <code>fixatmID</code> (              <code>list</code> )          \u2013            <p>list of fix atm ids (numbering from 1)  </p> </li> <li> <code>fixatmDir</code> (              <code>list</code> )          \u2013            <p>list of string tag for each atom fix direction along x, y and z directions e.g ['T T F','F F F', ....]      </p> <pre><code>    return pos, symb, nimage, fixatmID, fixatmDir\n</code></pre> </li> </ul>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.read_path","title":"<code>read_path(path_file, qe_input)</code>","text":"input: <pre><code>str: *path file name\nstr: qe neb input file (containing Atomic symbols); atomic symbols are not\n    present in *path file\n</code></pre> output: <p>atomic positions: array rank 3      array of shape (nimages, natoms, 3) atomic labels: list/array of strings     rank 1 array of atomic labels no of images: scalar     number of structures forces:  array f shape (nimage, natoms, 3)     atomic forces scalar: energy </p> <p>return (self.pos_path, self.label_qe_neb,          self.no_strs_path, self.force_path, self.energy_path)</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.write_position_card","title":"<code>write_position_card(xyzfiles=None, atm_position=None, symbol=None, atom_fix_index=None, ladd_kpt_lines=False)</code>","text":"Parameters: <pre><code>(Either xyzfiles: list of strings containg names of the xyz files \nOR atm_position, symbol)\n\natom_fix_index: list of atom numbers starting from 1 to be fixed in\n</code></pre> Returns: <pre><code>supercard containing atomic positions for all xzy strs for NEB calculations\n</code></pre> <p>..note: output of this method: ...</p> <p>BEGIN_POSITIONS FIRST_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>INTERMEDIATE_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>INTERMEDIATE_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>-- LAST_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>-- END_POSITIONS</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.to_xyz_files","title":"<code>to_xyz_files(filename, extension, qe_neb_input=None)</code>","text":"input: <pre><code>str: filename\nstr: filename extension (e.g. axsf or path file from NEB calc of qe)\n\n#atomic positions\n#atomic labels\n#no of atoms\n#no of images\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>xyz files in for NEB calculations\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.to_xyz_plus_delta_files","title":"<code>to_xyz_plus_delta_files(pos, label, no_strs, filename, extension, qe_neb_input=None)</code>","text":"input: <pre><code>rank2 array: atomic positions\nlist: atomic labels\nscalar: no of images\n\nstr: filename\nstr: filename extension (e.g. axsf or path file from NEB calc of qe)\n\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>xyz files with displaced atoms according to vibration pattern or some other displacement\nvectors for each atomic position\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.to_xyz_file","title":"<code>to_xyz_file(pos, label, filename=None, extension='xsf')</code>","text":"input: <pre><code>str: filename\nstr: filename extension (e.g. xsf )\n\natomic positions\natomic labels\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>xyz file\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.to_poscar","title":"<code>to_poscar(latvec, pos, label, filename='POSCAR', extension='xsf')</code>","text":"input: <pre><code>str: filename for the output poscar file; default POSCAR\nstr: extension ; redundant variable; default is xsf file\nrank 2 array: lattice vectors: latvec\nrank 2 array: atomic positions: pos\nlist of string : atomic labels: label\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>POSCAR file\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.get_symbol_from_atomic_number","title":"<code>get_symbol_from_atomic_number(atomic_num)</code>","text":"<p>return list of atomic symbols from list of atomic numbers</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/neb_qe/#esta.qeBag.neb_qe.neb.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe1/","title":"esta.qeBag.neb_qe1","text":""},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1","title":"<code>esta.qeBag.neb_qe1</code>","text":""},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb","title":"<code>neb</code>","text":"<p>python class</p> <p>1) --to generate supercard along with its contents such as    BEGIN_POSITIONS   ... content of the supercard here ...   END_POSITIONS</p> <p>for details see documentation of neb.x manual   link: https://www.quantum-espresso.org/Doc/INPUT_NEB.html</p> <p>2) -- to store data (atom no, no of images, atomic symbols,      atomic positions) from *axsf data  -- to generate xyz files from *axsf file from xcrysden</p> <p>3)  -- to read pathx files; where x = 0, 1, 2, ....     and then create xyz files .......todo</p> <p>more will be added according to the needs ...TODO</p> <p>author: skumar email: sonukumar.physics@gmail.com date: July, 2020 Place: QCL, ICReDD, Japan</p>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.__init__","title":"<code>__init__()</code>","text":"<p>xyzfiles are list of xyz files Note: array the files in proper order so as to  have a well defined path fo NEB calculations</p>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.read_xyz","title":"<code>read_xyz(xyzfiles)</code>","text":"input: <pre><code>filenames: list of str,  filename xyz file names\n</code></pre> output: <pre><code>atomic positions: array: rank 2 array of shape (natoms, 3)\natomic labels: list/array of strings: rank 1 array of atomic labels\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.read_axsf","title":"<code>read_axsf(axsf_file)</code>","text":"input: <pre><code>str: *axsf file name\n</code></pre> output: <pre><code>rank 3 array: atomic positions: array: rank 3 array of shape (nimages, natoms, 3)\nlist of strings: atomic labels: list/array of strings: rank 1 array of atomic labels\nscalar: no of images/number of structures\nrank 2 array: cell vectors\nrank 3 array: forces on atoms of shape (nimage, natoms, 3)\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.read_path","title":"<code>read_path(path_file, qe_input)</code>","text":"input: <pre><code>str: *path file name\nstr: qe neb input file (containing Atomic symbols); atomic symbols are not\n    present in *path file\n</code></pre> output: <pre><code>rank 3 array: atomic positions: array: rank 3 array of shape (nimages, natoms, 3)\nlist of strings: atomic labels: list/array of strings: rank 1 array of atomic labels\nscalar: no of images/number of structures\nrank 3 array: forces on atoms of shape (nimage, natoms, 3)\nscalar: energy\n</code></pre> <p>return (self.pos_path, self.label_qe_neb,          self.no_strs_path, self.force_path, self.energy_path)</p>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.write_position_card","title":"<code>write_position_card(xyzfiles)</code>","text":"input: <pre><code>list of strings containg xyz files names\natomic postions\natomic labels\n</code></pre> output: <pre><code>supercard containing atomic positions for all xzy strs for NEB calculations\n</code></pre> <p>NOTE:</p> <p>BEGIN_POSITIONS FIRST_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>INTERMEDIATE_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>INTERMEDIATE_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>-- LAST_IMAGE</p> ATOMIC_POSITIONS { angstrom } <p>-- END_POSITIONS</p>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.to_xyz_files","title":"<code>to_xyz_files(filename, extension, qe_neb_input=None)</code>","text":"input: <pre><code>str: filename\nstr: filename extension (e.g. axsf or path file from NEB calc of qe)\n\n#atomic positions\n#atomic labels\n#no of atoms\n#no of images\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>xyz files in for NEB calculations\n</code></pre>"},{"location":"reference/esta/qeBag/neb_qe1/#esta.qeBag.neb_qe1.neb.to_xyz_plus_delta_files","title":"<code>to_xyz_plus_delta_files(pos, label, no_strs, filename, extension, qe_neb_input=None)</code>","text":"input: <pre><code>rank2 array: atomic positions\nlist: atomic labels\nscalar: no of images\n\nstr: filename\nstr: filename extension (e.g. axsf or path file from NEB calc of qe)\n\n\nor better pass an atom object to this method/function\n</code></pre> output: <pre><code>xyz files with displaced atoms according to vibration pattern or some other displacement\nvectors for each atomic position\n</code></pre>"},{"location":"reference/esta/qeBag/parse_cmdline/","title":"esta.qeBag.parse_cmdline","text":""},{"location":"reference/esta/qeBag/parse_cmdline/#esta.qeBag.parse_cmdline","title":"<code>esta.qeBag.parse_cmdline</code>","text":""},{"location":"reference/esta/qeBag/parse_cmdline/#esta.qeBag.parse_cmdline.parse_cml_args","title":"<code>parse_cml_args(cml)</code>","text":"<p>command line argument  parsering .... TODO ...!!</p>"},{"location":"reference/esta/qeBag/parse_pseudo/","title":"esta.qeBag.parse_pseudo","text":""},{"location":"reference/esta/qeBag/parse_pseudo/#esta.qeBag.parse_pseudo","title":"<code>esta.qeBag.parse_pseudo</code>","text":""},{"location":"reference/esta/qeBag/parse_pseudo/#esta.qeBag.parse_pseudo.parse_pseudoUPF","title":"<code>parse_pseudoUPF(filename)</code>","text":"<p>read data of UPF file in xml section </p> parameters: <pre><code>    filename: name of the pseudo potential UPF file\n</code></pre> returns: <pre><code>    pseudo potential information of an element or set of elements\n    in a chemical system\n</code></pre>"},{"location":"reference/esta/qeBag/pspot_core_states/","title":"esta.qeBag.pspot_core_states","text":""},{"location":"reference/esta/qeBag/pspot_core_states/#esta.qeBag.pspot_core_states","title":"<code>esta.qeBag.pspot_core_states</code>","text":""},{"location":"reference/esta/qeBag/pspot_core_states/#esta.qeBag.pspot_core_states.id_orb2_indx","title":"<code>id_orb2_indx(id_orb)</code>","text":"<p>change atomic orbital id name to id number</p> <p>input:     string: e.g. S, P, D, and F output:     scalar: e.g  0, 1, 2, and 3</p>"},{"location":"reference/esta/qeBag/pspot_core_states/#esta.qeBag.pspot_core_states.read_UPF_xml","title":"<code>read_UPF_xml(filename, index=-1)</code>","text":"<p>Parse pseudo core states from UPF xml; UPF version=\"2.0.1\"</p> Input: <pre><code>string: UPF file for a specific atom; e.g: Ni.pbe-n-rrkjus_psl.1.0.0.UPF\n</code></pre> Returns: <pre><code>string: file containing core states needed for XAS spectra\n</code></pre>"},{"location":"reference/esta/qeBag/qe_comment/","title":"esta.qeBag.qe_comment","text":""},{"location":"reference/esta/qeBag/qe_comment/#esta.qeBag.qe_comment","title":"<code>esta.qeBag.qe_comment</code>","text":""},{"location":"reference/esta/qeBag/qe_comment/#esta.qeBag.qe_comment.wrapCmntQE","title":"<code>wrapCmntQE(data)</code>","text":"<p>wrap data      with \"\" and , if its is string      with , only, if it is scalar value</p>"},{"location":"reference/esta/qeBag/rate_const_adv/","title":"esta.qeBag.rate_const_adv","text":""},{"location":"reference/esta/qeBag/rate_const_adv/#esta.qeBag.rate_const_adv","title":"<code>esta.qeBag.rate_const_adv</code>","text":"<p>rate constant calculations</p> <p>for A* ---&gt; B* kind of surface reaction or similar reaction</p> <p>rate constant  ~ r =  A * exp ( -Ea/kbT )</p> <p>where:        A = ( kb * T/ h ) * (q_vib_TS / q_vib_A*)       q = vib partition function = product_i (1/(1-expt(-h*nu_i / kbT))  )</p>"},{"location":"reference/esta/qeBag/rate_const_adv/#esta.qeBag.rate_const_adv.read_freq_data","title":"<code>read_freq_data(filename, freq_dft)</code>","text":"<p>read freq data from file generated using qe phonon finite diff caclulations </p> input: <pre><code>filename: string, name of the file containing freq data\nfreq_dft: logical, whether dft calculated freq or expt or else..\n</code></pre> output: <pre><code>vib_energies: array, filtered vib freq data (below 50 cm-1 freqs \n                are changed to 50 cm-1 by default)\n</code></pre>"},{"location":"reference/esta/qeBag/rate_const_adv/#esta.qeBag.rate_const_adv.q_partition","title":"<code>q_partition(vib_energies_data, temp)</code>","text":"<p>calculate the partition function based on given vib energies and temp</p> input: <pre><code>vib_energies: array  of length 3*natoms \ntemp: scalar , temperature in K\n</code></pre> output: <pre><code>q_partition: scalar,  parition function\n</code></pre>"},{"location":"reference/esta/qeBag/rate_const_adv/#esta.qeBag.rate_const_adv.get_rate_constant","title":"<code>get_rate_constant(q_part_is, q_part_ts, energy_barrier, temp)</code>","text":"<p>get the rate constant of elementray steps</p> input: <pre><code>q_part_is: scalar, partition function for the initial state\nq_part_ts: scalar, partition function for the transition state\nenergy_barrier: scalar, activation energy barrier going from initial to transition state in eV units\ntemp: scalar, tempature of the reaction in K units\n</code></pre> output: <pre><code>rate_const: scalar, rate constant in s^(-1)\n</code></pre>"},{"location":"reference/esta/qeBag/read_dynmat_adv/","title":"esta.qeBag.read_dynmat_adv","text":""},{"location":"reference/esta/qeBag/read_dynmat_adv/#esta.qeBag.read_dynmat_adv","title":"<code>esta.qeBag.read_dynmat_adv</code>","text":""},{"location":"reference/esta/qeBag/read_dynmat_adv/#esta.qeBag.read_dynmat_adv.read_dynamical_matrix_q0","title":"<code>read_dynamical_matrix_q0(filename, natm_type, posfile=None)</code>","text":"<p>read dyanmatrix at q=(0 0 0) point to find the  force constant between atoms as well as corresponding distance  between atoms </p> parameters: <pre><code>filename: string \n            name of the dynamical martrix file\n\nnatm_type: list\n            for no. of atoms of each types; e.g. [4, 4, 14] for \n            3type of atoms \nposfile: str\n            name of the poscar file, optional\n</code></pre> returns: <p>NOTE: lattice is cubic  see .f90 file in qe code:</p> <p>e.g see:   SUBROUTINE write_old_dyn_mat_head(iudyn) in io_dyn_mat_old.f90             or other .f90 files ....</p>"},{"location":"reference/esta/qeBag/read_write/","title":"esta.qeBag.read_write","text":""},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write","title":"<code>esta.qeBag.read_write</code>","text":""},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo","title":"<code>RWpwo</code>","text":"<p>Class to read and write data file for the atomic structures</p> <ul> <li>read cell parmeters and/or atomic positions</li> <li>write this data in xyz, poscar, and qe-str format</li> </ul>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_atm_positions","title":"<code>get_atm_positions()</code>","text":"<p>find atom positions with labels ...</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_cell_parameters","title":"<code>get_cell_parameters()</code>","text":"<p>return:     cell vectors in angstrom or bohr</p> <p>what is does:</p> <p>for 'rlx' calculations:     search:       \"lattice parameter (alat)\"       \"crystal axes: (cart. coord. in units of alat)\"                    </p> <p>for 'vc-relax' calculations:     search:     'CELL_PARAMETERS (angstrom)' ...</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_energies_and_kpt","title":"<code>get_energies_and_kpt()</code>","text":"<p>get the band energies at k point by reading the scf calculation  out file</p> <p>NOTE: Need verbosity ='high' in the scf input file to print the  band energies</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>IMPORTANT: ordeing same elements together: not done yet .. to be done..            .. so for the time being open the file with Avogadro and save again                as xyz file</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_xyz_grouped_file","title":"<code>get_xyz_grouped_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>NOTE: similar atoms are grouped together</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_element_label","title":"<code>get_element_label(input_atomic_number)</code>","text":"<p>using mendeleev for it : big database of elemental properties</p> <pre><code>In [22]: from mendeleev import element \nIn [21]: for i in [5,6,7,8]: \n...:     element(i) \n...:     print (element(i).symbol) \n...:                                                                                                                            \nB\nC\nN\nO\n</code></pre>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwo.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwi","title":"<code>RWpwi</code>","text":"<p>class to read the pw input file and create poscar file</p> <p>return:     generate poscar file after reading the pw input file</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwi.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwi.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwi.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their\n</code></pre>"},{"location":"reference/esta/qeBag/read_write/#esta.qeBag.read_write.RWpwi.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_0/","title":"esta.qeBag.read_write_0","text":""},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0","title":"<code>esta.qeBag.read_write_0</code>","text":""},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo","title":"<code>RWpwo</code>","text":"<p>Class to read and write data file for the atomic structures</p> <ul> <li>read cell parmeters and/or atomic positions</li> <li>write this data in xyz, poscar, and qe-str format</li> </ul>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_atm_positions","title":"<code>get_atm_positions()</code>","text":"<p>find atom positions with labels ...</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_cell_parameters","title":"<code>get_cell_parameters()</code>","text":"<p>return:     cell vectors in angstrom or bohr</p> <p>what is does:</p> <p>for 'rlx' calculations:     search:       \"lattice parameter (alat)\"       \"crystal axes: (cart. coord. in units of alat)\"                    </p> <p>for 'vc-relax' calculations:     search:     'CELL_PARAMETERS (angstrom)' ...</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_energies_and_kpt","title":"<code>get_energies_and_kpt()</code>","text":"<p>get the band energies at k point by reading the scf calculation  out file</p> <p>NOTE: Need verbosity ='high' in the scf input file to print the  band energies</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>IMPORTANT: ordeing same elements together: not done yet .. to be done..            .. so for the time being open the file with Avogadro and save again                as xyz file</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_xyz_grouped_file","title":"<code>get_xyz_grouped_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>NOTE: similar atoms are grouped together</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_element_label","title":"<code>get_element_label(input_atomic_number)</code>","text":"<p>using mendeleev for it : big database of elemental properties</p> <pre><code>In [22]: from mendeleev import element \nIn [21]: for i in [5,6,7,8]: \n...:     element(i) \n...:     print (element(i).symbol) \n...:                                                                                                                            \nB\nC\nN\nO\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwo.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwi","title":"<code>RWpwi</code>","text":"<p>class to read the pw input file and create poscar file</p> <p>return:     generate poscar file after reading the pw input file</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwi.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwi.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwi.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_0/#esta.qeBag.read_write_0.RWpwi.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_adv/","title":"esta.qeBag.read_write_adv","text":""},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv","title":"<code>esta.qeBag.read_write_adv</code>","text":""},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo","title":"<code>RWpwo</code>","text":"<p>Class to read and write data file for the atomic structures</p> <ul> <li>read cell parmeters and/or atomic positions</li> <li>write this data in xyz, poscar, and qe-str format</li> </ul>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_atm_positions","title":"<code>get_atm_positions()</code>","text":"<p>find atom positions with labels ...</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_cell_parameters","title":"<code>get_cell_parameters()</code>","text":"<p>return:     cell vectors in angstrom or bohr</p> <p>what is does:</p> <p>for 'rlx' calculations:     search:       \"lattice parameter (alat)\"       \"crystal axes: (cart. coord. in units of alat)\"                    </p> <p>for 'vc-relax' calculations:     search:     'CELL_PARAMETERS (angstrom)' ...</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_energies_and_kpt","title":"<code>get_energies_and_kpt()</code>","text":"<p>get the band energies at k point by reading the scf calculation  out file</p> <p>NOTE: Need verbosity ='high' in the scf input file to print the  band energies</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>IMPORTANT: ordeing same elements together: not done yet .. to be done..            .. so for the time being open the file with Avogadro and save again                as xyz file</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_xyz_grouped_file","title":"<code>get_xyz_grouped_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>NOTE: similar atoms are grouped together</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_element_label","title":"<code>get_element_label(input_atomic_number)</code>","text":"<p>using mendeleev for it : big database of elemental properties</p> <pre><code>In [22]: from mendeleev import element \nIn [21]: for i in [5,6,7,8]: \n...:     element(i) \n...:     print (element(i).symbol) \n...:                                                                                                                            \nB\nC\nN\nO\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwo.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwi","title":"<code>RWpwi</code>","text":"<p>class to read the pw input file and create poscar file</p> <p>return:     generate poscar file after reading the pw input file</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwi.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwi.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwi.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_adv/#esta.qeBag.read_write_adv.RWpwi.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_x/","title":"esta.qeBag.read_write_x","text":""},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x","title":"<code>esta.qeBag.read_write_x</code>","text":""},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo","title":"<code>RWpwo</code>","text":"<p>Class to read and write data file for the atomic structures</p> <ul> <li>read cell parmeters and/or atomic positions</li> <li>write this data in xyz, poscar, and qe-str format</li> </ul>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_atm_positions","title":"<code>get_atm_positions()</code>","text":"<p>find atom positions with labels ...</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_cell_parameters","title":"<code>get_cell_parameters()</code>","text":"<p>return:     cell vectors in angstrom or bohr</p> <p>what is does:     search:       \"lattice parameter (alat)\"       \"crystal axes: (cart. coord. in units of alat)\"                    </p> <p>...</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_energies_and_kpt","title":"<code>get_energies_and_kpt()</code>","text":"<p>get the band energies at k point by reading the scf calculation  out file</p> <p>NOTE: Need verbosity ='high' in the scf input file to print the  band energies</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_xyz_file","title":"<code>get_xyz_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>IMPORTANT: ordeing same elements together: not done yet .. to be done..            .. so for the time being open the file with Avogadro and save again                as xyz file</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_xyz_grouped_file","title":"<code>get_xyz_grouped_file()</code>","text":"<p>get xyz file by reading the atomic positions and atomic labels: use method     - get_atm_positions(infile)</p> <p>return:         <code>outfile</code>: write data in xyz file specified by name <code>outfile</code></p> <p>NOTE: similar atoms are grouped together</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_element_label","title":"<code>get_element_label(input_atomic_number)</code>","text":"<p>using mendeleev for it : big database of elemental properties</p> <pre><code>In [22]: from mendeleev import element \nIn [21]: for i in [5,6,7,8]: \n...:     element(i) \n...:     print (element(i).symbol) \n...:                                                                                                                            \nB\nC\nN\nO\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwo.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwi","title":"<code>RWpwi</code>","text":"<p>class to read the pw input file and create poscar file</p> <p>return:     generate poscar file after reading the pw input file</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwi.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwi.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwi.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their\n</code></pre>"},{"location":"reference/esta/qeBag/read_write_x/#esta.qeBag.read_write_x.RWpwi.get_poscar","title":"<code>get_poscar()</code>","text":"<p>write cell_parameters and atomic postions, atom labels etc in  poscar file</p>"},{"location":"reference/esta/qeBag/replace_pseudo_UPF/","title":"esta.qeBag.replace_pseudo_UPF","text":""},{"location":"reference/esta/qeBag/replace_pseudo_UPF/#esta.qeBag.replace_pseudo_UPF","title":"<code>esta.qeBag.replace_pseudo_UPF</code>","text":""},{"location":"reference/esta/qeBag/replace_pseudo_UPF/#esta.qeBag.replace_pseudo_UPF.replace_PP_names","title":"<code>replace_PP_names(list_pp, qe_input)</code>","text":"<p>replace pp by the pp provied in the list_pp present  in the qe_input</p>"},{"location":"reference/esta/qeBag/sum_pdos_atom/","title":"esta.qeBag.sum_pdos_atom","text":""},{"location":"reference/esta/qeBag/sum_pdos_atom/#esta.qeBag.sum_pdos_atom","title":"<code>esta.qeBag.sum_pdos_atom</code>","text":""},{"location":"reference/esta/qeBag/sum_pdos_atom/#esta.qeBag.sum_pdos_atom.sum_pdos","title":"<code>sum_pdos()</code>","text":"<p>I have s,p (also d, but not at the moment) PDOS calculated for several atoms. I want to have a sum for all atoms. Separately s and p.</p> <p>for s we have</p> <p>Energy, LDOS, PDOS columns</p> <p>for p we have</p> <p>Energy, LDOS, Pz-PDOS, Px-PDOS, Py-PDOS</p> TASK: <p>find sum for all atoms (= Energy, Sum of LDOS, Sum of Pz-PDOS,              Sum of Px-PDOS, Sum of Py-PDOS).</p> <p>NOTE: in a single directory keep on one type of states of atoms (may be same or different          atoms); e.g. s, p, or d only for B atoms !!*</p> <p>author: skumar date: 18, Feb, 2021</p> <p>tested by Andrey Lyalin on Feb, 2021</p>"},{"location":"reference/esta/qeBag/xbands_kpts_band_gap/","title":"esta.qeBag.xbands_kpts_band_gap","text":""},{"location":"reference/esta/qeBag/xbands_kpts_band_gap/#esta.qeBag.xbands_kpts_band_gap","title":"<code>esta.qeBag.xbands_kpts_band_gap</code>","text":""},{"location":"reference/esta/qeBag/xbands_kpts_band_gap/#esta.qeBag.xbands_kpts_band_gap.energies_kpts","title":"<code>energies_kpts(filename)</code>","text":"<p>finding: -nbands, band-energies -nkpts, kpt-coordinate  -band gap for spin up channel -band gap for spin down channel -band gap between valence band(of spin up/down) and cond. band (spin up/down) for unpolarised/polarised qe scf.out file</p> <p>NOTE: use verbosity = 'high'  to print the band energies</p> <p>input:      name of scf.out file with verbosity high to be used in qe pw.x      calculation</p>"},{"location":"reference/esta/qeBag/xml_cml/","title":"esta.qeBag.xml_cml","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml","title":"<code>esta.qeBag.xml_cml</code>","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml","title":"<code>read_cml_xml(filename, index=-1)</code>","text":"<p>Parse data-file-schema.xml or another *xml file of qe version 6.4.\u2159.2 </p> Input: <pre><code> string: 'data-file-schema.xml' or input xml file containing crystal str and electronic \n         str. information of calculations carrired out by qe code\n</code></pre> Returns: <pre><code> array: unit cell in bohr, \n array: atomic positions in bohr,\n character: atomic symbols\n array: forces .. \n ... many other parameters present in the xml file ..\n</code></pre>"},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--with-scipy-version-110","title":"with scipy version 1.1.0","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--bohr-radius-52917721067e-11-m-less-accurate","title":"bohr radius= 5.2917721067e-11 m ; less accurate","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--fac-cfbohr2ang-0529177210669-less-accuaret-and","title":"fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--as-a-result-atoms-pos-and-cell-param-are-wrong-after-6-dec-places","title":"as a result atoms pos and cell param are wrong after 6 dec     # places","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--in-scipy-version-141","title":"In scipy version 1.4.1","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--bohr-radiun-529177210903e-11-m-is-same-as-given","title":"bohr radiun = 5.29177210903e-11 m; is same as given","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--in-nist-data-httpsphysicsnistgovcgi-bincuuvaluebohrrada0","title":"in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--numerical-value-5291-772-109-03-x-10-11-m","title":"Numerical value     5.291 772 109 03 x 10-11 m","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--fac-0529177210903-does-not-work","title":"fac = 0.529177210903 # does not work","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--fac-nparray-0529177210903-dtypenpfloat128","title":"fac = np.array( 0.529177210903  , dtype=np.float128)","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--qe-62-and-641-uses","title":"qe 6.2 and .6.4.1 uses","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--realdp-parameter","title":"REAL(DP), PARAMETER :: &amp;","text":""},{"location":"reference/esta/qeBag/xml_cml/#esta.qeBag.xml_cml.read_cml_xml--bohr_radius_si-052917720859e-10_dp-m","title":"BOHR_RADIUS_SI   = 0.52917720859E-10_DP ! m","text":"<p>author: 'skumar' email: 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/qeBag/xml_qe/","title":"esta.qeBag.xml_qe","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe","title":"<code>esta.qeBag.xml_qe</code>","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml","title":"<code>read_qe_xml(filename, index=-1)</code>","text":"<p>Parse data-file-schema.xml or another *xml file of qe version 6.4.\u2159.2 </p> Input: <pre><code> string: 'data-file-schema.xml' or input xml file containing crystal str and electronic \n         str. information of calculations carrired out by qe code\n</code></pre> Returns: <pre><code> array: unit cell in bohr, \n array: atomic positions in bohr,\n character: atomic symbols\n array: forces .. \n ... many other parameters present in the xml file ..\n</code></pre>"},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--with-scipy-version-110","title":"with scipy version 1.1.0","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--bohr-radius-52917721067e-11-m-less-accurate","title":"bohr radius= 5.2917721067e-11 m ; less accurate","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--fac-cfbohr2ang-0529177210669-less-accuaret-and","title":"fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--as-a-result-atoms-pos-and-cell-param-are-wrong-after-6-dec-places","title":"as a result atoms pos and cell param are wrong after 6 dec     # places","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--in-scipy-version-141","title":"In scipy version 1.4.1","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--bohr-radiun-529177210903e-11-m-is-same-as-given","title":"bohr radiun = 5.29177210903e-11 m; is same as given","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--in-nist-data-httpsphysicsnistgovcgi-bincuuvaluebohrrada0","title":"in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--numerical-value-5291-772-109-03-x-10-11-m","title":"Numerical value     5.291 772 109 03 x 10-11 m","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--fac-0529177210903-does-not-work","title":"fac = 0.529177210903 # does not work","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--fac-nparray-0529177210903-dtypenpfloat128","title":"fac = np.array( 0.529177210903  , dtype=np.float128)","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--qe-62-and-641-uses","title":"qe 6.2 and .6.4.1 uses","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--realdp-parameter","title":"REAL(DP), PARAMETER :: &amp;","text":""},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.read_qe_xml--bohr_radius_si-052917720859e-10_dp-m","title":"BOHR_RADIUS_SI   = 0.52917720859E-10_DP ! m","text":"<p>author: 'skumar' email: 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/qeBag/xml_qe/#esta.qeBag.xml_qe.get_poscar","title":"<code>get_poscar(infile)</code>","text":"<p>write poscar file from xml file of qe</p> input: <p>string: infile (data-file-schema.xml)</p> output: <p>poscar file</p>"},{"location":"reference/esta/qeBag/xml_qe_adv/","title":"esta.qeBag.xml_qe_adv","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv","title":"<code>esta.qeBag.xml_qe_adv</code>","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml","title":"<code>read_qe_xml(filename, index=-1, lband_struct=False)</code>","text":"<p>Parse data-file-schema.xml or another *xml file of qe version 6.4.\u2159.2 </p> Input: <pre><code> string: 'data-file-schema.xml' or input xml file containing crystal str and electronic \n         str. information of calculations carrired out by qe code\n</code></pre> Returns: <pre><code> array: unit cell in bohr, \n array: atomic positions in bohr,\n character: atomic symbols\n array: forces .. \n ... many other parameters present in the xml file ..\n</code></pre>"},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--with-scipy-version-110","title":"with scipy version 1.1.0","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--bohr-radius-52917721067e-11-m-less-accurate","title":"bohr radius= 5.2917721067e-11 m ; less accurate","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--fac-cfbohr2ang-0529177210669-less-accuaret-and","title":"fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--as-a-result-atoms-pos-and-cell-param-are-wrong-after-6-dec-places","title":"as a result atoms pos and cell param are wrong after 6 dec     # places","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--in-scipy-version-141","title":"In scipy version 1.4.1","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--bohr-radiun-529177210903e-11-m-is-same-as-given","title":"bohr radiun = 5.29177210903e-11 m; is same as given","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--in-nist-data-httpsphysicsnistgovcgi-bincuuvaluebohrrada0","title":"in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--numerical-value-5291-772-109-03-x-10-11-m","title":"Numerical value     5.291 772 109 03 x 10-11 m","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--fac-0529177210903-does-not-work","title":"fac = 0.529177210903 # does not work","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--fac-nparray-0529177210903-dtypenpfloat128","title":"fac = np.array( 0.529177210903  , dtype=np.float128)","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--qe-62-and-641-uses","title":"qe 6.2 and .6.4.1 uses","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--realdp-parameter","title":"REAL(DP), PARAMETER :: &amp;","text":""},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.read_qe_xml--bohr_radius_si-052917720859e-10_dp-m","title":"BOHR_RADIUS_SI   = 0.52917720859E-10_DP ! m","text":"<p>author: 'skumar' email: 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/qeBag/xml_qe_adv/#esta.qeBag.xml_qe_adv.get_poscar","title":"<code>get_poscar(infile, lcartesian=True)</code>","text":"<p>write poscar file from xml file of qe</p> input: <p>string: infile (data-file-schema.xml)</p> output: <p>poscar file</p>"},{"location":"reference/esta/qeBag/xml_qe_advv/","title":"esta.qeBag.xml_qe_advv","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv","title":"<code>esta.qeBag.xml_qe_advv</code>","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml","title":"<code>read_qe_xml(filename, index=-1, lband_struct=False)</code>","text":"<p>Parse data-file-schema.xml or another *xml file of qe version 6.4.\u2159.2 </p> Parameters: <p>filename: str     'data-file-schema.xml' or input xml file containing crystal str and electronic               str. information of calculations carrired out by qe code</p> Returns: <pre><code> array: unit cell in bohr, \n array: atomic positions in bohr,\n character: atomic symbols\n array: forces .. \n ... many other parameters present in the xml file ..\n</code></pre>"},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--with-scipy-version-110","title":"with scipy version 1.1.0","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--bohr-radius-52917721067e-11-m-less-accurate","title":"bohr radius= 5.2917721067e-11 m ; less accurate","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--fac-cfbohr2ang-0529177210669-less-accuaret-and","title":"fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--as-a-result-atoms-pos-and-cell-param-are-wrong-after-6-dec-places","title":"as a result atoms pos and cell param are wrong after 6 dec     # places","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--in-scipy-version-141","title":"In scipy version 1.4.1","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--bohr-radiun-529177210903e-11-m-is-same-as-given","title":"bohr radiun = 5.29177210903e-11 m; is same as given","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--in-nist-data-httpsphysicsnistgovcgi-bincuuvaluebohrrada0","title":"in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--numerical-value-5291-772-109-03-x-10-11-m","title":"Numerical value     5.291 772 109 03 x 10-11 m","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--fac-0529177210903-does-not-work","title":"fac = 0.529177210903 # does not work","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--fac-nparray-0529177210903-dtypenpfloat128","title":"fac = np.array( 0.529177210903  , dtype=np.float128)","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--qe-62-and-641-uses","title":"qe 6.2 and .6.4.1 uses","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--realdp-parameter","title":"REAL(DP), PARAMETER :: &amp;","text":""},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.read_qe_xml--bohr_radius_si-052917720859e-10_dp-m","title":"BOHR_RADIUS_SI   = 0.52917720859E-10_DP ! m","text":"<p>author: 'skumar' email: 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.get_poscar","title":"<code>get_poscar(infile, lcartesian=True, lendposcar=None)</code>","text":"<p>write poscar file from xml file of qe</p> Parameters: <p>infile: string     infile (data-file-schema.xml) lcartesian: logical     wheter output coord in cartesian format lendposcar: logical (optional)     whether only last pt data in the POSCAR format</p> Return: <pre><code>poscar file (many or just the last pt in rlx path or so.)\n</code></pre>"},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(infile)</code>","text":"<p>all xyz in a file from xml path data</p>"},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.get_xyzs","title":"<code>get_xyzs(infile)</code>","text":"<p>write xyz_all file from xml file of qe</p> Parameters: <p>infile: string     name of the xml file such as data-file-schema.xml</p> Returns: <p>xyzs file with many xyz strs</p>"},{"location":"reference/esta/qeBag/xml_qe_advv/#esta.qeBag.xml_qe_advv.get_energy","title":"<code>get_energy()</code>","text":"<p>extract energy</p>"},{"location":"reference/esta/qeBag/xml_qe_advvv/","title":"esta.qeBag.xml_qe_advvv","text":""},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv","title":"<code>esta.qeBag.xml_qe_advvv</code>","text":""},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.read_qe_xml","title":"<code>read_qe_xml(filename, index=-1, lband_struct=False)</code>","text":"<p>Parse data-file-schema.xml or another *xml file of qe version 6.4.1, 6.2, 7.0</p> Parameters: <p>filename: str     xml file containing crystal str and electronic      str. information of calculations carrired out by qe code</p> Returns: <pre><code> array: unit cell in bohr, \n array: atomic positions in bohr,\n character: atomic symbols\n array: forces .. \n ... many other parameters present in the xml file ..\n</code></pre> <p>..note::      with scipy version 1.1.0     bohr radius= 5.2917721067e-11 m ; less accurate     fac = cf.bohr2ang =0.529177210669 --&lt; -- less accuaret and     as a result atoms pos and cell param are wrong after 6 dec     # places     In scipy version 1.4.1     bohr radiun = 5.29177210903e-11 m; is same as given      in nist data ; https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0     Numerical value          5.291 772 109 03 x 10-11 m      fac = 0.529177210903 # does not work     fac = np.array( 0.529177210903  , dtype=np.float128)</p> <pre><code>qe 6.2 and 6.4.1 uses \nREAL(DP), PARAMETER :: &amp;\n    BOHR_RADIUS_SI   = 0.52917720859E-10_DP ! m\n</code></pre> <p>author: 'skumar' email: 'sonukumar.physics@gmail.com'</p>"},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.get_poscar","title":"<code>get_poscar(infile, lcartesian=True, lendposcar=None)</code>","text":"<p>write poscar file from xml file of qe</p> Parameters: <p>infile: string     infile (data-file-schema.xml) lcartesian: logical     wheter output coord in cartesian format lendposcar: logical (optional)     whether only last pt data in the POSCAR format</p> Return: <pre><code>poscar file (many or just the last pt in rlx path or so.)\n</code></pre>"},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.get_all_xyz_in_a_file","title":"<code>get_all_xyz_in_a_file(infile)</code>","text":"<p>all xyz in a file from xml path data</p>"},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.get_xyzs","title":"<code>get_xyzs(infile)</code>","text":"<p>write xyz_all file from xml file of qe</p> Parameters: <p>infile: string     name of the xml file such as data-file-schema.xml</p> Returns: <p>xyzs file with many xyz strs</p>"},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.get_xyzs_","title":"<code>get_xyzs_(infile, l_last_str=None)</code>","text":"<p>write xyz data file from xml file of qe: all xyz data or only last xyz data</p> Parameters: <p>infile: string     name of the xml file such as data-file-schema.xml</p> Returns: <p>xyzs file with many xyz strs</p>"},{"location":"reference/esta/qeBag/xml_qe_advvv/#esta.qeBag.xml_qe_advvv.get_energy","title":"<code>get_energy()</code>","text":"<p>extract energy</p>"},{"location":"reference/esta/qeBag/zpe/","title":"esta.qeBag.zpe","text":""},{"location":"reference/esta/qeBag/zpe/#esta.qeBag.zpe","title":"<code>esta.qeBag.zpe</code>","text":"<p>calculation of zero point energy in eV</p>"},{"location":"reference/esta/qeBag/zpe/#esta.qeBag.zpe.get_freq","title":"<code>get_freq(filename)</code>","text":"<p>get vibration freq from qe phonon output file in cm-1</p> <p>input:      str, ph output file output:     tuple of array and string, vibration freqs in cm-1 #and eV</p>"},{"location":"reference/esta/rmsd/","title":"esta.rmsd","text":""},{"location":"reference/esta/rmsd/#esta.rmsd","title":"<code>esta.rmsd</code>","text":""},{"location":"reference/esta/rmsd/#esta.rmsd.str_atom","title":"<code>str_atom(atom)</code>","text":"<p>Convert atom type from integer to string</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.int_atom","title":"<code>int_atom(atom)</code>","text":"<p>Convert atom type from string to integer</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.rmsd","title":"<code>rmsd(V, W)</code>","text":"<p>Calculate Root-mean-square deviation from two sets of vectors V and W.</p> <p>Parameters:</p> <ul> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>Root-mean-square deviation between the two vectors</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_rmsd","title":"<code>kabsch_rmsd(P, Q, W=None, translate=False)</code>","text":"<p>Rotate matrix P unto Q using Kabsch algorithm and calculate the RMSD. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> <li> <code>translate</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use centroids to translate vector P and Q unto each other.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>root-mean squared deviation</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_rotate","title":"<code>kabsch_rotate(P, Q)</code>","text":"<p>Rotate matrix P unto matrix Q using Kabsch algorithm.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_fit","title":"<code>kabsch_fit(P, Q, W=None)</code>","text":"<p>Rotate and translate matrix P unto matrix Q using Kabsch algorithm. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated and translated.</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch","title":"<code>kabsch(P, Q)</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q, centered around the centroid. Each vector set is represented as an NxD matrix, where D is the the dimension of the space. The algorithm works in three steps: - a centroid translation of P and Q (assumed done before this function   call) - the computation of a covariance matrix C - computation of the optimal rotation matrix U For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_weighted","title":"<code>kabsch_weighted(P, Q, W=None)</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q. Each vector set is represented as an NxD matrix, where D is the dimension of the space. An optional vector of weights W may be provided.</p> <p>Note that this algorithm does not require that P and Q have already been overlayed by a centroid translation.</p> <p>The function returns the rotation matrix U, translation vector V, and RMS deviation between Q and P', where P' is:</p> <pre><code>P' = P * U + V\n</code></pre> <p>For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> <li> <code>V</code> (              <code>vector</code> )          \u2013            <p>Translation vector (D)</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>Root mean squared deviation between P and Q</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_weighted_fit","title":"<code>kabsch_weighted_fit(P, Q, W=None, rmsd=False)</code>","text":"<p>Fit P to Q with optional weights W. Also returns the RMSD of the fit if rmsd=True.</p> <p>Parameters:</p> <ul> <li> <code>P</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>           \u2013            <p>(N) vector, where N is points</p> </li> <li> <code>rmsd</code>               (<code>Bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, rmsd is returned as well as the fitted coordinates.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P'   : array</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>if the function is called with rmsd=True</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.kabsch_weighted_rmsd","title":"<code>kabsch_weighted_rmsd(P, Q, W=None)</code>","text":"<p>Calculate the RMSD between P and Q with optional weighhts W</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>vector</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.quaternion_rmsd","title":"<code>quaternion_rmsd(P, Q)</code>","text":"<p>Rotate matrix P unto Q and calculate the RMSD based on doi:10.1016/1049-9660(91)90036-O</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.quaternion_transform","title":"<code>quaternion_transform(r)</code>","text":"<p>Get optimal rotation note: translation will be zero when the centroids of each molecule are the same</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.makeW","title":"<code>makeW(r1, r2, r3, r4=0)</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.makeQ","title":"<code>makeQ(r1, r2, r3, r4=0)</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.quaternion_rotate","title":"<code>quaternion_rotate(X, Y)</code>","text":"<p>Calculate the rotation</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Y</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rot</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.centroid","title":"<code>centroid(X)</code>","text":"<p>Centroid is the mean position of all the points in all of the coordinate directions, from a vectorset X.</p> <p>https://en.wikipedia.org/wiki/Centroid</p> <p>C = sum(X)/len(X)</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>C</code> (              <code>float</code> )          \u2013            <p>centroid</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.hungarian_vectors","title":"<code>hungarian_vectors(p_vecs, q_vecs, sigma=1.0, use_kernel=True)</code>","text":"<p>Hungarian cost assignment of a similiarty molecule kernel.</p> <p>Note: Assumes p and q are atoms of same type</p> <p>Parameters:</p> <ul> <li> <code>p_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> <li> <code>q_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>indices_b</code> (              <code>array</code> )          \u2013            <p>(N) view vector of reordered assignment</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.reorder_similarity","title":"<code>reorder_similarity(p_atoms, q_atoms, p_coord, q_coord, use_kernel=True)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using QML similarity the Hungarian method for assignment.</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.reorder_distance","title":"<code>reorder_distance(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates by atom type and then by distance of each atom from the centroid.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms_reordered</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, where N is points holding the ordered atoms' names</p> </li> <li> <code>coords_reordered</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension (rows re-ordered)</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.hungarian","title":"<code>hungarian(A, B)</code>","text":"<p>Hungarian reordering.</p> <p>Assume A and B are coordinates for atoms of SAME type only</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.reorder_hungarian","title":"<code>reorder_hungarian(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.reorder_inertia_hungarian","title":"<code>reorder_inertia_hungarian(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Align the principal intertia axis and then re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.generate_permutations","title":"<code>generate_permutations(elements, n)</code>","text":"<p>Heap's algorithm for generating all n! permutations in a list https://en.wikipedia.org/wiki/Heap%27s_algorithm</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.brute_permutation","title":"<code>brute_permutation(A, B)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the brute force method of permuting all rows of the input coordinates</p> <p>Parameters:</p> <ul> <li> <code>A</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>B</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered view of B projected to A</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.reorder_brute","title":"<code>reorder_brute(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using all permutation of rows (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.check_reflections","title":"<code>check_reflections(p_atoms, q_atoms, p_coord, q_coord, reorder_method=reorder_hungarian, rotation_method=kabsch_rmsd, keep_stereo=False)</code>","text":"<p>Minimize RMSD using reflection planes for molecule P and Q</p> <p>Warning: This will affect stereo-chemistry</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>min_rmsd</code>           \u2013            </li> <li> <code>min_swap</code>           \u2013            </li> <li> <code>min_reflection</code>           \u2013            </li> <li> <code>min_review</code>           \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.rotation_matrix_vectors","title":"<code>rotation_matrix_vectors(v1, v2)</code>","text":"<p>Returns the rotation matrix that rotates v1 onto v2 using Rodrigues' rotation formula.</p> (see https://math.stackexchange.com/a/476311) <p>v1 : array     Dim 3 float array v2 : array     Dim 3 float array</p> Return <p>output : 3x3 matrix     Rotation matrix</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_cm","title":"<code>get_cm(atoms, V)</code>","text":"Get the center of mass of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : (3) array     The CM vector</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_inertia_tensor","title":"<code>get_inertia_tensor(atoms, V)</code>","text":"Get the tensor of intertia of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : 3x3 float matrix     The tensor of inertia</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_principal_axis","title":"<code>get_principal_axis(atoms, V)</code>","text":"Get the molecule's principal axis. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : array     Array of dim 3 containing the principal axis</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.set_coordinates","title":"<code>set_coordinates(atoms, V, title='', decimals=8)</code>","text":"<p>Print coordinates V with corresponding atoms to stdout in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>list</code>)           \u2013            <p>List of atomic types</p> </li> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,3) matrix of atomic coordinates</p> </li> <li> <code>title</code>               (<code>string(optional)</code>, default:                   <code>''</code> )           \u2013            <p>Title of molecule</p> </li> <li> <code>decimals</code>               (<code>int(optional)</code>, default:                   <code>8</code> )           \u2013            <p>number of decimals for the coordinates</p> </li> </ul> Return <p>output : str     Molecule in XYZ format</p>"},{"location":"reference/esta/rmsd/#esta.rmsd.print_coordinates","title":"<code>print_coordinates(atoms, V, title='')</code>","text":"<p>Print coordinates V with corresponding atoms to stdout in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>list</code>)           \u2013            <p>List of element types</p> </li> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,3) matrix of atomic coordinates</p> </li> <li> <code>title</code>               (<code>string(optional)</code>, default:                   <code>''</code> )           \u2013            <p>Title of molecule</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_coordinates","title":"<code>get_coordinates(filename, fmt, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from filename in format fmt. Supports XYZ and PDB.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> <li> <code>fmt</code>               (<code>string</code>)           \u2013            <p>Format of filename. Either xyz or pdb.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_coordinates_pdb","title":"<code>get_coordinates_pdb(filename, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from the first chain in a pdb file and return a vectorset with all the coordinates.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/#esta.rmsd.get_coordinates_xyz","title":"<code>get_coordinates_xyz(filename, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from filename and return a vectorset with all the coordinates, in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/","title":"esta.rmsd.calculate_rmsd","text":""},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd","title":"<code>esta.rmsd.calculate_rmsd</code>","text":""},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.str_atom","title":"<code>str_atom(atom)</code>","text":"<p>Convert atom type from integer to string</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.int_atom","title":"<code>int_atom(atom)</code>","text":"<p>Convert atom type from string to integer</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>string</code>)           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>integer</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.rmsd","title":"<code>rmsd(V, W)</code>","text":"<p>Calculate Root-mean-square deviation from two sets of vectors V and W.</p> <p>Parameters:</p> <ul> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>Root-mean-square deviation between the two vectors</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_rmsd","title":"<code>kabsch_rmsd(P, Q, W=None, translate=False)</code>","text":"<p>Rotate matrix P unto Q using Kabsch algorithm and calculate the RMSD. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> <li> <code>translate</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Use centroids to translate vector P and Q unto each other.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            <p>root-mean squared deviation</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_rotate","title":"<code>kabsch_rotate(P, Q)</code>","text":"<p>Rotate matrix P unto matrix Q using Kabsch algorithm.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_fit","title":"<code>kabsch_fit(P, Q, W=None)</code>","text":"<p>Rotate and translate matrix P unto matrix Q using Kabsch algorithm. An optional vector of weights W may be provided.</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension, rotated and translated.</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch","title":"<code>kabsch(P, Q)</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q, centered around the centroid. Each vector set is represented as an NxD matrix, where D is the the dimension of the space. The algorithm works in three steps: - a centroid translation of P and Q (assumed done before this function   call) - the computation of a covariance matrix C - computation of the optimal rotation matrix U For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_weighted","title":"<code>kabsch_weighted(P, Q, W=None)</code>","text":"<p>Using the Kabsch algorithm with two sets of paired point P and Q. Each vector set is represented as an NxD matrix, where D is the dimension of the space. An optional vector of weights W may be provided.</p> <p>Note that this algorithm does not require that P and Q have already been overlayed by a centroid translation.</p> <p>The function returns the rotation matrix U, translation vector V, and RMS deviation between Q and P', where P' is:</p> <pre><code>P' = P * U + V\n</code></pre> <p>For more info see http://en.wikipedia.org/wiki/Kabsch_algorithm</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>array or None</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>U</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> <li> <code>V</code> (              <code>vector</code> )          \u2013            <p>Translation vector (D)</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>Root mean squared deviation between P and Q</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_weighted_fit","title":"<code>kabsch_weighted_fit(P, Q, W=None, rmsd=False)</code>","text":"<p>Fit P to Q with optional weights W. Also returns the RMSD of the fit if rmsd=True.</p> <p>Parameters:</p> <ul> <li> <code>P</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>           \u2013            <p>(N) vector, where N is points</p> </li> <li> <code>rmsd</code>               (<code>Bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, rmsd is returned as well as the fitted coordinates.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>P'   : array</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            <p>if the function is called with rmsd=True</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.kabsch_weighted_rmsd","title":"<code>kabsch_weighted_rmsd(P, Q, W=None)</code>","text":"<p>Calculate the RMSD between P and Q with optional weighhts W</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>W</code>               (<code>vector</code>, default:                   <code>None</code> )           \u2013            <p>(N) vector, where N is points</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RMSD</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.quaternion_rmsd","title":"<code>quaternion_rmsd(P, Q)</code>","text":"<p>Rotate matrix P unto Q and calculate the RMSD based on doi:10.1016/1049-9660(91)90036-O</p> <p>Parameters:</p> <ul> <li> <code>P</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Q</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rmsd</code> (              <code>float</code> )          \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.quaternion_transform","title":"<code>quaternion_transform(r)</code>","text":"<p>Get optimal rotation note: translation will be zero when the centroids of each molecule are the same</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.makeW","title":"<code>makeW(r1, r2, r3, r4=0)</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.makeQ","title":"<code>makeQ(r1, r2, r3, r4=0)</code>","text":"<p>matrix involved in quaternion rotation</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.quaternion_rotate","title":"<code>quaternion_rotate(X, Y)</code>","text":"<p>Calculate the rotation</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> <li> <code>Y</code>           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>rot</code> (              <code>matrix</code> )          \u2013            <p>Rotation matrix (D,D)</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.centroid","title":"<code>centroid(X)</code>","text":"<p>Centroid is the mean position of all the points in all of the coordinate directions, from a vectorset X.</p> <p>https://en.wikipedia.org/wiki/Centroid</p> <p>C = sum(X)/len(X)</p> <p>Parameters:</p> <ul> <li> <code>X</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>C</code> (              <code>float</code> )          \u2013            <p>centroid</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.hungarian_vectors","title":"<code>hungarian_vectors(p_vecs, q_vecs, sigma=1.0, use_kernel=True)</code>","text":"<p>Hungarian cost assignment of a similiarty molecule kernel.</p> <p>Note: Assumes p and q are atoms of same type</p> <p>Parameters:</p> <ul> <li> <code>p_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> <li> <code>q_vecs</code>               (<code>array</code>)           \u2013            <p>(N,L) matrix, where N is no. of atoms and L is representation length</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>indices_b</code> (              <code>array</code> )          \u2013            <p>(N) view vector of reordered assignment</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.reorder_similarity","title":"<code>reorder_similarity(p_atoms, q_atoms, p_coord, q_coord, use_kernel=True)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using QML similarity the Hungarian method for assignment.</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.reorder_distance","title":"<code>reorder_distance(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates by atom type and then by distance of each atom from the centroid.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms_reordered</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, where N is points holding the ordered atoms' names</p> </li> <li> <code>coords_reordered</code> (              <code>array</code> )          \u2013            <p>(N,D) matrix, where N is points and D is dimension (rows re-ordered)</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.hungarian","title":"<code>hungarian(A, B)</code>","text":"<p>Hungarian reordering.</p> <p>Assume A and B are coordinates for atoms of SAME type only</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.reorder_hungarian","title":"<code>reorder_hungarian(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.reorder_inertia_hungarian","title":"<code>reorder_inertia_hungarian(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Align the principal intertia axis and then re-orders the input atom list and xyz coordinates using the Hungarian method (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.generate_permutations","title":"<code>generate_permutations(elements, n)</code>","text":"<p>Heap's algorithm for generating all n! permutations in a list https://en.wikipedia.org/wiki/Heap%27s_algorithm</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.brute_permutation","title":"<code>brute_permutation(A, B)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using the brute force method of permuting all rows of the input coordinates</p> <p>Parameters:</p> <ul> <li> <code>A</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>B</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered view of B projected to A</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.reorder_brute","title":"<code>reorder_brute(p_atoms, q_atoms, p_coord, q_coord)</code>","text":"<p>Re-orders the input atom list and xyz coordinates using all permutation of rows (using optimized column results)</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>view_reorder</code> (              <code>array</code> )          \u2013            <p>(N,1) matrix, reordered indexes of atom alignment based on the coordinates of the atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.check_reflections","title":"<code>check_reflections(p_atoms, q_atoms, p_coord, q_coord, reorder_method=reorder_hungarian, rotation_method=kabsch_rmsd, keep_stereo=False)</code>","text":"<p>Minimize RMSD using reflection planes for molecule P and Q</p> <p>Warning: This will affect stereo-chemistry</p> <p>Parameters:</p> <ul> <li> <code>p_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>q_atoms</code>               (<code>array</code>)           \u2013            <p>(N,1) matrix, where N is points holding the atoms' names</p> </li> <li> <code>p_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> <li> <code>q_coord</code>               (<code>array</code>)           \u2013            <p>(N,D) matrix, where N is points and D is dimension</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>min_rmsd</code>           \u2013            </li> <li> <code>min_swap</code>           \u2013            </li> <li> <code>min_reflection</code>           \u2013            </li> <li> <code>min_review</code>           \u2013            </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.rotation_matrix_vectors","title":"<code>rotation_matrix_vectors(v1, v2)</code>","text":"<p>Returns the rotation matrix that rotates v1 onto v2 using Rodrigues' rotation formula.</p> (see https://math.stackexchange.com/a/476311) <p>v1 : array     Dim 3 float array v2 : array     Dim 3 float array</p> Return <p>output : 3x3 matrix     Rotation matrix</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_cm","title":"<code>get_cm(atoms, V)</code>","text":"Get the center of mass of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : (3) array     The CM vector</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_inertia_tensor","title":"<code>get_inertia_tensor(atoms, V)</code>","text":"Get the tensor of intertia of V. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : 3x3 float matrix     The tensor of inertia</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_principal_axis","title":"<code>get_principal_axis(atoms, V)</code>","text":"Get the molecule's principal axis. <p>atoms : list     List of atomic types V : array     (N,3) matrix of atomic coordinates</p> Return <p>output : array     Array of dim 3 containing the principal axis</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.set_coordinates","title":"<code>set_coordinates(atoms, V, title='', decimals=8)</code>","text":"<p>Print coordinates V with corresponding atoms to stdout in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>list</code>)           \u2013            <p>List of atomic types</p> </li> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,3) matrix of atomic coordinates</p> </li> <li> <code>title</code>               (<code>string(optional)</code>, default:                   <code>''</code> )           \u2013            <p>Title of molecule</p> </li> <li> <code>decimals</code>               (<code>int(optional)</code>, default:                   <code>8</code> )           \u2013            <p>number of decimals for the coordinates</p> </li> </ul> Return <p>output : str     Molecule in XYZ format</p>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.print_coordinates","title":"<code>print_coordinates(atoms, V, title='')</code>","text":"<p>Print coordinates V with corresponding atoms to stdout in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>atoms</code>               (<code>list</code>)           \u2013            <p>List of element types</p> </li> <li> <code>V</code>               (<code>array</code>)           \u2013            <p>(N,3) matrix of atomic coordinates</p> </li> <li> <code>title</code>               (<code>string(optional)</code>, default:                   <code>''</code> )           \u2013            <p>Title of molecule</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_coordinates","title":"<code>get_coordinates(filename, fmt, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from filename in format fmt. Supports XYZ and PDB.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> <li> <code>fmt</code>               (<code>string</code>)           \u2013            <p>Format of filename. Either xyz or pdb.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_coordinates_pdb","title":"<code>get_coordinates_pdb(filename, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from the first chain in a pdb file and return a vectorset with all the coordinates.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/rmsd/calculate_rmsd/#esta.rmsd.calculate_rmsd.get_coordinates_xyz","title":"<code>get_coordinates_xyz(filename, is_gzip=False, return_atoms_as_int=False)</code>","text":"<p>Get coordinates from filename and return a vectorset with all the coordinates, in XYZ format.</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>string</code>)           \u2013            <p>Filename to read</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>atoms</code> (              <code>list</code> )          \u2013            <p>List of atomic types</p> </li> <li> <code>V</code> (              <code>array</code> )          \u2013            <p>(N,3) where N is number of atoms</p> </li> </ul>"},{"location":"reference/esta/siestaBag/","title":"esta.siestaBag","text":""},{"location":"reference/esta/siestaBag/#esta.siestaBag","title":"<code>esta.siestaBag</code>","text":""},{"location":"reference/esta/spaceGroup/","title":"esta.spaceGroup","text":""},{"location":"reference/esta/spaceGroup/#esta.spaceGroup","title":"<code>esta.spaceGroup</code>","text":""},{"location":"reference/esta/spaceGroup/read_cif/","title":"esta.spaceGroup.read_cif","text":""},{"location":"reference/esta/spaceGroup/read_cif/#esta.spaceGroup.read_cif","title":"<code>esta.spaceGroup.read_cif</code>","text":""},{"location":"reference/esta/spaceGroup/read_cif/#esta.spaceGroup.read_cif.cif","title":"<code>cif(inputfile)</code>","text":"<p>read cif and generate all atoms through sym op. privided in the cif file as  well as other atom and cell parameters to describe the xtal structure</p>"},{"location":"reference/esta/spaceGroup/transform/","title":"esta.spaceGroup.transform","text":""},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform","title":"<code>esta.spaceGroup.transform</code>","text":""},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform","title":"<code>Transform</code>","text":"<p>transfor class to     -create supercell from crystal lattice object</p> <pre><code>-rotation/translation etc...\n</code></pre> <p>More transformations to      -unit cell/atomic positions/reciprocal lattice/kpoints to be added</p> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.__init__","title":"<code>__init__(cryst_obj)</code>","text":"<p>cryst_obj is crystal_lattice.CrystalLattice('POSCAR', './') object from inout  of vasp_bag</p>"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.get_supercell","title":"<code>get_supercell(scale)</code>","text":"<ul> <li> <p>create supercell by shifting ALL atoms in space with scaling  [scale1,scale2,scale3]</p> </li> <li> <p>looping is performed along three directions of lv's vectors</p> </li> <li> <p>loops are:     i = 0,1,2 ... sclae1     j = 0,1,2 ... scale2      k = 0,1,2 ... scale3</p> </li> <li> <p>total atoms in supercell = atoms in unit-cell * np.product([scale1,scale2,scale3])</p> </li> </ul>"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> input: <pre><code> list of strings of atomic labels\n</code></pre> returns: <pre><code>get integer number of list entries (atomic symbols) of each type\n</code></pre>"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.get_grouped_xyz","title":"<code>get_grouped_xyz()</code>","text":"<p>xyz file with grouped atoms of same type</p>"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.get_sposcar","title":"<code>get_sposcar()</code>","text":"<p>get poscar file with scaled dimensions: supercell of POSCAR file</p> input: instantiate the transform class, rest is done itself output: SPOSCAR file"},{"location":"reference/esta/spaceGroup/transform/#esta.spaceGroup.transform.Transform.rot_trans","title":"<code>rot_trans(inp_mat, lcell=None, lposition=None, translation=None, rotation_matrix=None)</code>","text":"<p>given input matrix (may be cell matrix or position matrix in c order)  and rotation matrix (optional; default is unit matrix), output respective new matrix</p> <p>Returns:</p> <ul> <li> <code>    inp_mat like</code>           \u2013            </li> <li> <code>Note</code> (              <code>following convention like spglib: https://spglib.github.io/spglib/definition.html</code> )          \u2013            <p>====&gt;  Basis vectors (a,b,c)  or (a1, a2, a3) </p> <p>In spglib, basis vectors are represented by three column vectors (in Cartesian coordinates. ) :</p> <p>a=\u239b\u239d\u239cax ay az\u239e\u23a0\u239f,         b=\u239b\u239d\u239cbx by bz\u239e\u23a0\u239f,            c=\u239b\u239d\u239ccx cy cz\u239e\u23a0\u239f,</p> <p>====&gt; atomic point x are represented as three fractional values relative to basis  vectors as follows,</p> <p>x=\u239b\u239d\u239cx1x2x3\u239e\u23a0\u239f</p> <p>====&gt; The transformation matrix P changes choice of basis vectors as follows  (a b c) = (as bs cs) P  where (abc) and (as bs cs) are the basis vectors of an arbitrary   system and of a starndardized system, respectively</p> <p>The origin shift p gives the vector from the origin of the standardized   system Os to the origin of the arbitrary system O  p = O \u2212 Os</p> <p>A change of basis is described by the combination of the transformation matrix and the origin shift denoted by (P,p) where first the transformation  matrix is applied and then origin shift. The points in the standardized system xs and arbitrary system x are related by </p> <p>xs = P x + p,</p> <p>or equivalently, </p> <p>x = P^-1 xs \u2212 P^-1 p</p> </li> </ul>"},{"location":"reference/esta/spaceGroup/transform_adv/","title":"esta.spaceGroup.transform_adv","text":""},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv","title":"<code>esta.spaceGroup.transform_adv</code>","text":""},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform","title":"<code>transform</code>","text":"<p>transfor class to     -create supercell from crystal lattice object</p> <pre><code>-rotation/translation etc...\n</code></pre> <p>More transformations to      -unit cell/atomic positions/reciprocal lattice/kpoints to be added</p> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.__init__","title":"<code>__init__(cryst_obj)</code>","text":"<p>cryst_obj is crystal_lattice.CrystalLattice('POSCAR', './') object from inout  of vasp_bag</p>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.get_supercell","title":"<code>get_supercell(scale)</code>","text":"<ul> <li> <p>create supercell by shifting ALL atoms in space with scaling  [scale1,scale2,scale3]</p> </li> <li> <p>looping is performed along three directions of lv's vectors</p> </li> <li> <p>loops are:     i = 0,1,2 ... sclae1     j = 0,1,2 ... scale2      k = 0,1,2 ... scale3</p> </li> <li> <p>total atoms in supercell = atoms in unit-cell * np.product([scale1,scale2,scale3])</p> </li> </ul>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> parameters: <pre><code> list of strings of atomic labels\n</code></pre> returns: <pre><code>get integer number of list entries (atomic symbols) of each type\n</code></pre>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.get_grouped_xyz","title":"<code>get_grouped_xyz()</code>","text":"<p>xyz file with grouped atoms of same type</p>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.get_sposcar","title":"<code>get_sposcar()</code>","text":"<p>get poscar file with scaled dimensions: supercell of POSCAR file</p> <p>Parameters:</p> <ul> <li> <code>instantiate</code>           \u2013            </li> </ul> returns: <p>creates a SPOSCAR file</p>"},{"location":"reference/esta/spaceGroup/transform_adv/#esta.spaceGroup.transform_adv.transform.rot_trans","title":"<code>rot_trans(inp_mat, lcell=None, lposition=None, translation=None, rotation_matrix=None)</code>","text":"<p>given input matrix (may be cell matrix or position matrix in c order)  and rotation matrix (optional; default is unit matrix), output respective new matrix</p> <p>Returns:</p> <ul> <li> <code>    inp_mat like</code>           \u2013            </li> </ul> Notes <pre><code>Note: following convention like spglib: https://spglib.github.io/spglib/definition.html\n\n\n====&gt; \nBasis vectors (a,b,c)  or (a1, a2, a3)\n\nIn spglib, basis vectors are represented by three column vectors (in Cartesian coordinates.\n) :\n\na=\u239b\u239d\u239cax ay az\u239e\u23a0\u239f,         b=\u239b\u239d\u239cbx by bz\u239e\u23a0\u239f,            c=\u239b\u239d\u239ccx cy cz\u239e\u23a0\u239f,\n\n====&gt;\natomic point x are represented as three fractional values relative to basis \nvectors as follows,\n\nx=\u239b\u239d\u239cx1x2x3\u239e\u23a0\u239f\n\n\n====&gt;\nThe transformation matrix P changes choice of basis vectors as follows\n (a b c) = (as bs cs) P\n where (abc) and (as bs cs) are the basis vectors of an arbitrary \n system and of a starndardized system, respectively\n\n The origin shift p gives the vector from the origin of the standardized \n system Os to the origin of the arbitrary system O\n p = O \u2212 Os\n\n\nA change of basis is described by the combination of the transformation\nmatrix and the origin shift denoted by (P,p) where first the transformation \nmatrix is applied and then origin shift. The points in the standardized system\nxs and arbitrary system x are related by\n\nxs = P x + p,\n\nor equivalently,\n\nx = P^-1 xs \u2212 P^-1 p\n</code></pre> <p>.. note:: for more info see spglib conventions at https://spglib.github.io/spglib/definition.html</p>"},{"location":"reference/esta/string2integer/","title":"esta.string2integer","text":""},{"location":"reference/esta/string2integer/#esta.string2integer","title":"<code>esta.string2integer</code>","text":""},{"location":"reference/esta/string2integer/#esta.string2integer.get_strings_to_integers","title":"<code>get_strings_to_integers(list_entry)</code>","text":"<p>convert character F and T to 0 and 1, respectively</p> <p>e.g. convert ['F F F', 'F T T'] to  ['0 0 0', '0 1 1']</p>"},{"location":"reference/esta/super_using_inheritance/","title":"esta.super_using_inheritance","text":""},{"location":"reference/esta/super_using_inheritance/#esta.super_using_inheritance","title":"<code>esta.super_using_inheritance</code>","text":""},{"location":"reference/esta/super_using_inheritance/#esta.super_using_inheritance.child","title":"<code>child</code>","text":"<p>               Bases: <code>parent</code></p>"},{"location":"reference/esta/super_using_inheritance/#esta.super_using_inheritance.child.ss","title":"<code>ss()</code>","text":"<p>calling parent class method</p>"},{"location":"reference/esta/surfReact/","title":"esta.surfReact","text":""},{"location":"reference/esta/surfReact/#esta.surfReact","title":"<code>esta.surfReact</code>","text":""},{"location":"reference/esta/surfReact/conformer/","title":"esta.surfReact.conformer","text":""},{"location":"reference/esta/surfReact/conformer/#esta.surfReact.conformer","title":"<code>esta.surfReact.conformer</code>","text":""},{"location":"reference/esta/surfReact/conformer/#esta.surfReact.conformer.conf_surf","title":"<code>conf_surf(xlattice)</code>","text":"<p>find the conformers and store them in a  specific place for further operation</p>"},{"location":"reference/esta/to_format/","title":"esta.to_format","text":""},{"location":"reference/esta/to_format/#esta.to_format","title":"<code>esta.to_format</code>","text":""},{"location":"reference/esta/to_format/#esta.to_format.to_format","title":"<code>to_format(num_array, filename=None)</code>","text":"<p>convert numpy array data in matrix format(rank 2 array) or rank 1 array  to csv or xlsx format</p>"},{"location":"reference/esta/to_yaml/","title":"esta.to_yaml","text":""},{"location":"reference/esta/to_yaml/#esta.to_yaml","title":"<code>esta.to_yaml</code>","text":""},{"location":"reference/esta/to_yaml/#esta.to_yaml.to_yaml","title":"<code>to_yaml(dict_input, out_yaml=None)</code>","text":"<p>store the dictionary input into yaml file</p>"},{"location":"reference/esta/transitionState/","title":"esta.transitionState","text":""},{"location":"reference/esta/transitionState/#esta.transitionState","title":"<code>esta.transitionState</code>","text":""},{"location":"reference/esta/transitionState/associated_legendre/","title":"esta.transitionState.associated_legendre","text":""},{"location":"reference/esta/transitionState/associated_legendre/#esta.transitionState.associated_legendre","title":"<code>esta.transitionState.associated_legendre</code>","text":""},{"location":"reference/esta/transitionState/neb/","title":"esta.transitionState.neb","text":""},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb","title":"<code>esta.transitionState.neb</code>","text":"<p>finding the transition state using Neb class given initial and  final atomic structures using </p> <ol> <li>normal NEB. </li> <li>Climbing NEB.</li> <li>Automatic NEB methods  .. to be done.</li> </ol> <p>author = 'sk'</p> <p>email = 'sonukumar.physics@gmail.com'</p> <p>date = 'Nov, 2017'</p> <p>.. note::    We take N+1 images in the elastic band. The end point images are    input relaxed structures (reactant and product as an example). The     N-1 images are created or feed and after that these images are     optimized to get converged elastic band.    i.e.     0  1  2  3 ... i ... N ---&gt; N+1 images; 0 and N images are fixed</p> <p>.. _link: http://aip.scitation.org/doi/10.1063/1.1323224</p>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb","title":"<code>Neb</code>","text":"<p>class Neb: calculate the nedged force on all the images in the elastic band</p> <p>nedged force = (true force/dft force )_perpendicular componet + (spring      force)_parallel component</p>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb.get_force_ci","title":"<code>get_force_ci</code>  <code>property</code>","text":"<p>get force on the climbing image</p> <p>.. note::    force_ci = force_dft  - 2*  dot_product (force_dft_vector , tangent_vector) tangent_vector</p>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb.__init__","title":"<code>__init__(position, force, energy=None)</code>","text":"<p>Parameters:</p> <ul> <li> <code>position</code>               (<code>array</code>)           \u2013            <p>array of rank 3 or shape (n_images, natoms, 3) specifying  atomic positions of all images; NOTE: position variable for all the images =&gt; position contains all the images  present in the elastic band!!!</p> </li> <li> <code>force</code>               (<code>array</code>)           \u2013            <p>array of rank 3 or shape (n_images, natoms, 3) specifying  atomic forces on all images</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>force_nedged</code> (              <code>array</code> )          \u2013            <p>array of rank 3 or shape (n_images, natoms, 3) specifying nedged forces on  all images</p> </li> </ul>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb.get_tangent","title":"<code>get_tangent()</code>","text":"<p>get an estimate of the tangent at each image along the elastic band</p> <p>.. note::</p> <p>Two ways to estimation:</p> <p>1) Graeme Henkelman, et al. OURNAL OF CHEMICAL PHYSICS VOLUME 113,     NUMBER 22 8 DECEMBER 2000  </p> <p>2) Graeme Henkelman and H Jonsson , JOURNAL OF CHEMICAL PHYSICS VOLUME     113, NUMBER 22 8 DECEMBER 2000;     note: improved estimate needs energy of each image present in position variable</p> <p>Parameters:</p> <ul> <li> <code>energy</code>           \u2013            <p>array of energies (DFT or some other energy calculator) of length  equal to the number of images in the elastic band  (also need position and force ---&gt; from self.position, self.force)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tangent</code> (              <code>array</code> )          \u2013            <p>array of rank 3 with shape (n_images, natoms, 3); tangent array at each inbetween  images to get perpendicular and parallel component of true/dft forces and spring forces Note: first and last tangents are kept zero and never used!!</p> </li> </ul>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb.get_spring_force_parallel","title":"<code>get_spring_force_parallel(spring_constant=None)</code>","text":"<p>get the spring force parallel to the tangent, given the self.atomic positions and  spring_constant (optional)</p>"},{"location":"reference/esta/transitionState/neb/#esta.transitionState.neb.Neb.get_force_perpen","title":"<code>get_force_perpen()</code>","text":"<p>get the perpendicular force acting on each image excluding end points;</p> <p>.. note::    force_perpendicular = force_dft  - dot_product (force_dft , tangent_vector) tangent_vector</p> <p>force_dft is force obtained from dft or some model calculation!</p>"},{"location":"reference/esta/transitionState/optimizer/","title":"esta.transitionState.optimizer","text":""},{"location":"reference/esta/transitionState/optimizer/#esta.transitionState.optimizer","title":"<code>esta.transitionState.optimizer</code>","text":"<p>Optimizer routines to update the atomic posiitons.</p>"},{"location":"reference/esta/transitionState/optimizer/#esta.transitionState.optimizer.steepest_descent","title":"<code>steepest_descent(pos, force, dstep)</code>","text":"<p>Optimizer: Steepest Descent (SD) Args:   pos(float): atomic positions in the current step   force(float): force acting on each atoms in the current step   dstep(float) : step size Returns:   float: updated atomic positions</p>"},{"location":"reference/esta/transitionState/optimizer/#esta.transitionState.optimizer.conjugate_gradient","title":"<code>conjugate_gradient(pos, force, force_old, maxstep, img)</code>","text":"<p>Optimizer: Conjugate Gradient (CG) It alternatively follows the direction of force and conjugate direction of force. Args:   pos(float): atomic positions in the current step   force(float): force acting on each atoms in the current step   force_old(float): force acting on each atoms in the previous step   maxstep(float) : allowed maximum step size   img(int): image index Returns:   float: updated atomic positions</p>"},{"location":"reference/esta/transitionState/optimizer/#esta.transitionState.optimizer.quick_min","title":"<code>quick_min(pos, posold, force, dstep, maxstep)</code>","text":"<p>Optimizer: Quick-Min (QM) Args:   pos(float): atomic positions in the current step   posold(float): atomic positions in the previous step   force(float): force acting on each atoms in the current step   dstep(float): step size   maxstep(float) : allowed maximum step size Returns:   float: updated atomic positions</p>"},{"location":"reference/esta/transitionState/optimizer/#esta.transitionState.optimizer.bfgs_line","title":"<code>bfgs_line(pos, posold, force, forceold, dstep, maxstep, img)</code>","text":"<p>Optimizer: Broyden-Fletcher-Goldfarb-Shanno (BFGS) Args:   pos(float): atomic positions in the current step   posold(float): atomic positions in the previous step   force(float): force acting on each atoms in the current step   forceold(float): force acting on each atoms in the previous step   dstep(float): step size   maxstep(float) : allowed maximum step size   img(int): image index Returns:   float: updated atomic positions</p>"},{"location":"reference/esta/transitionState/potential_2D/","title":"esta.transitionState.potential_2D","text":""},{"location":"reference/esta/transitionState/potential_2D/#esta.transitionState.potential_2D","title":"<code>esta.transitionState.potential_2D</code>","text":"<p>calculate the potential energy on 2D surface using the following  potential energy function: v(x,y) = Ax cos(2pix) + Ay sin(2piy)</p> <p>x \u2192 0 to 4 y \u2192 -2 to 2</p>"},{"location":"reference/esta/transitionState/potential_2D/#esta.transitionState.potential_2D.get_potential_energy","title":"<code>get_potential_energy()</code>","text":"<p>v(x,y) = Ax cos(2pix) + Ay sin(2piy)</p>"},{"location":"reference/esta/turbomoleBag/","title":"esta.turbomoleBag","text":""},{"location":"reference/esta/turbomoleBag/#esta.turbomoleBag","title":"<code>esta.turbomoleBag</code>","text":""},{"location":"reference/esta/vaspBag/","title":"esta.vaspBag","text":""},{"location":"reference/esta/vaspBag/#esta.vaspBag","title":"<code>esta.vaspBag</code>","text":""},{"location":"reference/esta/vaspBag/add_vacuum_to_unit_cell/","title":"esta.vaspBag.add_vacuum_to_unit_cell","text":""},{"location":"reference/esta/vaspBag/add_vacuum_to_unit_cell/#esta.vaspBag.add_vacuum_to_unit_cell","title":"<code>esta.vaspBag.add_vacuum_to_unit_cell</code>","text":""},{"location":"reference/esta/vaspBag/add_vacuum_to_unit_cell/#esta.vaspBag.add_vacuum_to_unit_cell.add_vacuum","title":"<code>add_vacuum(LV1, LV2, LV3, vacuum)</code>","text":"<p>Add vacuum layer along LV3</p> <p>Parameters:</p> <p>LV1: array      lattice vec 1 LV2: array      lattice vec 2 LV3: array      lattice vec 3 vacuum: float     The thickness of the vacuum in Ang</p> <p>TODO: Note: </p> <pre><code> - in future LV1,LV2,LV3 may be taekn in the form of a cell matrix with each row representing LV1,\n   LV2, and LV3    \n - vacuum in all directions can be added ... just pass the axis(LV1..2..3)  in a loop to this method\n</code></pre>"},{"location":"reference/esta/vaspBag/band_gap/","title":"esta.vaspBag.band_gap","text":""},{"location":"reference/esta/vaspBag/band_gap/#esta.vaspBag.band_gap","title":"<code>esta.vaspBag.band_gap</code>","text":"<p>Finding of:</p> <p>band gap from the OUTCAR file or EIGENVAL file   VBM or HOMO   CBM or LUMO   Fermi energy   no. of kpts   no. of bands   no. of electrons   spin polarised calculation or not?</p> <p>Note:</p> <p>**band gap nature: the kpoints corresponding to VBM and CBm are found</p> <p>WARNING: dealing with metallic cases -- experimental            Magnetic systems/SOC---todo</p> <pre><code>author: skumar\nemail: sonukumar.physics@gmail.com\n</code></pre>"},{"location":"reference/esta/vaspBag/band_gap/#esta.vaspBag.band_gap.find_VBMin_CBMax","title":"<code>find_VBMin_CBMax(ispin, nkpts, nbands, nelectron)</code>","text":"<p>find high occupied level = VBMax and find lowest unoccupied level = CBMin</p>"},{"location":"reference/esta/vaspBag/inout/","title":"esta.vaspBag.inout","text":""},{"location":"reference/esta/vaspBag/inout/#esta.vaspBag.inout","title":"<code>esta.vaspBag.inout</code>","text":""},{"location":"reference/esta/vaspBag/inout/cartesian2crystal/","title":"esta.vaspBag.inout.cartesian2crystal","text":""},{"location":"reference/esta/vaspBag/inout/cartesian2crystal/#esta.vaspBag.inout.cartesian2crystal","title":"<code>esta.vaspBag.inout.cartesian2crystal</code>","text":""},{"location":"reference/esta/vaspBag/inout/crystal2cartesian/","title":"esta.vaspBag.inout.crystal2cartesian","text":""},{"location":"reference/esta/vaspBag/inout/crystal2cartesian/#esta.vaspBag.inout.crystal2cartesian","title":"<code>esta.vaspBag.inout.crystal2cartesian</code>","text":""},{"location":"reference/esta/vaspBag/inout/crystal2cartesian/#esta.vaspBag.inout.crystal2cartesian.crystal2cart","title":"<code>crystal2cart(filename=None)</code>","text":"<p>crystal to cartesian coordinate converion</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/","title":"esta.vaspBag.inout.crystal_lattice","text":""},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice","title":"<code>esta.vaspBag.inout.crystal_lattice</code>","text":""},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice","title":"<code>CrystalLattice</code>","text":"<p>Crystal lattice class to define lattice parameters and basis; crystal = lattice + basis (atoms or molecules )</p> <p>Author: Sonu Kumar Email: sonukumar.physics@gmail.com</p> <p>Date: April, 2017 updates:2019, 2020, 2022</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_atm_symbol","title":"<code>get_atm_symbol</code>  <code>property</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.to_cartesian","title":"<code>to_cartesian</code>  <code>property</code>","text":"<p>get atomic position in cartesin cooridnates</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.to_crystal","title":"<code>to_crystal</code>  <code>property</code>","text":"<p>get atomic position in crystal cooridnates</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.is_crystal","title":"<code>is_crystal</code>  <code>property</code>","text":"<p>check if atom positions in crytal coordinates</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.is_cartesian","title":"<code>is_cartesian</code>  <code>property</code>","text":"<p>check if atom positions in cartesian  coordinates</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_rVolume","title":"<code>get_rVolume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_volume","title":"<code>get_volume</code>  <code>property</code>","text":"<p>get real space lattice volume</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_cell_vectors","title":"<code>get_cell_vectors</code>  <code>property</code>","text":"<p>geta tuple of set of three cell/lattice vectors lv1, lv2, and lv3 in c-style format</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_cell_matrix","title":"<code>get_cell_matrix</code>  <code>property</code>","text":"<p>get lattice matrix of three cell/lattice vectors lv1, lv2, and lv3 in c-style format or fortran stype format default is c style format.</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_atm_type","title":"<code>get_atm_type</code>  <code>property</code>","text":"<p>get symbolic representation of atoms of each type in  the form of list</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_natm_type","title":"<code>get_natm_type</code>  <code>property</code>","text":"<p>get no. of atoms of each type in a list format</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_each_atm_type","title":"<code>get_each_atm_type</code>  <code>property</code>","text":"<p>get same integer for atoms of same type</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.is_selective_dynamics","title":"<code>is_selective_dynamics</code>  <code>property</code>","text":"<p>check whether selective dynamics True or False</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.read_poscar","title":"<code>read_poscar(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.read_poscar_adv","title":"<code>read_poscar_adv(verbosity=None)</code>","text":"<p>read poscar file present in the current dir or in the location specified.</p> <p>parameters     crysatal lattice object</p> <p>return     if l_SelectDynamics:         return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms,         self.atomFix, self.atomMove, self.atomFixDir     else:          return self.tau_cartesian, self.real_volume, self.LV1,         self.LV2, self.LV3,self.atm_type, self.natm_type, self.natoms</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_poscar","title":"<code>get_poscar()</code>","text":"<p>XXXXXXXXXXXXXXXXXXXXXXXXXX---DEPRECATED-------DEPRECATED ------------------XXXXXXXXXXXXXXXXXXXXXX ** get_poscar is deprecated; use read_poscar instead!! ** read poscar file present in the current dir or in the location specified.</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_reciprocal_lattice","title":"<code>get_reciprocal_lattice()</code>","text":"<p>return the reciprocal lattice vectors       input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.reciprocal_lattice","title":"<code>reciprocal_lattice()</code>","text":"<p>deprecated: method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_all_atoms_labels","title":"<code>get_all_atoms_labels()</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p> Parameters: <pre><code>string: POSCAR file in current dir.\n</code></pre> Return: <pre><code>list : strings of atomic lebels of all atoms according to the numbering of atoms in POSCAR file\nscalar: total number of atoms in the POSCAR file\nlist:  integer numbers starting from 1 to ntotal for all atoms(e.g. 1 1 1 2 3 4 4 ..)\n</code></pre> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_unique_list","title":"<code>get_unique_list(inp)</code>","text":"<p>get unique elements of list</p> <p>return:         string for each type of atoms</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_grouped_list","title":"<code>get_grouped_list(llist)</code>","text":"<p>get same string elements of list grouped together</p>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_neach_type","title":"<code>get_neach_type(inp)</code>","text":"<p>get number of list entries of each type</p> <p>return:</p> <pre><code>  list of integers for each type of atoms specifying their number\n</code></pre>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_selectivePOSCAR","title":"<code>get_selectivePOSCAR(ldisp=True, disp_atoms_num=None, outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings; e.g: [\"1-2\", '3']</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_selectivePOSCAR_adv","title":"<code>get_selectivePOSCAR_adv(ldisp=True, disp_atoms_num=None, fix_direction=None, coord='cartesian', outfile=None)</code>","text":"<p>get displaced poscar with selective tag and atomic positions tagged by T T T or F F F</p> <p>Parameters:</p> <ul> <li> <code>ldisp</code>           \u2013            <p>whether fix atoms or not</p> </li> <li> <code>disp_atoms_num</code>           \u2013            <p>list of atoms indices as strings to be fixed during DFT relaxation; e.g: [\"1-2\", '3']</p> </li> <li> <code>fix_direction</code>           \u2013            <p>x, y, or z direciton; by default atoms are fixed in all directions</p> </li> <li> <code>coord</code>           \u2013            <p>cartesian or direct coordinates; default: cartesian</p> </li> <li> <code>outfile</code>           \u2013            <p>output file name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>POSCAR file with selective dynamics tags</code>           \u2013            </li> </ul>"},{"location":"reference/esta/vaspBag/inout/crystal_lattice/#esta.vaspBag.inout.crystal_lattice.CrystalLattice.get_dispPOSCAR","title":"<code>get_dispPOSCAR(ldisp=None, disp_atoms_num=None)</code>","text":"<p>deprecated: use get_selectivePOSCAR</p>"},{"location":"reference/esta/vaspBag/inout/diameter_or_area_nanowire/","title":"esta.vaspBag.inout.diameter_or_area_nanowire","text":""},{"location":"reference/esta/vaspBag/inout/diameter_or_area_nanowire/#esta.vaspBag.inout.diameter_or_area_nanowire","title":"<code>esta.vaspBag.inout.diameter_or_area_nanowire</code>","text":"<p>Calculate the diametere or area/volume of a nanowire</p> <p>Parameters/Input: (string)  default string taken is \"POSCAR\"</p> <p>Returns/output: (float)  diameter</p>"},{"location":"reference/esta/vaspBag/inout/get_labelling_atoms/","title":"esta.vaspBag.inout.get_labelling_atoms","text":""},{"location":"reference/esta/vaspBag/inout/get_labelling_atoms/#esta.vaspBag.inout.get_labelling_atoms","title":"<code>esta.vaspBag.inout.get_labelling_atoms</code>","text":""},{"location":"reference/esta/vaspBag/inout/get_labelling_atoms/#esta.vaspBag.inout.get_labelling_atoms.get_all_atoms_lebels","title":"<code>get_all_atoms_lebels(ffile)</code>","text":"<p>by reading POSCAR, find the atomic labels of the atoms and total no of atoms</p>"},{"location":"reference/esta/vaspBag/inout/get_labelling_atoms/#esta.vaspBag.inout.get_labelling_atoms.get_all_atoms_lebels--parameters","title":"Parameters:","text":"<p>input: POSCAR file in current dir.</p> <p>output:      - list of strings of atomic lebels of all atoms according to the numbering of atoms in      POSCAR file     - integer for total number of atoms in the POSCAR file</p> <p>author: sk email: sonukumar.physics@gmail.com</p>"},{"location":"reference/esta/vaspBag/inout/lattice/","title":"esta.vaspBag.inout.lattice","text":""},{"location":"reference/esta/vaspBag/inout/lattice/#esta.vaspBag.inout.lattice","title":"<code>esta.vaspBag.inout.lattice</code>","text":"<p>lattice class to define unit cell and lattice parameters</p>"},{"location":"reference/esta/vaspBag/inout/old_reciprocal_lattice/","title":"esta.vaspBag.inout.old_reciprocal_lattice","text":""},{"location":"reference/esta/vaspBag/inout/old_reciprocal_lattice/#esta.vaspBag.inout.old_reciprocal_lattice","title":"<code>esta.vaspBag.inout.old_reciprocal_lattice</code>","text":"<p>method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/vaspBag/inout/old_reciprocal_lattice/#esta.vaspBag.inout.old_reciprocal_lattice.reciprocal_lattice","title":"<code>reciprocal_lattice(LV1, LV2, LV3)</code>","text":"<p>input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/vaspBag/inout/read_eigenval/","title":"esta.vaspBag.inout.read_eigenval","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval","title":"<code>esta.vaspBag.inout.read_eigenval</code>","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval","title":"<code>read_eigenval()</code>","text":"<p>read EIGENVAL file and find the band gap and other required items ...</p> <p>format of eigenval file :</p>"},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--1-108-108-1-1","title":"1             108  108    1    1","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--2-05831055e02-01906800e-08-01906800e-08-02000000e-08-05000000e-15","title":"2              0.5831055E+02  0.1906800E-08  0.1906800E-08  0.2000000E-08  0.5000000E-15","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--3-1000000000000000e-004","title":"3              1.000000000000000E-004","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--4-car","title":"4              CAR","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--5-unknown-system","title":"5              unknown system","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--6-648-13-388","title":"6                648     13    388","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--7","title":"7","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval/#esta.vaspBag.inout.read_eigenval.read_eigenval--8-00000000e00-00000000e00-00000000e00-02777778e-01","title":"8              0.0000000E+00  0.0000000E+00  0.0000000E+00  0.2777778E-01","text":"<pre><code>            1      -16.615104   1.000000\n            2      -16.236469   1.000000\n            3      -16.236325   1.000000\n            4      -16.236284   1.000000\n         .\n         .\n         .\n         .\n</code></pre> <p>the numbers are 1) # of ions , # of ions, the number of loops after which the averaged pair correlation  functions and the DOS are written, ISPIN 2) the volume of the cell (in \u00c3\u2026^3) and the lattice parameters of the box (in m) 3) T 4) the string 'CAR' 5) the header 6) # of electrons, # of k-points, #of bands 7) the k-point and its weight</p> <p>NOTE:  what about magnetic systems or SOC calculations?</p>"},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/","title":"esta.vaspBag.inout.read_eigenval_file","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file","title":"<code>esta.vaspBag.inout.read_eigenval_file</code>","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval","title":"<code>read_eigenval()</code>","text":"<pre><code>read EIGENVAL file and find the band gap and other required items ...\n</code></pre> <p>format of eigenval file :</p>"},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--1-108-108-1-1","title":"1             108  108    1    1","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--2-05831055e02-01906800e-08-01906800e-08-02000000e-08-05000000e-15","title":"2              0.5831055E+02  0.1906800E-08  0.1906800E-08  0.2000000E-08  0.5000000E-15","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--3-1000000000000000e-004","title":"3              1.000000000000000E-004","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--4-car","title":"4              CAR","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--5-unknown-system","title":"5              unknown system","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--6-648-13-388","title":"6                648     13    388","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--7","title":"7","text":""},{"location":"reference/esta/vaspBag/inout/read_eigenval_file/#esta.vaspBag.inout.read_eigenval_file.read_eigenval--8-00000000e00-00000000e00-00000000e00-02777778e-01","title":"8              0.0000000E+00  0.0000000E+00  0.0000000E+00  0.2777778E-01","text":"<pre><code>            1      -16.615104   1.000000\n            2      -16.236469   1.000000\n            3      -16.236325   1.000000\n            4      -16.236284   1.000000\n         .\n         .\n         .\n         .\n</code></pre> <p>the numbers are 1) # of ions , # of ions, the number of loops after which the averaged pair correlation  functions and the DOS are written, ISPIN 2) the volume of the cell (in \u00c3\u2026^3) and the lattice parameters of the box (in m) 3) T 4) the string 'CAR' 5) the header 6) # of electrons, # of k-points, #of bands 7) the k-point and its weight</p> <p>NOTE:  what about magnetic systems or SOC calculations?</p>"},{"location":"reference/esta/vaspBag/inout/read_outcar/","title":"esta.vaspBag.inout.read_outcar","text":""},{"location":"reference/esta/vaspBag/inout/read_outcar/#esta.vaspBag.inout.read_outcar","title":"<code>esta.vaspBag.inout.read_outcar</code>","text":""},{"location":"reference/esta/vaspBag/inout/read_outcar/#esta.vaspBag.inout.read_outcar.read_outcar","title":"<code>read_outcar()</code>","text":"<p>read outcar file</p>"},{"location":"reference/esta/vaspBag/inout/read_outcar_file/","title":"esta.vaspBag.inout.read_outcar_file","text":""},{"location":"reference/esta/vaspBag/inout/read_outcar_file/#esta.vaspBag.inout.read_outcar_file","title":"<code>esta.vaspBag.inout.read_outcar_file</code>","text":""},{"location":"reference/esta/vaspBag/inout/read_outcar_file/#esta.vaspBag.inout.read_outcar_file.read_outcar","title":"<code>read_outcar()</code>","text":"<p>read outcar file</p>"},{"location":"reference/esta/vaspBag/inout/read_poscar/","title":"esta.vaspBag.inout.read_poscar","text":""},{"location":"reference/esta/vaspBag/inout/read_poscar/#esta.vaspBag.inout.read_poscar","title":"<code>esta.vaspBag.inout.read_poscar</code>","text":"<p>routine to read POSCAR file (VASP)</p> <p>Input: default POSCAR file is taken from current dir.</p> <p>Returns:      if selective dynamics:          return tau_cartesian, real_volume, LV1, LV2, LV3, atomFix, atomMove      else:          return tau_cartesian, real_volume, LV1, LV2, LV3</p> <p>Note:         modification done to coordinates if -ve by more than 1. unit of          angstrom: see if there is a better way to handle it</p>"},{"location":"reference/esta/vaspBag/inout/read_poscar/#esta.vaspBag.inout.read_poscar.get_poscar","title":"<code>get_poscar(location)</code>","text":"<p>method to read poscar file</p> <p>Input: location of \"POSCAR\" file</p> <p>returns:  if selective dynamics:           return tau_cartesian, real_volume, LV1, LV2, LV3, atm_type, natom_type, natoms, atomFix, atomMove  else:      return tau_cartesian, real_volume, LV1, LV2, LV3, atm_type, natom_type, natoms</p>"},{"location":"reference/esta/vaspBag/inout/reciprocal_lattice/","title":"esta.vaspBag.inout.reciprocal_lattice","text":""},{"location":"reference/esta/vaspBag/inout/reciprocal_lattice/#esta.vaspBag.inout.reciprocal_lattice","title":"<code>esta.vaspBag.inout.reciprocal_lattice</code>","text":"<p>method to calculate the reciprocal lattice vectors</p>"},{"location":"reference/esta/vaspBag/inout/reciprocal_lattice/#esta.vaspBag.inout.reciprocal_lattice.reciprocal_lattice","title":"<code>reciprocal_lattice(LV1, LV2, LV3)</code>","text":"<p>input: real space lattice vectors: LV1, LV2, LV3 output: reciprocal space lattice vectors: b1, b2, b3          - note: a factor of 2pi is included in b1, b2, and b3</p>"},{"location":"reference/esta/vaspBag/inout/shift_to_origin/","title":"esta.vaspBag.inout.shift_to_origin","text":""},{"location":"reference/esta/vaspBag/inout/shift_to_origin/#esta.vaspBag.inout.shift_to_origin","title":"<code>esta.vaspBag.inout.shift_to_origin</code>","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp/","title":"esta.vaspBag.inout.xml_vasp","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp/#esta.vaspBag.inout.xml_vasp","title":"<code>esta.vaspBag.inout.xml_vasp</code>","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp/#esta.vaspBag.inout.xml_vasp.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/","title":"esta.vaspBag.inout.xml_vasp_ASE","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE","title":"<code>esta.vaspBag.inout.xml_vasp_ASE</code>","text":"<p>This module contains functionality for reading and writing an ASE Atoms object in VASP POSCAR format.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.get_atomtypes","title":"<code>get_atomtypes(fname)</code>","text":"<p>Given a file name, get the atomic symbols.</p> <p>The function can get this information from OUTCAR and POTCAR format files.  The files can also be compressed with gzip or bzip2.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.atomtypes_outpot","title":"<code>atomtypes_outpot(posfname, numsyms)</code>","text":"<p>Try to retreive chemical symbols from OUTCAR or POTCAR</p> <p>If getting atomtypes from the first line in POSCAR/CONTCAR fails, it might be possible to find the data in OUTCAR or POTCAR, if these files exist.</p> <p>posfname -- The filename of the POSCAR/CONTCAR file we're trying to read</p> <p>numsyms -- The number of symbols we must find</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.get_atomtypes_from_formula","title":"<code>get_atomtypes_from_formula(formula)</code>","text":"<p>Return atom types from chemical formula (optionally prepended with and underscore).</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.read_vasp","title":"<code>read_vasp(filename='CONTCAR')</code>","text":"<p>Import POSCAR/CONTCAR type file.</p> <p>Reads unitcell, atom positions and constraints from the POSCAR/CONTCAR file and tries to read atom types from POSCAR/CONTCAR header, if this fails the atom types are read from OUTCAR or POTCAR file.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.read_vasp_out","title":"<code>read_vasp_out(filename='OUTCAR', index=-1)</code>","text":"<p>Import OUTCAR type file.</p> <p>Reads unitcell, atom positions, energies, and forces from the OUTCAR file and attempts to read constraints (if any) from CONTCAR/POSCAR, if present.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.read_vasp_xdatcar","title":"<code>read_vasp_xdatcar(filename, index=-1)</code>","text":"<p>Import XDATCAR file</p> <p>Reads all positions from the XDATCAR and returns a list of Atoms objects.  Useful for viewing optimizations runs from VASP5.x</p> <p>Constraints ARE NOT stored in the XDATCAR, and as such, Atoms objects retrieved from the XDATCAR will not have constraints set.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file.</p> <p>Reads unit cell, atom positions, energies, forces, and constraints from vasprun.xml file</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_ASE/#esta.vaspBag.inout.xml_vasp_ASE.write_vasp","title":"<code>write_vasp(filename, atoms, label='', direct=False, sort=None, symbol_count=None, long_format=True, vasp5=False)</code>","text":"<p>Method to write VASP position (POSCAR/CONTCAR) files.</p> <p>Writes label, scalefactor, unitcell, # of various kinds of atoms, positions in cartesian or scaled coordinates (Direct), and constraints to file. Cartesian coordiantes is default and default label is the atomic species, e.g. 'C N H Cu'.</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_adv/","title":"esta.vaspBag.inout.xml_vasp_adv","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp_adv/#esta.vaspBag.inout.xml_vasp_adv","title":"<code>esta.vaspBag.inout.xml_vasp_adv</code>","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp_adv/#esta.vaspBag.inout.xml_vasp_adv.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/esta/vaspBag/inout/xml_vasp_hse/","title":"esta.vaspBag.inout.xml_vasp_hse","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp_hse/#esta.vaspBag.inout.xml_vasp_hse","title":"<code>esta.vaspBag.inout.xml_vasp_hse</code>","text":""},{"location":"reference/esta/vaspBag/inout/xml_vasp_hse/#esta.vaspBag.inout.xml_vasp_hse.read_vasp_xml","title":"<code>read_vasp_xml(filename='vasprun.xml', index=-1)</code>","text":"<p>Parse vasprun.xml file of vasp</p> <p>Input: string: 'vasprun.xml' Returns: array: unit cell,           array: atomic positions,          array: forces</p> <p>Taken from ase -- to be rewritten again</p>"},{"location":"reference/esta/vaspBag/postproc/","title":"esta.vaspBag.postproc","text":""},{"location":"reference/esta/vaspBag/postproc/#esta.vaspBag.postproc","title":"<code>esta.vaspBag.postproc</code>","text":""},{"location":"reference/esta/vaspBag/postproc/band_gap/","title":"esta.vaspBag.postproc.band_gap","text":""},{"location":"reference/esta/vaspBag/postproc/band_gap/#esta.vaspBag.postproc.band_gap","title":"<code>esta.vaspBag.postproc.band_gap</code>","text":"<p>Finding of:</p> <p>band gap from the OUTCAR file or EIGENVAL file   VBM or HOMO   CBM or LUMO   Fermi energy   no. of kpts   no. of bands   no. of electrons   spin polarised calculation or not?</p> <p>Note:</p> <p>**band gap nature: the kpoints corresponding to VBM and CBm are found</p> <p>Date: March 2018, By S.K.   Date: modified - May-June 2018, By S.K.</p> <p>WARNING: dealing with metallic cases -- experimental            Magnetic systems/SOC---todo</p>"},{"location":"reference/esta/vaspBag/postproc/band_gap/#esta.vaspBag.postproc.band_gap.find_VBMin_CBMax","title":"<code>find_VBMin_CBMax(ispin, nkpts, nbands, nelectron)</code>","text":"<p>find high occupied level = VBMax and find lowest unoccupied level = CBMin</p>"},{"location":"reference/esta/vaspBag/rotateAxisUnitCell/","title":"esta.vaspBag.rotateAxisUnitCell","text":""},{"location":"reference/esta/vaspBag/rotateAxisUnitCell/#esta.vaspBag.rotateAxisUnitCell","title":"<code>esta.vaspBag.rotateAxisUnitCell</code>","text":""},{"location":"reference/esta/vaspBag/rotateAxisUnitCell/rotate_axis/","title":"esta.vaspBag.rotateAxisUnitCell.rotate_axis","text":""},{"location":"reference/esta/vaspBag/rotateAxisUnitCell/rotate_axis/#esta.vaspBag.rotateAxisUnitCell.rotate_axis","title":"<code>esta.vaspBag.rotateAxisUnitCell.rotate_axis</code>","text":"<p>rotate axis of the unit cell</p> <p>for example: abc \u2192 bca etc.</p> <p>Given: unit cell: lattice parameters and atomic positions       i.e. POSCAR given.</p>"},{"location":"reference/esta/vaspBag/vaspin/","title":"esta.vaspBag.vaspin","text":""},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin","title":"<code>esta.vaspBag.vaspin</code>","text":"<p>vasp class to create INCAR, KPOINTS, POTCAR (if potentials are available) for  a given POSCAR file in a new directory.</p>"},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin.vasp","title":"<code>vasp</code>","text":"<p>get INCAR, KPOINTS, POTCAR_* files for a given POSCAR file</p>"},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin.vasp.get_kpoints_file","title":"<code>get_kpoints_file(poscar_name=None, kgrid=None, centering=None)</code>","text":"<p>get kponts file.</p> <p>Parameters:</p> <ul> <li> <code>poscar_name</code>           \u2013            <p>poscar file name</p> </li> <li> <code>kgrid</code>           \u2013            <p>kgrid list</p> </li> <li> <code>centering</code>           \u2013            <p>centering (Gamma or MP)</p> </li> </ul>"},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin.vasp.get_kgrid","title":"<code>get_kgrid(poscar_name)</code>","text":"<p>using  def get_N1_N2_N3_in_MP_grid(posfile = None, location = None, l_metal_insulator = None         return int(N1), int(N2), int(N3) from qeBag</p>"},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin.vasp.get_POTCAR","title":"<code>get_POTCAR()</code>","text":"<p>copy the POTCAR for each element by reading the element  information from poscar </p> <p>Note: location of POTCAR files for PBE functional are MUST</p> <p>.. note::     try this from Kitchin site: </p> <pre><code>-----&gt;\nif fname is None:\n    fname = os.path.join(self.directory, 'POTCAR')\n\nwith open(fname, 'wb') as potfile:\n     for _, pfile, _ in self.ppp_list:\n        pfile = os.path.join(os.environ['VASP_PP_PATH'], pfile)\n        with open(pfile) as f:\n            potfile.write(f.read())\n-----&gt;\n</code></pre>"},{"location":"reference/esta/vaspBag/vaspin/#esta.vaspBag.vaspin.vasp.get_incar_file","title":"<code>get_incar_file(poscar_name=None)</code>","text":"<p>get INCAR file from poscar with automatic finding of KE cutoff  by parsing POTCAR files</p>"},{"location":"reference/esta/xtbBag/","title":"esta.xtbBag","text":""},{"location":"reference/esta/xtbBag/#esta.xtbBag","title":"<code>esta.xtbBag</code>","text":""},{"location":"reference/esta/xtbBag/hessian/","title":"esta.xtbBag.hessian","text":""},{"location":"reference/esta/xtbBag/hessian/#esta.xtbBag.hessian","title":"<code>esta.xtbBag.hessian</code>","text":"<p>reading full hessian from xtb hessian output file</p>"},{"location":"reference/esta/xtbBag/hessian/#esta.xtbBag.hessian.get_full_hessian","title":"<code>get_full_hessian(fname, natom)</code>","text":"<p>read full hessian from the xtb hessian output file</p> <p>Parameters:</p> <ul> <li> <code>fname</code>           \u2013            <p>input file: str name containing hessian information</p> </li> <li> <code>natom</code>           \u2013            </li> <li> <code>natom</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>hess</code> (              <code>array, rank 2d array of dim (3*natom, 3*natom) </code> )          \u2013            </li> <li> <code>hessian matrix</code>           \u2013            </li> </ul> Note <p>read hessian matrix from the xtb hessain file</p> <p>the equivalent fortran90 code is:</p> <p>DO i=1,natom*3          maxcol = 0          DO WHILE(maxcol .lt. natom*3)             mincol = maxcol + 1             maxcol = MIN(maxcol+5,natom*3)             READ(10, ) (hessian(j,i), j = mincol, maxcol)             !write(,*) (hessian(j,i), j = mincol, maxcol)         ENDDO    ENDDO</p>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/","title":"esta.xtbBag.xtb_calculator_for_EStA_21012025_v3","text":""},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3","title":"<code>esta.xtbBag.xtb_calculator_for_EStA_21012025_v3</code>","text":"<p>!!-----------------------------------------------------------------------------!! !   interface to xTB code and extracting energy, position, gradient,  !   and hessian (possibly) to EStA software</p> <p>!   author : skumar !   email: sonukumar.physics@gmail.com !!-----------------------------------------------------------------------------!!</p>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.XTB","title":"<code>XTB</code>","text":"<p>XTB class to         - read xyz file  #extract xyz file from the xxx_INP4GEN.rrm file         - read INPUT for              -- reading the spin/charge values  #needed to create *.xcontrol file from GRRM18 xxx.com file             -- reading the task E, EG, or EGH (Energy, gradient, and hessian)  #to perform by reading the *_INP4GEN.rrm file generated by GRRM17         - create *.xcontrol file from xyz and INPUT (basically *xyz is read automatically ..confirm it??)         - finally read energy, gradient, and/or hessian from xtb output</p>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.XTB.get_xtb_xcontrol","title":"<code>get_xtb_xcontrol()</code>","text":"<p>get xt.xcontrol file by reading the  - charge and multiplicity  - other contraints from xyz object</p> <p>Note: to get no of un-paired electrons (Ue) from multiplicity (M)=2S+1     Ue = 0 (2*S) for M=1, S=0 (no unpaired elctrons)     Ue = 1 (2*S) for M=2, S=\u00bd (one unpaired elctrons)     Ue = 2 (2*S) for M=3, S=1 (two  unpaired elctrons)     ===&gt; Ue = M-1</p> <p>the fixed atoms are provided from the external xyz-object aka aadhaar object and atoms positions/symbols also. the charge and spin are Hard coded: charge = 0 , and unpaired electon (xtb need Ue not spin) = 0</p> Note <pre><code>xt.xcontrol example:\n$chrg 0\n$spin 0\n$fix\natoms: 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\natoms: 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67\n$end\n</code></pre>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.XTB.get_task","title":"<code>get_task()</code>","text":"<p>TASK: ENERGY, GRADIENT, and HESSIAN GUESS: READ FROM test_MO2GEN.rrm NACTIVEATOM / NATOM: 3 / 3 NFROZENATOM: 0</p> <p>more to implement such as hookian potential to fix the atoms during the  reaction etc..!!</p>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.execute_xtb_xx","title":"<code>execute_xtb_xx(xcontrol_file_prefix, coord_file_prefix, task)</code>","text":"<p>execute xtb program package given following inputs</p> <p>Parameters:</p> <ul> <li> <code>xcontrol_file_prefix</code>           \u2013            </li> <li> <code>coord_file_prefix</code>           \u2013            </li> <li> <code>task</code>           \u2013            </li> </ul> <p>Returns:</p> <ul> <li> <code>generate output files from the xtb excution</code>           \u2013            </li> </ul>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.ext_interface_xx","title":"<code>ext_interface_xx(xyz_obj, xyz_filename=None)</code>","text":"<p>interface to  external program package for performing bfgs relaxation etc calculations</p> <p>INPUT is name of input file containing charge, spin-multiplicity, and taks (E,EG, and EGH)</p> <p>Interface to external code, here xtb,  to carry out 4 things:</p> <ol> <li> <p>create input file for the external code (here xtb code); the input file  entries varies depending on the request from GRRM.out file indicated in  xxx_INP4GEN.rrm</p> </li> <li> <p>excecute the xtb code</p> </li> </ol>"},{"location":"reference/esta/xtbBag/xtb_calculator_for_EStA_21012025_v3/#esta.xtbBag.xtb_calculator_for_EStA_21012025_v3.execution_manager","title":"<code>execution_manager(opt_dirname, xyz_filename, fix_atmlist=None)</code>","text":"<p>manage execution of xtb code and related files</p>"},{"location":"reference/esta/xyzdata/","title":"esta.xyzdata","text":""},{"location":"reference/esta/xyzdata/#esta.xyzdata","title":"<code>esta.xyzdata</code>","text":""}]}